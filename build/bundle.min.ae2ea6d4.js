(function(){var e=function(t,n){var r=e.resolve(t,n||"/"),i=e.modules[r];if(!i)throw new Error("Failed to resolve module "+t+", tried "+r);var s=e.cache[r],o=s?s.exports:i();return o};e.paths=[],e.modules={},e.cache={},e.extensions=[".js",".coffee",".json"],e._core={assert:!0,events:!0,fs:!0,path:!0,vm:!0},e.resolve=function(){return function(t,n){function u(t){t=r.normalize(t);if(e.modules[t])return t;for(var n=0;n<e.extensions.length;n++){var i=e.extensions[n];if(e.modules[t+i])return t+i}}function a(t){t=t.replace(/\/+$/,"");var n=r.normalize(t+"/package.json");if(e.modules[n]){var i=e.modules[n](),s=i.browserify;if(typeof s=="object"&&s.main){var o=u(r.resolve(t,s.main));if(o)return o}else if(typeof s=="string"){var o=u(r.resolve(t,s));if(o)return o}else if(i.main){var o=u(r.resolve(t,i.main));if(o)return o}}return u(t+"/index")}function f(e,t){var n=l(t);for(var r=0;r<n.length;r++){var i=n[r],s=u(i+"/"+e);if(s)return s;var o=a(i+"/"+e);if(o)return o}var s=u(e);if(s)return s}function l(e){var t;e==="/"?t=[""]:t=r.normalize(e).split("/");var n=[];for(var i=t.length-1;i>=0;i--){if(t[i]==="node_modules")continue;var s=t.slice(0,i+1).join("/")+"/node_modules";n.push(s)}return n}n||(n="/");if(e._core[t])return t;var r=e.modules.path();n=r.resolve("/",n);var i=n||"/";if(t.match(/^(?:\.\.?\/|\/)/)){var s=u(r.resolve(i,t))||a(r.resolve(i,t));if(s)return s}var o=f(t,i);if(o)return o;throw new Error("Cannot find module '"+t+"'")}}(),e.alias=function(t,n){var r=e.modules.path(),i=null;try{i=e.resolve(t+"/package.json","/")}catch(s){i=e.resolve(t,"/")}var o=r.dirname(i),u=(Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t})(e.modules);for(var a=0;a<u.length;a++){var f=u[a];if(f.slice(0,o.length+1)===o+"/"){var l=f.slice(o.length);e.modules[n+l]=e.modules[o+l]}else f===o&&(e.modules[n]=e.modules[o])}},function(){var t={},n=typeof window!="undefined"?window:{},r=!1;e.define=function(i,s){!r&&e.modules.__browserify_process&&(t=e.modules.__browserify_process(),r=!0);var o=e._core[i]?"":e.modules.path().dirname(i),u=function(t){var n=e(t,o),r=e.cache[e.resolve(t,o)];return r&&r.parent===null&&(r.parent=a),n};u.resolve=function(t){return e.resolve(t,o)},u.modules=e.modules,u.define=e.define,u.cache=e.cache;var a={id:i,filename:i,exports:{},loaded:!1,parent:null};e.modules[i]=function(){return e.cache[i]=a,s.call(a.exports,u,a,a.exports,o,i,t,n),a.loaded=!0,a.exports}}}(),e.define("path",function(e,t,n,r,i,s,o){function u(e,t){var n=[];for(var r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}function a(e,t){var n=0;for(var r=e.length;r>=0;r--){var i=e[r];i=="."?e.splice(r,1):i===".."?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}var f=/^(.+\/(?!$)|\/)?((?:.+?)?(\.[^.]*)?)$/;n.resolve=function(){var e="",t=!1;for(var n=arguments.length;n>=-1&&!t;n--){var r=n>=0?arguments[n]:s.cwd();if(typeof r!="string"||!r)continue;e=r+"/"+e,t=r.charAt(0)==="/"}return e=a(u(e.split("/"),function(e){return!!e}),!t).join("/"),(t?"/":"")+e||"."},n.normalize=function(e){var t=e.charAt(0)==="/",n=e.slice(-1)==="/";return e=a(u(e.split("/"),function(e){return!!e}),!t).join("/"),!e&&!t&&(e="."),e&&n&&(e+="/"),(t?"/":"")+e},n.join=function(){var e=Array.prototype.slice.call(arguments,0);return n.normalize(u(e,function(e,t){return e&&typeof e=="string"}).join("/"))},n.dirname=function(e){var t=f.exec(e)[1]||"",n=!1;return t?t.length===1||n&&t.length<=3&&t.charAt(1)===":"?t:t.substring(0,t.length-1):"."},n.basename=function(e,t){var n=f.exec(e)[2]||"";return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},n.extname=function(e){return f.exec(e)[3]||""}}),e.define("__browserify_process",function(e,t,n,r,i,s,o){var s=t.exports={};s.nextTick=function(){var e=typeof window!="undefined"&&window.setImmediate,t=typeof window!="undefined"&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};if(t){var n=[];return window.addEventListener("message",function(e){if(e.source===window&&e.data==="browserify-tick"){e.stopPropagation();if(n.length>0){var t=n.shift();t()}}},!0),function(t){n.push(t),window.postMessage("browserify-tick","*")}}return function(t){setTimeout(t,0)}}(),s.title="browser",s.browser=!0,s.env={},s.argv=[],s.binding=function(t){if(t==="evals")return e("vm");throw new Error("No such module. (Possibly not yet loaded)")},function(){var t="/",n;s.cwd=function(){return t},s.chdir=function(r){n||(n=e("path")),t=n.resolve(r,t)}}()}),e.define("/node_modules/underscore/package.json",function(e,t,n,r,i,s,o){t.exports={main:"underscore.js"}}),e.define("/node_modules/underscore/underscore.js",function(e,t,n,r,i,s,o){(function(){var e=this,r=e._,i={},s=Array.prototype,o=Object.prototype,u=Function.prototype,a=s.push,f=s.slice,l=s.concat,c=o.toString,h=o.hasOwnProperty,p=s.forEach,d=s.map,v=s.reduce,m=s.reduceRight,g=s.filter,y=s.every,b=s.some,w=s.indexOf,E=s.lastIndexOf,S=Array.isArray,x=Object.keys,T=u.bind,N=function(e){if(e instanceof N)return e;if(!(this instanceof N))return new N(e);this._wrapped=e};typeof n!="undefined"?(typeof t!="undefined"&&t.exports&&(n=t.exports=N),n._=N):e._=N,N.VERSION="1.4.4";var C=N.each=N.forEach=function(e,t,n){if(e==null)return;if(p&&e.forEach===p)e.forEach(t,n);else if(e.length===+e.length){for(var r=0,s=e.length;r<s;r++)if(t.call(n,e[r],r,e)===i)return}else for(var o in e)if(N.has(e,o)&&t.call(n,e[o],o,e)===i)return};N.map=N.collect=function(e,t,n){var r=[];return e==null?r:d&&e.map===d?e.map(t,n):(C(e,function(e,i,s){r[r.length]=t.call(n,e,i,s)}),r)};var k="Reduce of empty array with no initial value";N.reduce=N.foldl=N.inject=function(e,t,n,r){var i=arguments.length>2;e==null&&(e=[]);if(v&&e.reduce===v)return r&&(t=N.bind(t,r)),i?e.reduce(t,n):e.reduce(t);C(e,function(e,s,o){i?n=t.call(r,n,e,s,o):(n=e,i=!0)});if(!i)throw new TypeError(k);return n},N.reduceRight=N.foldr=function(e,t,n,r){var i=arguments.length>2;e==null&&(e=[]);if(m&&e.reduceRight===m)return r&&(t=N.bind(t,r)),i?e.reduceRight(t,n):e.reduceRight(t);var s=e.length;if(s!==+s){var o=N.keys(e);s=o.length}C(e,function(u,a,f){a=o?o[--s]:--s,i?n=t.call(r,n,e[a],a,f):(n=e[a],i=!0)});if(!i)throw new TypeError(k);return n},N.find=N.detect=function(e,t,n){var r;return L(e,function(e,i,s){if(t.call(n,e,i,s))return r=e,!0}),r},N.filter=N.select=function(e,t,n){var r=[];return e==null?r:g&&e.filter===g?e.filter(t,n):(C(e,function(e,i,s){t.call(n,e,i,s)&&(r[r.length]=e)}),r)},N.reject=function(e,t,n){return N.filter(e,function(e,r,i){return!t.call(n,e,r,i)},n)},N.every=N.all=function(e,t,n){t||(t=N.identity);var r=!0;return e==null?r:y&&e.every===y?e.every(t,n):(C(e,function(e,s,o){if(!(r=r&&t.call(n,e,s,o)))return i}),!!r)};var L=N.some=N.any=function(e,t,n){t||(t=N.identity);var r=!1;return e==null?r:b&&e.some===b?e.some(t,n):(C(e,function(e,s,o){if(r||(r=t.call(n,e,s,o)))return i}),!!r)};N.contains=N.include=function(e,t){return e==null?!1:w&&e.indexOf===w?e.indexOf(t)!=-1:L(e,function(e){return e===t})},N.invoke=function(e,t){var n=f.call(arguments,2),r=N.isFunction(t);return N.map(e,function(e){return(r?t:e[t]).apply(e,n)})},N.pluck=function(e,t){return N.map(e,function(e){return e[t]})},N.where=function(e,t,n){return N.isEmpty(t)?n?null:[]:N[n?"find":"filter"](e,function(e){for(var n in t)if(t[n]!==e[n])return!1;return!0})},N.findWhere=function(e,t){return N.where(e,t,!0)},N.max=function(e,t,n){if(!t&&N.isArray(e)&&e[0]===+e[0]&&e.length<65535)return Math.max.apply(Math,e);if(!t&&N.isEmpty(e))return-Infinity;var r={computed:-Infinity,value:-Infinity};return C(e,function(e,i,s){var o=t?t.call(n,e,i,s):e;o>=r.computed&&(r={value:e,computed:o})}),r.value},N.min=function(e,t,n){if(!t&&N.isArray(e)&&e[0]===+e[0]&&e.length<65535)return Math.min.apply(Math,e);if(!t&&N.isEmpty(e))return Infinity;var r={computed:Infinity,value:Infinity};return C(e,function(e,i,s){var o=t?t.call(n,e,i,s):e;o<r.computed&&(r={value:e,computed:o})}),r.value},N.shuffle=function(e){var t,n=0,r=[];return C(e,function(e){t=N.random(n++),r[n-1]=r[t],r[t]=e}),r};var A=function(e){return N.isFunction(e)?e:function(t){return t[e]}};N.sortBy=function(e,t,n){var r=A(t);return N.pluck(N.map(e,function(e,t,i){return{value:e,index:t,criteria:r.call(n,e,t,i)}}).sort(function(e,t){var n=e.criteria,r=t.criteria;if(n!==r){if(n>r||n===void 0)return 1;if(n<r||r===void 0)return-1}return e.index<t.index?-1:1}),"value")};var O=function(e,t,n,r){var i={},s=A(t||N.identity);return C(e,function(t,o){var u=s.call(n,t,o,e);r(i,u,t)}),i};N.groupBy=function(e,t,n){return O(e,t,n,function(e,t,n){(N.has(e,t)?e[t]:e[t]=[]).push(n)})},N.countBy=function(e,t,n){return O(e,t,n,function(e,t){N.has(e,t)||(e[t]=0),e[t]++})},N.sortedIndex=function(e,t,n,r){n=n==null?N.identity:A(n);var i=n.call(r,t),s=0,o=e.length;while(s<o){var u=s+o>>>1;n.call(r,e[u])<i?s=u+1:o=u}return s},N.toArray=function(e){return e?N.isArray(e)?f.call(e):e.length===+e.length?N.map(e,N.identity):N.values(e):[]},N.size=function(e){return e==null?0:e.length===+e.length?e.length:N.keys(e).length},N.first=N.head=N.take=function(e,t,n){return e==null?void 0:t!=null&&!n?f.call(e,0,t):e[0]},N.initial=function(e,t,n){return f.call(e,0,e.length-(t==null||n?1:t))},N.last=function(e,t,n){return e==null?void 0:t!=null&&!n?f.call(e,Math.max(e.length-t,0)):e[e.length-1]},N.rest=N.tail=N.drop=function(e,t,n){return f.call(e,t==null||n?1:t)},N.compact=function(e){return N.filter(e,N.identity)};var M=function(e,t,n){return C(e,function(e){N.isArray(e)?t?a.apply(n,e):M(e,t,n):n.push(e)}),n};N.flatten=function(e,t){return M(e,t,[])},N.without=function(e){return N.difference(e,f.call(arguments,1))},N.uniq=N.unique=function(e,t,n,r){N.isFunction(t)&&(r=n,n=t,t=!1);var i=n?N.map(e,n,r):e,s=[],o=[];return C(i,function(n,r){if(t?!r||o[o.length-1]!==n:!N.contains(o,n))o.push(n),s.push(e[r])}),s},N.union=function(){return N.uniq(l.apply(s,arguments))},N.intersection=function(e){var t=f.call(arguments,1);return N.filter(N.uniq(e),function(e){return N.every(t,function(t){return N.indexOf(t,e)>=0})})},N.difference=function(e){var t=l.apply(s,f.call(arguments,1));return N.filter(e,function(e){return!N.contains(t,e)})},N.zip=function(){var e=f.call(arguments),t=N.max(N.pluck(e,"length")),n=new Array(t);for(var r=0;r<t;r++)n[r]=N.pluck(e,""+r);return n},N.object=function(e,t){if(e==null)return{};var n={};for(var r=0,i=e.length;r<i;r++)t?n[e[r]]=t[r]:n[e[r][0]]=e[r][1];return n},N.indexOf=function(e,t,n){if(e==null)return-1;var r=0,i=e.length;if(n){if(typeof n!="number")return r=N.sortedIndex(e,t),e[r]===t?r:-1;r=n<0?Math.max(0,i+n):n}if(w&&e.indexOf===w)return e.indexOf(t,n);for(;r<i;r++)if(e[r]===t)return r;return-1},N.lastIndexOf=function(e,t,n){if(e==null)return-1;var r=n!=null;if(E&&e.lastIndexOf===E)return r?e.lastIndexOf(t,n):e.lastIndexOf(t);var i=r?n:e.length;while(i--)if(e[i]===t)return i;return-1},N.range=function(e,t,n){arguments.length<=1&&(t=e||0,e=0),n=arguments[2]||1;var r=Math.max(Math.ceil((t-e)/n),0),i=0,s=new Array(r);while(i<r)s[i++]=e,e+=n;return s},N.bind=function(e,t){if(e.bind===T&&T)return T.apply(e,f.call(arguments,1));var n=f.call(arguments,2);return function(){return e.apply(t,n.concat(f.call(arguments)))}},N.partial=function(e){var t=f.call(arguments,1);return function(){return e.apply(this,t.concat(f.call(arguments)))}},N.bindAll=function(e){var t=f.call(arguments,1);return t.length===0&&(t=N.functions(e)),C(t,function(t){e[t]=N.bind(e[t],e)}),e},N.memoize=function(e,t){var n={};return t||(t=N.identity),function(){var r=t.apply(this,arguments);return N.has(n,r)?n[r]:n[r]=e.apply(this,arguments)}},N.delay=function(e,t){var n=f.call(arguments,2);return setTimeout(function(){return e.apply(null,n)},t)},N.defer=function(e){return N.delay.apply(N,[e,1].concat(f.call(arguments,1)))},N.throttle=function(e,t){var n,r,i,s,o=0,u=function(){o=new Date,i=null,s=e.apply(n,r)};return function(){var a=new Date,f=t-(a-o);return n=this,r=arguments,f<=0?(clearTimeout(i),i=null,o=a,s=e.apply(n,r)):i||(i=setTimeout(u,f)),s}},N.debounce=function(e,t,n){var r,i;return function(){var s=this,o=arguments,u=function(){r=null,n||(i=e.apply(s,o))},a=n&&!r;return clearTimeout(r),r=setTimeout(u,t),a&&(i=e.apply(s,o)),i}},N.once=function(e){var t=!1,n;return function(){return t?n:(t=!0,n=e.apply(this,arguments),e=null,n)}},N.wrap=function(e,t){return function(){var n=[e];return a.apply(n,arguments),t.apply(this,n)}},N.compose=function(){var e=arguments;return function(){var t=arguments;for(var n=e.length-1;n>=0;n--)t=[e[n].apply(this,t)];return t[0]}},N.after=function(e,t){return e<=0?t():function(){if(--e<1)return t.apply(this,arguments)}},N.keys=x||function(e){if(e!==Object(e))throw new TypeError("Invalid object");var t=[];for(var n in e)N.has(e,n)&&(t[t.length]=n);return t},N.values=function(e){var t=[];for(var n in e)N.has(e,n)&&t.push(e[n]);return t},N.pairs=function(e){var t=[];for(var n in e)N.has(e,n)&&t.push([n,e[n]]);return t},N.invert=function(e){var t={};for(var n in e)N.has(e,n)&&(t[e[n]]=n);return t},N.functions=N.methods=function(e){var t=[];for(var n in e)N.isFunction(e[n])&&t.push(n);return t.sort()},N.extend=function(e){return C(f.call(arguments,1),function(t){if(t)for(var n in t)e[n]=t[n]}),e},N.pick=function(e){var t={},n=l.apply(s,f.call(arguments,1));return C(n,function(n){n in e&&(t[n]=e[n])}),t},N.omit=function(e){var t={},n=l.apply(s,f.call(arguments,1));for(var r in e)N.contains(n,r)||(t[r]=e[r]);return t},N.defaults=function(e){return C(f.call(arguments,1),function(t){if(t)for(var n in t)e[n]==null&&(e[n]=t[n])}),e},N.clone=function(e){return N.isObject(e)?N.isArray(e)?e.slice():N.extend({},e):e},N.tap=function(e,t){return t(e),e};var _=function(e,t,n,r){if(e===t)return e!==0||1/e==1/t;if(e==null||t==null)return e===t;e instanceof N&&(e=e._wrapped),t instanceof N&&(t=t._wrapped);var i=c.call(e);if(i!=c.call(t))return!1;switch(i){case"[object String]":return e==String(t);case"[object Number]":return e!=+e?t!=+t:e==0?1/e==1/t:e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object RegExp]":return e.source==t.source&&e.global==t.global&&e.multiline==t.multiline&&e.ignoreCase==t.ignoreCase}if(typeof e!="object"||typeof t!="object")return!1;var s=n.length;while(s--)if(n[s]==e)return r[s]==t;n.push(e),r.push(t);var o=0,u=!0;if(i=="[object Array]"){o=e.length,u=o==t.length;if(u)while(o--)if(!(u=_(e[o],t[o],n,r)))break}else{var a=e.constructor,f=t.constructor;if(a!==f&&!(N.isFunction(a)&&a instanceof a&&N.isFunction(f)&&f instanceof f))return!1;for(var l in e)if(N.has(e,l)){o++;if(!(u=N.has(t,l)&&_(e[l],t[l],n,r)))break}if(u){for(l in t)if(N.has(t,l)&&!(o--))break;u=!o}}return n.pop(),r.pop(),u};N.isEqual=function(e,t){return _(e,t,[],[])},N.isEmpty=function(e){if(e==null)return!0;if(N.isArray(e)||N.isString(e))return e.length===0;for(var t in e)if(N.has(e,t))return!1;return!0},N.isElement=function(e){return!!e&&e.nodeType===1},N.isArray=S||function(e){return c.call(e)=="[object Array]"},N.isObject=function(e){return e===Object(e)},C(["Arguments","Function","String","Number","Date","RegExp"],function(e){N["is"+e]=function(t){return c.call(t)=="[object "+e+"]"}}),N.isArguments(arguments)||(N.isArguments=function(e){return!!e&&!!N.has(e,"callee")}),typeof /./!="function"&&(N.isFunction=function(e){return typeof e=="function"}),N.isFinite=function(e){return isFinite(e)&&!isNaN(parseFloat(e))},N.isNaN=function(e){return N.isNumber(e)&&e!=+e},N.isBoolean=function(e){return e===!0||e===!1||c.call(e)=="[object Boolean]"},N.isNull=function(e){return e===null},N.isUndefined=function(e){return e===void 0},N.has=function(e,t){return h.call(e,t)},N.noConflict=function(){return e._=r,this},N.identity=function(e){return e},N.times=function(e,t,n){var r=Array(e);for(var i=0;i<e;i++)r[i]=t.call(n,i);return r},N.random=function(e,t){return t==null&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))};var D={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","/":"&#x2F;"}};D.unescape=N.invert(D.escape);var P={escape:new RegExp("["+N.keys(D.escape).join("")+"]","g"),unescape:new RegExp("("+N.keys(D.unescape).join("|")+")","g")};N.each(["escape","unescape"],function(e){N[e]=function(t){return t==null?"":(""+t).replace(P[e],function(t){return D[e][t]})}}),N.result=function(e,t){if(e==null)return null;var n=e[t];return N.isFunction(n)?n.call(e):n},N.mixin=function(e){C(N.functions(e),function(t){var n=N[t]=e[t];N.prototype[t]=function(){var e=[this._wrapped];return a.apply(e,arguments),I.call(this,n.apply(N,e))}})};var H=0;N.uniqueId=function(e){var t=++H+"";return e?e+t:t},N.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var B=/(.)^/,j={"'":"'","\\":"\\","\r":"r","\n":"n","	":"t","\u2028":"u2028","\u2029":"u2029"},F=/\\|'|\r|\n|\t|\u2028|\u2029/g;N.template=function(e,t,n){var r;n=N.defaults({},n,N.templateSettings);var i=new RegExp([(n.escape||B).source,(n.interpolate||B).source,(n.evaluate||B).source].join("|")+"|$","g"),s=0,o="__p+='";e.replace(i,function(t,n,r,i,u){return o+=e.slice(s,u).replace(F,function(e){return"\\"+j[e]}),n&&(o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'"),r&&(o+="'+\n((__t=("+r+"))==null?'':__t)+\n'"),i&&(o+="';\n"+i+"\n__p+='"),s=u+t.length,t}),o+="';\n",n.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{r=new Function(n.variable||"obj","_",o)}catch(u){throw u.source=o,u}if(t)return r(t,N);var a=function(e){return r.call(this,e,N)};return a.source="function("+(n.variable||"obj")+"){\n"+o+"}",a},N.chain=function(e){return N(e).chain()};var I=function(e){return this._chain?N(e).chain():e};N.mixin(N),C(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var t=s[e];N.prototype[e]=function(){var n=this._wrapped;return t.apply(n,arguments),(e=="shift"||e=="splice")&&n.length===0&&delete n[0],I.call(this,n)}}),C(["concat","join","slice"],function(e){var t=s[e];N.prototype[e]=function(){return I.call(this,t.apply(this._wrapped,arguments))}}),N.extend(N.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}})}).call(this)}),e.define("/node_modules/backbone/package.json",function(e,t,n,r,i,s,o){t.exports={main:"backbone.js"}}),e.define("/node_modules/backbone/backbone.js",function(e,t,n,r,i,s,o){(function(){var t=this,r=t.Backbone,i=[],s=i.push,o=i.slice,u=i.splice,a;typeof n!="undefined"?a=n:a=t.Backbone={},a.VERSION="0.9.10";var f=t._;!f&&typeof e!="undefined"&&(f=e("underscore")),a.$=t.jQuery||t.Zepto||t.ender,a.noConflict=function(){return t.Backbone=r,this},a.emulateHTTP=!1,a.emulateJSON=!1;var l=/\s+/,c=function(e,t,n,r){if(!n)return!0;if(typeof n=="object")for(var i in n)e[t].apply(e,[i,n[i]].concat(r));else{if(!l.test(n))return!0;var s=n.split(l);for(var o=0,u=s.length;o<u;o++)e[t].apply(e,[s[o]].concat(r))}},h=function(e,t){var n,r=-1,i=e.length;switch(t.length){case 0:while(++r<i)(n=e[r]).callback.call(n.ctx);return;case 1:while(++r<i)(n=e[r]).callback.call(n.ctx,t[0]);return;case 2:while(++r<i)(n=e[r]).callback.call(n.ctx,t[0],t[1]);return;case 3:while(++r<i)(n=e[r]).callback.call(n.ctx,t[0],t[1],t[2]);return;default:while(++r<i)(n=e[r]).callback.apply(n.ctx,t)}},p=a.Events={on:function(e,t,n){if(!c(this,"on",e,[t,n])||!t)return this;this._events||(this._events={});var r=this._events[e]||(this._events[e]=[]);return r.push({callback:t,context:n,ctx:n||this}),this},once:function(e,t,n){if(!c(this,"once",e,[t,n])||!t)return this;var r=this,i=f.once(function(){r.off(e,i),t.apply(this,arguments)});return i._callback=t,this.on(e,i,n),this},off:function(e,t,n){var r,i,s,o,u,a,l,h;if(!this._events||!c(this,"off",e,[t,n]))return this;if(!e&&!t&&!n)return this._events={},this;o=e?[e]:f.keys(this._events);for(u=0,a=o.length;u<a;u++){e=o[u];if(r=this._events[e]){s=[];if(t||n)for(l=0,h=r.length;l<h;l++)i=r[l],(t&&t!==i.callback&&t!==i.callback._callback||n&&n!==i.context)&&s.push(i);this._events[e]=s}}return this},trigger:function(e){if(!this._events)return this;var t=o.call(arguments,1);if(!c(this,"trigger",e,t))return this;var n=this._events[e],r=this._events.all;return n&&h(n,t),r&&h(r,arguments),this},listenTo:function(e,t,n){var r=this._listeners||(this._listeners={}),i=e._listenerId||(e._listenerId=f.uniqueId("l"));return r[i]=e,e.on(t,typeof t=="object"?this:n,this),this},stopListening:function(e,t,n){var r=this._listeners;if(!r)return;if(e)e.off(t,typeof t=="object"?this:n,this),!t&&!n&&delete r[e._listenerId];else{typeof t=="object"&&(n=this);for(var i in r)r[i].off(t,n,this);this._listeners={}}return this}};p.bind=p.on,p.unbind=p.off,f.extend(a,p);var d=a.Model=function(e,t){var n,r=e||{};this.cid=f.uniqueId("c"),this.attributes={},t&&t.collection&&(this.collection=t.collection),t&&t.parse&&(r=this.parse(r,t)||{});if(n=f.result(this,"defaults"))r=f.defaults({},r,n);this.set(r,t),this.changed={},this.initialize.apply(this,arguments)};f.extend(d.prototype,p,{changed:null,idAttribute:"id",initialize:function(){},toJSON:function(e){return f.clone(this.attributes)},sync:function(){return a.sync.apply(this,arguments)},get:function(e){return this.attributes[e]},escape:function(e){return f.escape(this.get(e))},has:function(e){return this.get(e)!=null},set:function(e,t,n){var r,i,s,o,u,a,l,c;if(e==null)return this;typeof e=="object"?(i=e,n=t):(i={})[e]=t,n||(n={});if(!this._validate(i,n))return!1;s=n.unset,u=n.silent,o=[],a=this._changing,this._changing=!0,a||(this._previousAttributes=f.clone(this.attributes),this.changed={}),c=this.attributes,l=this._previousAttributes,this.idAttribute in i&&(this.id=i[this.idAttribute]);for(r in i)t=i[r],f.isEqual(c[r],t)||o.push(r),f.isEqual(l[r],t)?delete this.changed[r]:this.changed[r]=t,s?delete c[r]:c[r]=t;if(!u){o.length&&(this._pending=!0);for(var h=0,p=o.length;h<p;h++)this.trigger("change:"+o[h],this,c[o[h]],n)}if(a)return this;if(!u)while(this._pending)this._pending=!1,this.trigger("change",this,n);return this._pending=!1,this._changing=!1,this},unset:function(e,t){return this.set(e,void 0,f.extend({},t,{unset:!0}))},clear:function(e){var t={};for(var n in this.attributes)t[n]=void 0;return this.set(t,f.extend({},e,{unset:!0}))},hasChanged:function(e){return e==null?!f.isEmpty(this.changed):f.has(this.changed,e)},changedAttributes:function(e){if(!e)return this.hasChanged()?f.clone(this.changed):!1;var t,n=!1,r=this._changing?this._previousAttributes:this.attributes;for(var i in e){if(f.isEqual(r[i],t=e[i]))continue;(n||(n={}))[i]=t}return n},previous:function(e){return e==null||!this._previousAttributes?null:this._previousAttributes[e]},previousAttributes:function(){return f.clone(this._previousAttributes)},fetch:function(e){e=e?f.clone(e):{},e.parse===void 0&&(e.parse=!0);var t=e.success;return e.success=function(e,n,r){if(!e.set(e.parse(n,r),r))return!1;t&&t(e,n,r)},this.sync("read",this,e)},save:function(e,t,n){var r,i,s,o,u=this.attributes;return e==null||typeof e=="object"?(r=e,n=t):(r={})[e]=t,r&&(!n||!n.wait)&&!this.set(r,n)?!1:(n=f.extend({validate:!0},n),this._validate(r,n)?(r&&n.wait&&(this.attributes=f.extend({},u,r)),n.parse===void 0&&(n.parse=!0),i=n.success,n.success=function(e,t,n){e.attributes=u;var s=e.parse(t,n);n.wait&&(s=f.extend(r||{},s));if(f.isObject(s)&&!e.set(s,n))return!1;i&&i(e,t,n)},s=this.isNew()?"create":n.patch?"patch":"update",s==="patch"&&(n.attrs=r),o=this.sync(s,this,n),r&&n.wait&&(this.attributes=u),o):!1)},destroy:function(e){e=e?f.clone(e):{};var t=this,n=e.success,r=function(){t.trigger("destroy",t,t.collection,e)};e.success=function(e,t,i){(i.wait||e.isNew())&&r(),n&&n(e,t,i)};if(this.isNew())return e.success(this,null,e),!1;var i=this.sync("delete",this,e);return e.wait||r(),i},url:function(){var e=f.result(this,"urlRoot")||f.result(this.collection,"url")||D();return this.isNew()?e:e+(e.charAt(e.length-1)==="/"?"":"/")+encodeURIComponent(this.id)},parse:function(e,t){return e},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return this.id==null},isValid:function(e){return!this.validate||!this.validate(this.attributes,e)},_validate:function(e,t){if(!t.validate||!this.validate)return!0;e=f.extend({},this.attributes,e);var n=this.validationError=this.validate(e,t)||null;return n?(this.trigger("invalid",this,n,t||{}),!1):!0}});var v=a.Collection=function(e,t){t||(t={}),t.model&&(this.model=t.model),t.comparator!==void 0&&(this.comparator=t.comparator),this.models=[],this._reset(),this.initialize.apply(this,arguments),e&&this.reset(e,f.extend({silent:!0},t))};f.extend(v.prototype,p,{model:d,initialize:function(){},toJSON:function(e){return this.map(function(t){return t.toJSON(e)})},sync:function(){return a.sync.apply(this,arguments)},add:function(e,t){e=f.isArray(e)?e.slice():[e],t||(t={});var n,r,i,o,a,l,c,h,p,d;c=[],h=t.at,p=this.comparator&&h==null&&t.sort!=0,d=f.isString(this.comparator)?this.comparator:null;for(n=0,r=e.length;n<r;n++){if(!(i=this._prepareModel(o=e[n],t))){this.trigger("invalid",this,o,t);continue}if(a=this.get(i)){t.merge&&(a.set(o===i?i.attributes:o,t),p&&!l&&a.hasChanged(d)&&(l=!0));continue}c.push(i),i.on("all",this._onModelEvent,this),this._byId[i.cid]=i,i.id!=null&&(this._byId[i.id]=i)}c.length&&(p&&(l=!0),this.length+=c.length,h!=null?u.apply(this.models,[h,0].concat(c)):s.apply(this.models,c)),l&&this.sort({silent:!0});if(t.silent)return this;for(n=0,r=c.length;n<r;n++)(i=c[n]).trigger("add",i,this,t);return l&&this.trigger("sort",this,t),this},remove:function(e,t){e=f.isArray(e)?e.slice():[e],t||(t={});var n,r,i,s;for(n=0,r=e.length;n<r;n++){s=this.get(e[n]);if(!s)continue;delete this._byId[s.id],delete this._byId[s.cid],i=this.indexOf(s),this.models.splice(i,1),this.length--,t.silent||(t.index=i,s.trigger("remove",s,this,t)),this._removeReference(s)}return this},push:function(e,t){return e=this._prepareModel(e,t),this.add(e,f.extend({at:this.length},t)),e},pop:function(e){var t=this.at(this.length-1);return this.remove(t,e),t},unshift:function(e,t){return e=this._prepareModel(e,t),this.add(e,f.extend({at:0},t)),e},shift:function(e){var t=this.at(0);return this.remove(t,e),t},slice:function(e,t){return this.models.slice(e,t)},get:function(e){return e==null?void 0:(this._idAttr||(this._idAttr=this.model.prototype.idAttribute),this._byId[e.id||e.cid||e[this._idAttr]||e])},at:function(e){return this.models[e]},where:function(e){return f.isEmpty(e)?[]:this.filter(function(t){for(var n in e)if(e[n]!==t.get(n))return!1;return!0})},sort:function(e){if(!this.comparator)throw new Error("Cannot sort a set without a comparator");return e||(e={}),f.isString(this.comparator)||this.comparator.length===1?this.models=this.sortBy(this.comparator,this):this.models.sort(f.bind(this.comparator,this)),e.silent||this.trigger("sort",this,e),this},pluck:function(e){return f.invoke(this.models,"get",e)},update:function(e,t){t=f.extend({add:!0,merge:!0,remove:!0},t),t.parse&&(e=this.parse(e,t));var n,r,i,s,o=[],u=[],a={};f.isArray(e)||(e=e?[e]:[]);if(t.add&&!t.remove)return this.add(e,t);for(r=0,i=e.length;r<i;r++)n=e[r],s=this.get(n),t.remove&&s&&(a[s.cid]=!0),(t.add&&!s||t.merge&&s)&&o.push(n);if(t.remove)for(r=0,i=this.models.length;r<i;r++)n=this.models[r],a[n.cid]||u.push(n);return u.length&&this.remove(u,t),o.length&&this.add(o,t),this},reset:function(e,t){t||(t={}),t.parse&&(e=this.parse(e,t));for(var n=0,r=this.models.length;n<r;n++)this._removeReference(this.models[n]);return t.previousModels=this.models.slice(),this._reset(),e&&this.add(e,f.extend({silent:!0},t)),t.silent||this.trigger("reset",this,t),this},fetch:function(e){e=e?f.clone(e):{},e.parse===void 0&&(e.parse=!0);var t=e.success;return e.success=function(e,n,r){var i=r.update?"update":"reset";e[i](n,r),t&&t(e,n,r)},this.sync("read",this,e)},create:function(e,t){t=t?f.clone(t):{};if(!(e=this._prepareModel(e,t)))return!1;t.wait||this.add(e,t);var n=this,r=t.success;return t.success=function(e,t,i){i.wait&&n.add(e,i),r&&r(e,t,i)},e.save(null,t),e},parse:function(e,t){return e},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0,this.models.length=0,this._byId={}},_prepareModel:function(e,t){if(e instanceof d)return e.collection||(e.collection=this),e;t||(t={}),t.collection=this;var n=new this.model(e,t);return n._validate(e,t)?n:!1},_removeReference:function(e){this===e.collection&&delete e.collection,e.off("all",this._onModelEvent,this)},_onModelEvent:function(e,t,n,r){if((e==="add"||e==="remove")&&n!==this)return;e==="destroy"&&this.remove(t,r),t&&e==="change:"+t.idAttribute&&(delete this._byId[t.previous(t.idAttribute)],t.id!=null&&(this._byId[t.id]=t)),this.trigger.apply(this,arguments)},sortedIndex:function(e,t,n){t||(t=this.comparator);var r=f.isFunction(t)?t:function(e){return e.get(t)};return f.sortedIndex(this.models,e,r,n)}});var m=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","indexOf","shuffle","lastIndexOf","isEmpty","chain"];f.each(m,function(e){v.prototype[e]=function(){var t=o.call(arguments);return t.unshift(this.models),f[e].apply(f,t)}});var g=["groupBy","countBy","sortBy"];f.each(g,function(e){v.prototype[e]=function(t,n){var r=f.isFunction(t)?t:function(e){return e.get(t)};return f[e](this.models,r,n)}});var y=a.Router=function(e){e||(e={}),e.routes&&(this.routes=e.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},b=/\((.*?)\)/g,w=/(\(\?)?:\w+/g,E=/\*\w+/g,S=/[\-{}\[\]+?.,\\\^$|#\s]/g;f.extend(y.prototype,p,{initialize:function(){},route:function(e,t,n){return f.isRegExp(e)||(e=this._routeToRegExp(e)),n||(n=this[t]),a.history.route(e,f.bind(function(r){var i=this._extractParameters(e,r);n&&n.apply(this,i),this.trigger.apply(this,["route:"+t].concat(i)),this.trigger("route",t,i),a.history.trigger("route",this,t,i)},this)),this},navigate:function(e,t){return a.history.navigate(e,t),this},_bindRoutes:function(){if(!this.routes)return;var e,t=f.keys(this.routes);while((e=t.pop())!=null)this.route(e,this.routes[e])},_routeToRegExp:function(e){return e=e.replace(S,"\\$&").replace(b,"(?:$1)?").replace(w,function(e,t){return t?e:"([^/]+)"}).replace(E,"(.*?)"),new RegExp("^"+e+"$")},_extractParameters:function(e,t){return e.exec(t).slice(1)}});var x=a.History=function(){this.handlers=[],f.bindAll(this,"checkUrl"),typeof window!="undefined"&&(this.location=window.location,this.history=window.history)},T=/^[#\/]|\s+$/g,N=/^\/+|\/+$/g,C=/msie [\w.]+/,k=/\/$/;x.started=!1,f.extend(x.prototype,p,{interval:50,getHash:function(e){var t=(e||this).location.href.match(/#(.*)$/);return t?t[1]:""},getFragment:function(e,t){if(e==null)if(this._hasPushState||!this._wantsHashChange||t){e=this.location.pathname;var n=this.root.replace(k,"");e.indexOf(n)||(e=e.substr(n.length))}else e=this.getHash();return e.replace(T,"")},start:function(e){if(x.started)throw new Error("Backbone.history has already been started");x.started=!0,this.options=f.extend({},{root:"/"},this.options,e),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._wantsPushState=!!this.options.pushState,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var t=this.getFragment(),n=document.documentMode,r=C.exec(navigator.userAgent.toLowerCase())&&(!n||n<=7);this.root=("/"+this.root+"/").replace(N,"/"),r&&this._wantsHashChange&&(this.iframe=a.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow,this.navigate(t)),this._hasPushState?a.$(window).on("popstate",this.checkUrl):this._wantsHashChange&&"onhashchange"in window&&!r?a.$(window).on("hashchange",this.checkUrl):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.fragment=t;var i=this.location,s=i.pathname.replace(/[^\/]$/,"$&/")===this.root;if(this._wantsHashChange&&this._wantsPushState&&!this._hasPushState&&!s)return this.fragment=this.getFragment(null,!0),this.location.replace(this.root+this.location.search+"#"+this.fragment),!0;this._wantsPushState&&this._hasPushState&&s&&i.hash&&(this.fragment=this.getHash().replace(T,""),this.history.replaceState({},document.title,this.root+this.fragment+i.search));if(!this.options.silent)return this.loadUrl()},stop:function(){a.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl),clearInterval(this._checkUrlInterval),x.started=!1},route:function(e,t){this.handlers.unshift({route:e,callback:t})},checkUrl:function(e){var t=this.getFragment();t===this.fragment&&this.iframe&&(t=this.getFragment(this.getHash(this.iframe)));if(t===this.fragment)return!1;this.iframe&&this.navigate(t),this.loadUrl()||this.loadUrl(this.getHash())},loadUrl:function(e){var t=this.fragment=this.getFragment(e),n=f.any(this.handlers,function(e){if(e.route.test(t))return e.callback(t),!0});return n},navigate:function(e,t){if(!x.started)return!1;if(!t||t===!0)t={trigger:t};e=this.getFragment(e||"");if(this.fragment===e)return;this.fragment=e;var n=this.root+e;if(this._hasPushState)this.history[t.replace?"replaceState":"pushState"]({},document.title,n);else{if(!this._wantsHashChange)return this.location.assign(n);this._updateHash(this.location,e,t.replace),this.iframe&&e!==this.getFragment(this.getHash(this.iframe))&&(t.replace||this.iframe.document.open().close(),this._updateHash(this.iframe.location,e,t.replace))}t.trigger&&this.loadUrl(e)},_updateHash:function(e,t,n){if(n){var r=e.href.replace(/(javascript:|#).*$/,"");e.replace(r+"#"+t)}else e.hash="#"+t}}),a.history=new x;var L=a.View=function(e){this.cid=f.uniqueId("view"),this._configure(e||{}),this._ensureElement(),this.initialize.apply(this,arguments),this.delegateEvents()},A=/^(\S+)\s*(.*)$/,O=["model","collection","el","id","attributes","className","tagName","events"];f.extend(L.prototype,p,{tagName:"div",$:function(e){return this.$el.find(e)},initialize:function(){},render:function(){return this},remove:function(){return this.$el.remove(),this.stopListening(),this},setElement:function(e,t){return this.$el&&this.undelegateEvents(),this.$el=e instanceof a.$?e:a.$(e),this.el=this.$el[0],t!==!1&&this.delegateEvents(),this},delegateEvents:function(e){if(!e&&!(e=f.result(this,"events")))return;this.undelegateEvents();for(var t in e){var n=e[t];f.isFunction(n)||(n=this[e[t]]);if(!n)throw new Error('Method "'+e[t]+'" does not exist');var r=t.match(A),i=r[1],s=r[2];n=f.bind(n,this),i+=".delegateEvents"+this.cid,s===""?this.$el.on(i,n):this.$el.on(i,s,n)}},undelegateEvents:function(){this.$el.off(".delegateEvents"+this.cid)},_configure:function(e){this.options&&(e=f.extend({},f.result(this,"options"),e)),f.extend(this,f.pick(e,O)),this.options=e},_ensureElement:function(){if(!this.el){var e=f.extend({},f.result(this,"attributes"));this.id&&(e.id=f.result(this,"id")),this.className&&(e["class"]=f.result(this,"className"));var t=a.$("<"+f.result(this,"tagName")+">").attr(e);this.setElement(t,!1)}else this.setElement(f.result(this,"el"),!1)}});var M={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};a.sync=function(e,t,n){var r=M[e];f.defaults(n||(n={}),{emulateHTTP:a.emulateHTTP,emulateJSON:a.emulateJSON});var i={type:r,dataType:"json"};n.url||(i.url=f.result(t,"url")||D()),n.data==null&&t&&(e==="create"||e==="update"||e==="patch")&&(i.contentType="application/json",i.data=JSON.stringify(n.attrs||t.toJSON(n))),n.emulateJSON&&(i.contentType="application/x-www-form-urlencoded",i.data=i.data?{model:i.data}:{});if(n.emulateHTTP&&(r==="PUT"||r==="DELETE"||r==="PATCH")){i.type="POST",n.emulateJSON&&(i.data._method=r);var s=n.beforeSend;n.beforeSend=function(e){e.setRequestHeader("X-HTTP-Method-Override",r);if(s)return s.apply(this,arguments)}}i.type!=="GET"&&!n.emulateJSON&&(i.processData=!1);var o=n.success;n.success=function(e){o&&o(t,e,n),t.trigger("sync",t,e,n)};var u=n.error;n.error=function(e){u&&u(t,e,n),t.trigger("error",t,e,n)};var l=n.xhr=a.ajax(f.extend(i,n));return t.trigger("request",t,l,n),l},a.ajax=function(){return a.$.ajax.apply(a.$,arguments)};var _=function(e,t){var n=this,r;e&&f.has(e,"constructor")?r=e.constructor:r=function(){return n.apply(this,arguments)},f.extend(r,n,t);var i=function(){this.constructor=r};return i.prototype=n.prototype,r.prototype=new i,e&&f.extend(r.prototype,e),r.__super__=n.prototype,r};d.extend=v.extend=y.extend=L.extend=x.extend=_;var D=function(){throw new Error('A "url" property or function must be specified')}}).call(this)}),e.define("/src/js/util/constants.js",function(e,t,n,r,i,s,o){var u={betweenCommandsDelay:400},a={isAnimating:!1},f={minZoom:.55,maxZoom:1.25,minWidth:600,minHeight:600},l={arrowHeadSize:8,nodeRadius:17,curveControlPointOffset:50,defaultEasing:"easeInOut",defaultAnimationTime:400,rectFill:"hsb(0.8816909813322127,0.7,1)",headRectFill:"#2831FF",rectStroke:"#FFF",rectStrokeWidth:"3",originDash:"- ",multiBranchY:20,upstreamHeadOpacity:.5,upstreamNoneOpacity:.2,edgeUpstreamHeadOpacity:.4,edgeUpstreamNoneOpacity:.15,visBranchStrokeWidth:2,visBranchStrokeColorNone:"#333",defaultNodeFill:"hsba(0.5,0.8,0.7,1)",defaultNodeStrokeWidth:2,defaultNodeStroke:"#FFF",orphanNodeFill:"hsb(0.5,0.8,0.7)"};n.GLOBAL=a,n.TIME=u,n.GRAPHICS=l,n.VIEWPORT=f}),e.define("/src/js/util/index.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../util/constants");n.parseQueryString=function(e){var t={};return e.replace(new RegExp("([^?=&]+)(=([^&]*))?","g"),function(e,n,r,i){t[n]=i}),t},n.isBrowser=function(){var e=String(typeof window)!=="undefined";return e},n.splitTextCommand=function(e,t,n){t=u.bind(t,n),u.each(e.split(";"),function(e,n){e=u.escape(e),e=e.replace(/^(\s+)/,"").replace(/(\s+)$/,"").replace(/&quot;/g,'"').replace(/&#x27;/g,"'");if(n>0&&!e.length)return;t(e)})},n.genParseCommand=function(e,t){return function(n){var r,i;return u.each(e,function(e,t){var s=e.exec(n);s&&(r=t,i=s)}),r?{toSet:{eventName:t,method:r,regexResults:i}}:!1}}}),e.define("/src/js/intl/index.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../util/constants"),f=e("../util"),l=e("../intl/strings").strings,c=n.getDefaultLocale=function(){return"zh_CN"},h=n.getLocale=function(){return a.GLOBAL.locale?a.GLOBAL.locale:c()},p=u.clone(u.templateSettings);p.interpolate=/\{(.+?)\}/g;var d=n.template=function(e,t){return u.template(e,t,p)},v=n.str=function(e,t){t=t||{};var n=h();return l[e]?l[e][n]?d(l[e][n],t):e!=="error-untranslated"?v("error-untranslated"):'No translation for the key "'+e+'"':(console.warn("NO INTL support for key "+e),"NO INTL support for key "+e)},m=n.getIntlKey=function(e,t){if(!e||!e[t])throw new Error("that key "+t+"doesnt exist in this blob"+e);return e[t][c()]||console.warn("WARNING!! This blob does not have intl support:",e,"for this key",t),e[t][h()]},g=n.getDialog=function(e){var t=c();return m(e,"dialog")||e.dialog[t]},y=n.getHint=function(e){return m(e,"hint")||v("error-untranslated")},b=n.getName=function(e){return m(e,"name")||v("error-untranslated")},w=n.getStartDialog=function(e){var t=m(e,"startDialog");if(t)return t;var n={type:"ModalAlert",options:{markdown:v("error-untranslated")}},r=u.clone(e.startDialog[c()]||e.startDialog);return r.childViews.unshift(n),r}}),e.define("/src/js/intl/strings.js",function(e,t,n,r,i,s,o){n.strings={"finish-dialog-finished":{__desc__:"One of the lines in the next level dialog",ja:"最後のレベルをクリアしました！すごい！！",en_US:"Wow! You finished the last level, great!",zh_CN:"我的天呀！你完成了最后一关，太帅了！",fr_FR:"Félicitations, vous avez réussi le dernier niveau !"},"finish-dialog-next":{__desc__:"One of the lines in the next level dialog",en_US:'Would you like to move on to *"{nextLevel}"*, the next level?',ja:'次の章 *"{nextLevel}"* へ進みますか？',zh_CN:'要不前进到下一关 *"{nextLevel}"* ？',fr_FR:'Voulez-vous passer à *"{nextLevel}"*, le prochain niveau ?'},"finish-dialog-win":{__desc__:"One of the lines in the next level dialog",en_US:"Awesome! You matched or exceeded our solution.",ja:"素晴らしい！このレベルをクリアしましたね。",zh_CN:"我的天呀！你竞然答对了！",fr_FR:"Fabuleux ! Votre solution a égalé ou surpassé notre solution."},"finish-dialog-lose":{__desc__:"When the user entered more commands than our best, encourage them to do better",en_US:"See if you can whittle it down to {best} :D",ja:"模範解答の回数={best}回でクリアする方法も考えてみましょう :D",zh_CN:"试试看你能否在 {best} 之内搞定 :D",fr_FR:"Voyons si vous pouvez descendre à {best} :D"},"hg-prune-tree":{__desc__:"warning when pruning tree",en_US:"Warning! Mercurial does aggressive garbage collection and thus needs to prune your tree"},"hg-a-option":{__desc__:"warning for when using -A option",en_US:"The -A option is not needed for this app, just commit away!"},"hg-error-no-status":{__desc__:"One of the errors for hg",en_US:"There is no status command for this app, since there is no staging of files. Try hg summary instead"},"hg-error-need-option":{__desc__:"One of the errors for hg",en_US:"I need the option {option} for that command!"},"hg-error-log-no-follow":{__desc__:"hg log without -f (--follow)",en_US:"hg log without -f is currently not supported, use -f"},"git-status-detached":{__desc__:"One of the lines for git status output",en_US:"Detached head!",zh_CN:"脑袋搬家（Detached head）了！",fr_FR:"head détaché !"},"git-status-onbranch":{__desc__:"One of the lines for git status output",en_US:"On branch {branch}",zh_CN:"切换到分支 {branch}",fr_FR:"Sur la branche {branch}"},"git-status-readytocommit":{__desc__:"One of the lines for git status output",en_US:"Ready to commit! (as always in this demo)",zh_CN:"可以提交啦！（这演示里一直可以提交）",fr_FR:"Prêt à commit ! (comme toujours dans cette démo)"},"git-dummy-msg":{__desc__:"The dummy commit message for all commits. Feel free to put in a shoutout to your school / city / whatever!",en_US:"Quick commit. Go Bears!",zh_CN:"快速提交。上啊！",fr_FR:"Commit rapide. NoMaN Sux!"},"git-error-origin-fetch-uptodate":{__desc__:"One of the error messages for git",en_US:"Already up to date!",fr_FR:"Déjà à jour"},"git-error-origin-fetch-no-ff":{__desc__:"One of the error messages for git",en_US:"Your origin branch is out of sync with the remote branch and fetch cannot be performed. try using --force",fr_FR:"Votre branche origin n'est plus synchronisée avec la branche distante et fetch ne peut pas être appliqué. Essayez avec l'option --force"},"git-error-origin-push-no-ff":{__desc__:"One of the error messages for git",en_US:"The remote repository has diverged from your local repository, so uploading your changes is not a simple fast forward (and thus your push was rejected). Please pull down the new changes in the remote repository, incorporate them into this branch, and try again. You can do so with git pull or git pull --rebase",fr_FR:"Le dépôt distant a divergé de votre référentiel local, donc l'envoi de vos modifications n'est pas en simple avance rapide (et donc votre envoi a été rejeté). Veuillez récupérer les nouveaux changements depuis le dépôt distant, les intégrer dans cette branche, et essayez à nouveau. Vous pouvez le faire avec git pull ou git pull --rebase"},"git-error-remote-branch":{__desc__:"One of the error messages for git",en_US:"You cannot execute that command on a remote branch",fr_FR:"Vous ne pouvez exécuter cette commande sur une branche distante"},"git-error-origin-required":{__desc__:"One of the error messages for git",en_US:"An origin is required for that command",fr_FR:"Une origine est requise pour cette commande"},"git-error-origin-exists":{__desc__:"One of the error messages for git",en_US:"An origin already exists! You cannot make a new one",fr_FR:"Une origine existe déjà ! Vous ne pouvez pas en créer une nouvelle"},"git-error-branch":{__desc__:"One of the error messages for git",en_US:"You can't delete the master branch, the branch you are on, or things that aren't branches",zh_CN:"你不能删除主分支（master），或者你当前所在的分支，或者其他不是分支也不知道能不能吃的东西。",fr_FR:"Vous ne pouvez supprimer la branche master, la branche sur laquelle vous êtes, ou ce qui n'est pas une branche"},"git-merge-msg":{__desc__:"The commit message for a merge commit",en_US:"Merge {target} into {current}",zh_CN:"合并 {target} 到 {current}",fr_FR:"Merge de {target} dans {current}"},"git-error-rebase-none":{__desc__:"One of the error messages for git",en_US:"No commits to rebase! Everything is a merge commit or changes already applied",zh_CN:"没有需要 rebase 的提交！都是个合并提交，或者已经 rebase 过了。",fr_FR:"Aucune commit à rebaser ! Tout est soit un commit de merge, soit des modifications déjà appliquées"},"git-result-nothing":{__desc__:"The message that explains the result of a git command",en_US:"Nothing to do...",zh_CN:"没啥鸟事了……",fr_FR:"Rien à effectuer…"},"git-result-fastforward":{__desc__:"The message that explains the result of a git command",en_US:"Fast forwarding...",zh_CN:"快速前进……",fr_FR:"En avance rapide…"},"git-result-uptodate":{__desc__:"The message that explains the result of a git command",en_US:"Branch already up-to-date",zh_CN:"分支已经是最新啦",fr_FR:"Branche déjà à jour"},"git-error-exist":{__desc__:"One of the error messages for git",en_US:"The ref {ref} does not exist or is unknown",zh_CN:"索引 {ref} 不存在，或者找不到。",fr_FR:"La référence {ref} n'existe pas ou est inconnue"},"git-error-relative-ref":{__desc__:"One of the error messages for git",en_US:"Commit {commit} doesnot have a {match}",zh_CN:"提交 {commit} 并没有 {match}",fr_FR:"Le commit {commit} n'a pas de correspondance {match}"},"git-warning-detached":{__desc__:"One of the warning messages for git",en_US:"Warning!! Detached HEAD state",zh_CN:"警告！脑袋搬家（Detached HEAD）状态",fr_FR:"Attention ! HEAD est détaché"},"git-warning-add":{__desc__:"One of the warning messages for git",en_US:"No need to add files in this demo",zh_CN:"此演示中不需要添加文件",fr_FR:"Aucun besoin d'ajouter des fichiers dans cette démo"},"git-error-options":{__desc__:"One of the error messages for git",en_US:"Those options you specified are incompatible or incorrect",zh_CN:"你所指定的参数不兼容或者不准确",fr_FR:"Les options que vous avez spécifiées sont incompatibles ou incorrectes"},"git-error-already-exists":{__desc__:"One of the error messages for git",en_US:"The commit {commit} already exists in your changes set, aborting!",zh_CN:"提交 {commit} 已经存在于你的改动集里，正在中止！",fr_FR:"Le commit {commit} existe déjà dans votre ensemble de modifications, opération avortée !"},"git-error-reset-detached":{__desc__:"One of the error messages for git",en_US:"Can't reset in detached head! Use checkout if you want to move",zh_CN:"不能在分离的 HEAD 里重置！用 checkout 吧",fr_FR:"On ne peut pas effectuer un reset quand head est détaché. Utilisez checkout pour déplacer"},"git-warning-hard":{__desc__:"One of the warning messages for git",en_US:"The default behavior is a --hard reset, feel free to omit that option!",zh_CN:"默认的行为是 --hard 硬重置，尽管省略掉那个选项吧！",fr_FR:"Le comportement par défaut est un --hard reset, soyez libre d'omettre cette option !"},"git-error-staging":{__desc__:"One of the error messages for git",en_US:"There is no concept of adding / staging files, so that option or command is invalid!",zh_CN:"没有添加、缓存文件的必要，所以改选项或者命令是不合法的。",fr_FR:"Il n'y a pas le concept d'ajouter / mettre en staging, donc cette option ou commande est invalide"},"git-revert-msg":{__desc__:"Message for reverting git command",en_US:"Reverting {oldCommit}: {oldMsg}",zh_CN:"撤销 {oldCommit}：{oldMsg}",fr_FR:"Revert {oldCommit}: {oldMsg}"},"git-error-args-many":{__desc__:"One of the error messages for git",en_US:"I expect at most {upper} argument(s) for {what}",zh_CN:"{what} 期望最多 {upper} 个参数",fr_FR:"J'attends au plus {upper} argument(s) pour {what}"},"git-error-args-few":{__desc__:"One of the error messages for git",en_US:"I expect at least {lower} argument(s) for {what}",zh_CN:"{what} 期望最少 {lower} 个参数",fr_FR:"J'attends au moins {upper} argument(s) pour {what}"},"git-error-no-general-args":{__desc__:"One of the error messages for git",en_US:"That command accepts no general arguments",zh_CN:"该命令不接收参数",fr_FR:"Cette commande n'accepte aucun argument général"},"copy-tree-string":{__desc__:"The prompt to copy the tree when sharing",en_US:"Copy the tree string below",zh_CN:"拷贝下面的树字符串",fr_FR:"Copiez la chaîne d'arbre ci-dessous"},"learn-git-branching":{__desc__:"The title of the app, with spaces",en_US:"Learn Git Branching",ja:"日本語版リポジトリ",ko:"Git 브랜치 배우기",zh_CN:"Git Branch课程分享 - 同程",fr_FR:"Apprenez Git Branching"},"select-a-level":{__desc__:"The prompt to select a level on the drop down view",en_US:"Select a level",zh_CN:"选择一关",fr_FR:"Choisissez un niveau"},"branch-name-short":{__desc__:"When branch names get too long, we need to truncate them. This is the warning for that",en_US:'Sorry, we need to keep branch names short for the visuals. Your branch name was truncated to 9 characters, resulting in "{branch}"',zh_CN:'抱歉，为了显示的需要，我们需要一个短些的分支名称。您使用的将被截断到9个字符，即"{branch}"',fr_FR:'Désolé, nous devons garder les noms de branches courts pour la visualisation. Votre nom de branche a été tronqué à 9 caractères, devenant "{branch}"'},"bad-branch-name":{__desc__:"When the user enters a branch name thats not ok",en_US:'That branch name "{branch}" is not allowed!',zh_CN:'不能给分支起这个名字 "{branch}"',fr_FR:'Ce nom de branche "{branch}" n\'est pas autorisé'},"option-not-supported":{__desc__:"When the user specifies an option that is not supported by our demo",en_US:'The option "{option}" is not supported!',zh_CN:'不支持选项 "{option}"',fr_FR:"L'option \"{option}\" n'est pas supportée"},"git-usage-command":{__desc__:"The line that shows how to format a git command",en_US:"git <command> [<args>]",zh_CN:"git <命令> [<参数>]",fr_FR:"git <commande> [<arguments>]"},"git-supported-commands":{__desc__:"In the git help command, the header above the supported commands",en_US:"Supported commands:",zh_CN:"支持的命令有:",fr_FR:"Commandes supportées"},"git-usage":{__desc__:"In the dummy git output, the header before showing all the commands",en_US:"Usage:",zh_CN:"使用:",fr_FR:"Utilisation :"},"git-version":{__desc__:"The git version dummy output, kind of silly. PCOTTLE is my unix name but feel free to put yours instead",en_US:"Git Version PCOTTLE.1.0",zh_CN:"Git 版本 PCOTTLE.1.0",fr_FR:"Git version PCOTTLE.1.0"},"refresh-tree-command":{__desc__:"when the tree is visually refreshed",en_US:"Refreshing tree...",zh_CN:"正在刷新树结构...",fr_FR:"Actualisation de l'arbre…"},"locale-command":{__desc__:"when the locale is set to something",en_US:"Locale set to {locale}",zh_CN:"语言更改为 {locale}",fr_FR:"Langue changée à {locale}"},"locale-reset-command":{__desc__:"when the locale is reset",en_US:"Locale reset to default, which is {locale}",zh_CN:"语言重置为默认的 {locale}",fr_FR:"Langue remise par défaut, qui est {locale}"},"show-command":{__desc__:'command output title from "show"',en_US:"Please use one of the following commands for more info:",fr_FR:"Merci d'utiliser une des commandes suivantes pour obtenir plus d'info"},"show-all-commands":{__desc__:'command output title from "show commands"',en_US:"Here is a list of all the commmands available:",fr_FR:"Ci-dessous est la liste de toutes les commandes disponibles :"},"cd-command":{__desc__:"dummy command output for the command in the key",en_US:'Directory changed to "/directories/dont/matter/in/this/demo"',zh_CN:'目录切换到 "/directories/dont/matter/in/this/demo"',fr_FR:'Répertoire changé à "/directories/dont/matter/in/this/demo" (les répertoires ne servent à rien dans cette démo)'},"ls-command":{__desc__:"Dummy command output for the command in the key",en_US:"DontWorryAboutFilesInThisDemo.txt",zh_CN:"DontWorryAboutFilesInThisDemo.txt (译: 在试验里不用担心文件.txt)",fr_FR:"DontWorryAboutFilesInThisDemo.txt (ne vous préoccupez pas des noms de fichier dans cette démo)"},"mobile-alert":{__desc__:"When someone comes to the site on a mobile device, they can not input commands so this is a nasty alert to tell them",en_US:"Can't bring up the keyboard on mobile / tablet :( try visiting on desktop! :D",zh_CN:"无法在移动设备/平板上调出键盘 :( 请试试桌面版 :D",fr_FR:"Impossible de faire apparaître le clavier sur mobile / tablette :( Essayez de passer sur un ordinateur de bureau :D"},"share-tree":{__desc__:"When you export a tree, we want you to share the tree with friends",en_US:'Share this tree with friends! They can load it with "import tree"',zh_CN:'与你的好友分享提交树！他们可以用 "import tree" 加载它',fr_FR:'Partagez cet arbre avec vos amis ! Ils peuvent le charger avec "import tree"'},"paste-json":{__desc__:"When you are importing a level or tree",en_US:"Paste a JSON blob below!",zh_CN:"在下边粘贴一个JSON串",fr_FR:"Collez un blob JSON ci-dessous !"},"solved-map-reset":{__desc__:"When you reset the solved map to clear your solved history, in case someone else wants to use your browser",en_US:"Solved map was reset, you are starting from a clean slate!",zh_CN:"解决列表已重置，您现在从零开始了",fr_FR:"La carte des niveaux résolus a été effacée, vous repartez de zéro !"},"level-cant-exit":{__desc__:"When the user tries to exit a level when they are not in one",en_US:'You are not in a level! You are in a sandbox, start a level with "levels"',zh_CN:'您没在关卡中！您在沙盒中，要开始关卡请输入 "levels"',fr_FR:'Vous n\'êtes pas dans un niveau ! Vous êtes dans le mode bac à sable, commencez un niveau avec "levels"'},"level-no-id":{__desc__:"When you say an id but that level doesnt exist",en_US:'A level for that id "{id}" was not found! Opening up a level selection view',zh_CN:'没找到id为 "{id}" 的关卡！打开关卡选择框',fr_FR:"Le niveau dont l'identifiant est {id} n'a pas été trouvé ! Ouverture de la vue de sélection des niveaux"},"undo-stack-empty":{__desc__:"The undo command can only undo back until the last time the level was reset or the beginning of the level",en_US:"The undo stack is empty!",zh_CN:"还没有什么可以撤销",fr_FR:"La pile d'annulation est vide !"},"already-solved":{__desc__:"When you play in a level that is already solved",en_US:'You have already solved this level, try other levels with "levels" or go back to sandbox with "sandbox"',zh_CN:'你已经解决了本关，输入 "levels" 尝试其他关卡，或者输入 "sandbox" 回到沙盒中',fr_FR:'Vous avez déjà résolu ce niveau, essayez d\'autres niveaux avec "levels" ou revenez au bac à sable avec "sandbox"'},"command-disabled":{__desc__:"When you try a command that is disabled",en_US:"That git command is disabled for this level!",zh_CN:"该命令在本关不允许使用！",fr_FR:"Cette commande git est désactivée pour ce niveau !"},"share-json":{__desc__:"when you have made the level, prompt to share this",en_US:"Here is the JSON for this level! Share it with somenoe or send it to me on Github",zh_CN:"这是一个关卡定义JSON！您可以分享它或者发到我的GitHub上",fr_FR:"Voici le JSON pour ce niveau ! Partagez-le avec quelqu'un ou envoyez-le moi sur Github"},"want-start-dialog":{__desc__:"prompt to add a start dialog",en_US:"You have not specified a start dialog, would you like to add one?",zh_CN:"您还没有定义一开始的介绍，是否添加一个？",fr_FR:"Vous n'avez pas spécifié de dialogue de départ, voulez-vous en ajouter un ?"},"want-hint":{__desc__:"prompt to add a hint",en_US:"You have not specified a hint, would you like to add one?",zh_CN:"您还没有定义提示，是否添加一个？",fr_FR:"Vous n'avez pas spécifié d'indice, voulez-vous en ajouter un ?"},"prompt-hint":{__desc__:"prompt for hint",en_US:"Enter the hint for this level, or leave this blank if you do not want to include one",zh_CN:"请输入关卡提示，或者故意留空",fr_FR:"Entrez l'indice pour ce niveau, ou laissez-le vide pour ne pas l'inclure"},"prompt-name":{__desc__:"prompt for level name",en_US:"Enter the name for the level",zh_CN:"输入关卡名",fr_FR:"Entrez le nom pour ce niveau"},"solution-empty":{__desc__:"If you define a solution without any commands, aka a level that is solved without doing anything",en_US:"Your solution is empty!! Something is amiss",zh_CN:"你的解法是空的!! 这应该是出错了",fr_FR:"Votre solution est vide !! Quelque chose ne tourne pas rond"},"define-start-warning":{__desc__:"When you define the start point again, it overwrites the solution and goal so we add a warning",en_US:"Defining start point... solution and goal will be overwritten if they were defined earlier",zh_CN:"定义开始点... 解决方法和目标会被新的替代",fr_FR:"Redéfinition du point de départ… la solution et la cible seront écrasés s'ils ont déjà été définis"},"help-vague-level":{__desc__:"When you are in a level and you say help, its vague and you need to specify",en_US:'You are in a level, so multiple forms of help are available. Please select either "help level" to learn more about this lesson, "help general" for using Learn GitBranching, or "objective" to learn about how to solve the level.',zh_CN:'您正在关卡中，这里有多种形式的帮助，请选择 "help level" (关卡帮助)或 "help general" (一般帮助)',fr_FR:'Vous êtes dans un niveau, donc plusieurs formes d\'aide sont disponibles. Merci de sélectionner soit "help level" pour en apprendre plus sur cette leçon, "help general" pour l\'utilisation de Learn GitBranching, ou "objective" pour apprendre comment résoudre le niveau'},"help-vague-builder":{__desc__:"When you are in a level builder, the help command is vague so you need to specify what you mean",en_US:'You are in a level builder, so multiple forms of help are available. Please select either "help general" or "help builder"',zh_CN:'您正在进行关卡构建中，这里有多种形式的帮助，请选择 "help general" (一般帮助)或 "help builder" (关卡构建帮助)',fr_FR:'Vous êtes dans l\'éditeur de niveaux, donc plusieurs formes d\'aide sont disponibles. Merci de sélectionner soit "help general" soit "help builder"'},"goal-to-reach":{__desc__:"title of window that shoes the goal tree to reach",en_US:"Goal To Reach",zh_CN:"目标",fr_FR:"Cible à atteindre"},"goal-only-master":{__desc__:"the helper message for the window that shows the goal tree when the goal will only be compared using the master branch",en_US:'<span class="fwber">Note:</span> Only the master branch will be checked in this level. The other branches are simply for reference (shown as dashed labels below). As always, you can hide this dialog with "hide goal"',zh_CN:'<span class="fwber">注意:</span> 本关卡，在master分支上操作的. 其他分支只是作为简单引用。 如果想关闭目标面板，输入"hide goal"'},"hide-goal":{__desc__:"the helper message for the window that shows the goal tree",en_US:'You can hide this window with "hide goal"',zh_CN:'你可以通过命令 "hide goal" 关闭这个窗口',fr_FR:'Vous pouvez masquer cette fenêtre avec "hide goal"'},"hide-start":{__desc__:"The helper message for the window that shows the start tree for a level",en_US:'You can hide this window with "hide start"',zh_CN:'你可以通过命令 "hide start" 关闭这个窗口',fr_FR:'Vous pouvez masquer cette fenêtre avec "hide start"'},"level-builder":{__desc__:"The name for the environment where you build levels",en_US:"Level Builder",zh_CN:"关卡生成器",fr_FR:"Éditeur de niveaux"},"no-start-dialog":{__desc__:"when the user tries to open a start dialog for a level that does not have one",en_US:"There is no start dialog to show for this level!",zh_CN:"介绍? 这关真没有!",fr_FR:"Il n'y a aucun dialogue de départ à afficher pour ce niveau !"},"no-hint":{__desc__:"when no hint is available for a level",en_US:"Hmm, there doesn't seem to be a hint for this level :-/",zh_CN:"提示？嗯，这关真没有哎~ :-/",fr_FR:"Hum, il ne semble pas y avoir d'indice pour ce niveau :-/"},"error-untranslated-key":{__desc__:"This error happens when we are trying to translate a specific key and the locale version is mission",en_US:"The translation for {key} does not exist yet :( Please hop on github and offer up a translation!",zh_CN:"还没翻译 {key} :( 请在gitHub上贡献你的翻译!",fr_FR:"La traduction pour {key} n'existe pas encore :( Venez sur Github pour en offrir une !"},"error-untranslated":{__desc__:"The general error when we encounter a dialog that is not translated",en_US:"This dialog or text is not yet translated in your locale :( Hop on github to aid in translation!",zh_CN:"这段对话还没有被翻译成你的语言 :( 欢迎在gitHub上贡献你的翻译!",fr_FR:"Ce message n'a pas encore été traduit dans votre langue :( Venez sur Github aider à la traduction !"}}}),e.define("/src/js/sandbox/index.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?window.Backbone:e("backbone"),l=e("../util"),c=e("../intl"),h=e("../app"),p=e("../util/errors"),d=e("../visuals/visualization").Visualization,v=e("../level/parseWaterfall").ParseWaterfall,m=e("../level/disabledMap").DisabledMap,g=e("../models/commandModel").Command,y=e("../git/gitShim").GitShim,b=e("../views"),w=b.ModalTerminal,E=b.ModalAlert,S=e("../views/builderViews"),x=e("../views/multiView").MultiView,T=f.View.extend({tagName:"div",initialize:function(e){e=e||{},this.options=e,this.initVisualization(e),this.initCommandCollection(e),this.initParseWaterfall(e),this.initGitShim(e),this.initUndoStack(e),e.wait||this.takeControl()},getDefaultVisEl:function(){return $("#mainVisSpace")[0]},getAnimationTime:function(){return 1050},initVisualization:function(e){this.mainVis=new d({el:e.el||this.getDefaultVisEl()})},initUndoStack:function(e){this.undoStack=[]},initCommandCollection:function(e){this.commandCollection=h.getCommandUI().commandCollection},initParseWaterfall:function(e){this.parseWaterfall=new v},initGitShim:function(e){this.gitShim=new y({beforeCB:u.bind(this.beforeCommandCB,this)})},takeControl:function(){h.getEventBaton().stealBaton("commandSubmitted",this.commandSubmitted,this),h.getEventBaton().stealBaton("processSandboxCommand",this.processSandboxCommand,this),h.getEventBaton().stealBaton("levelExited",this.levelExited,this),this.insertGitShim()},releaseControl:function(){h.getEventBaton().releaseBaton("commandSubmitted",this.commandSubmitted,this),h.getEventBaton().releaseBaton("processSandboxCommand",this.processSandboxCommand,this),h.getEventBaton().releaseBaton("levelExited",this.levelExited,this),this.releaseGitShim()},releaseGitShim:function(){this.gitShim&&this.gitShim.removeShim()},insertGitShim:function(){this.gitShim&&this.mainVis.customEvents.on("gitEngineReady",function(){this.gitShim.insertShim()},this)},beforeCommandCB:function(e){this.pushUndo()},pushUndo:function(){this.undoStack.push(this.mainVis.gitEngine.printTree())},undo:function(e,t){var n=this.undoStack.pop();if(!n){e.set("error",new p.GitError({msg:c.str("undo-stack-empty")})),t.resolve();return}this.mainVis.reset(n),setTimeout(function(){e.finishWith(t)},this.mainVis.getAnimationTime())},commandSubmitted:function(e){h.getEvents().trigger("commandSubmittedPassive",e),l.splitTextCommand(e,function(e){this.commandCollection.add(new g({rawStr:e,parseWaterfall:this.parseWaterfall}))},this)},startLevel:function(t,n){var r=t.get("regexResults")||[],i=r[1]||"",s=h.getLevelArbiter().getLevel(i);if(!s){t.addWarning(c.str("level-no-id",{id:i})),h.getEventBaton().trigger("commandSubmitted","levels"),t.set("status","error"),n.resolve();return}this.hide(),this.clear();var o=a.defer(),u=e("../level").Level;this.currentLevel=new u({level:s,deferred:o,command:t}),o.promise.then(function(){t.finishWith(n)})},buildLevel:function(t,n){this.hide(),this.clear();var r=a.defer(),i=e("../level/builder").LevelBuilder;this.levelBuilder=new i({deferred:r}),r.promise.then(function(){t.finishWith(n)})},exitLevel:function(e,t){e.addWarning(c.str("level-cant-exit")),e.set("status","error"),t.resolve()},showLevels:function(e,t){var n=a.defer();h.getLevelDropdown().show(n,e),n.promise.done(function(){e.finishWith(t)})},resetSolved:function(e,t){h.getLevelArbiter().resetSolvedMap(),e.addWarning(c.str("solved-map-reset")),e.finishWith(t)},processSandboxCommand:function(e,t){var n={"reset solved":this.resetSolved,undo:this.undo,"help general":this.helpDialog,help:this.helpDialog,reset:this.reset,delay:this.delay,clear:this.clear,"exit level":this.exitLevel,level:this.startLevel,sandbox:this.exitLevel,levels:this.showLevels,mobileAlert:this.mobileAlert,"build level":this.buildLevel,"export tree":this.exportTree,"import tree":this.importTree,importTreeNow:this.importTreeNow,"import level":this.importLevel},r=n[e.get("method")];if(!r)throw new Error("no method for that wut");r.apply(this,[e,t])},hide:function(){this.mainVis.hide()},levelExited:function(){this.show()},show:function(){this.mainVis.show()},importTreeNow:function(e,t){var n=e.get("regexResults")||[];if(n.length<2)e.set("error",new p.GitError({msg:c.str("git-error-options")}));else{var r=n.input.replace(/importTreeNow\s+/g,"");try{this.mainVis.gitEngine.loadTreeFromString(r)}catch(i){e.set("error",new p.GitError({msg:String(i)}))}}e.finishWith(t)},importTree:function(e,t){var n=new S.MarkdownPresenter({previewText:c.str("paste-json"),fillerText:" "});n.deferred.promise.then(u.bind(function(e){try{this.mainVis.gitEngine.loadTree(JSON.parse(e))}catch(t){this.mainVis.reset(),new x({childViews:[{type:"ModalAlert",options:{markdowns:["## Error!","","Something is wrong with that JSON! Here is the error:","",String(t)]}}]})}},this)).fail(function(){}).done(function(){e.finishWith(t)})},importLevel:function(t,n){var r=new S.MarkdownPresenter({previewText:c.str("paste-json"),fillerText:" "});r.deferred.promise.then(u.bind(function(r){var i=e("../level").Level;try{var s=JSON.parse(r),o=a.defer();this.currentLevel=new i({level:s,deferred:o,command:t}),this.hide(),o.promise.then(function(){t.finishWith(n)})}catch(u){new x({childViews:[{type:"ModalAlert",options:{markdowns:["## Error!","","Something is wrong with that level JSON, this happened:","",String(u)]}}]}),t.finishWith(n)}},this)).fail(function(){t.finishWith(n)}).done()},exportTree:function(e,t){var n=JSON.stringify(this.mainVis.gitEngine.exportTree(),null,2),r=new x({childViews:[{type:"MarkdownPresenter",options:{previewText:c.str("share-tree"),fillerText:n,noConfirmCancel:!0}}]});r.getPromise().then(function(){e.finishWith(t)}).done()},clear:function(e,t){h.getEvents().trigger("clearOldCommands"),e&&t&&e.finishWith(t)},mobileAlert:function(e,t){alert(c.str("mobile-alert")),e.finishWith(t)},delay:function(e,t){var n=parseInt(e.get("regexResults")[1],10);setTimeout(function(){e.finishWith(t)},n)},reset:function(e,t){this.mainVis.reset(),this.initUndoStack(),setTimeout(function(){e.finishWith(t)},this.mainVis.getAnimationTime())},helpDialog:function(t,n){var r=new x({childViews:c.getDialog(e("../dialogs/sandbox"))});r.getPromise().then(u.bind(function(){t.finishWith(n)},this)).done()}});n.Sandbox=T}),e.define("/node_modules/q/package.json",function(e,t,n,r,i,s,o){t.exports={main:"q.js"}}),e.define("/node_modules/q/q.js",function(e,t,n,r,i,s,o){(function(e){if(typeof bootstrap=="function")bootstrap("promise",e);else if(typeof n=="object")e(void 0,n);else if(typeof define=="function")define(e);else if(typeof ses!="undefined"){if(!ses.ok())return;ses.makeQ=function(){var t={};return e(void 0,t)}}else e(void 0,Q={})})(function(e,t){"use strict";function w(e){return b(e)==="[object StopIteration]"||e instanceof E}function x(e,t){t.stack&&typeof e=="object"&&e!==null&&e.stack&&e.stack.indexOf(S)===-1&&(e.stack=T(e.stack)+"\n"+S+"\n"+T(t.stack))}function T(e){var t=e.split("\n"),n=[];for(var r=0;r<t.length;++r){var i=t[r];!C(i)&&!N(i)&&n.push(i)}return n.join("\n")}function N(e){return e.indexOf("(module.js:")!==-1||e.indexOf("(node.js:")!==-1}function C(e){var t=/at .+ \((.*):(\d+):\d+\)/.exec(e);if(!t)return!1;var i=t[1],s=t[2];return i===r&&s>=n&&s<=Ct}function k(){if(Error.captureStackTrace){var e,t,n=Error.prepareStackTrace;return Error.prepareStackTrace=function(n,r){e=r[1].getFileName(),t=r[1].getLineNumber()},(new Error).stack,Error.prepareStackTrace=n,r=e,t}}function L(e,t,n){return function(){return typeof console!="undefined"&&typeof console.warn=="function"&&console.warn(t+" is deprecated, use "+n+" instead.",(new Error("")).stack),e.apply(e,arguments)}}function A(){function s(r){if(!e)return;n=z(r),d(e,function(e,t){u(function(){n.promiseSend.apply(n,t)})},void 0),e=void 0,t=void 0}var e=[],t=[],n,r=g(A.prototype),i=g(M.prototype);return i.promiseSend=function(r,i,s,o){var a=p(arguments);e?(e.push(a),r==="when"&&o&&t.push(o)):u(function(){n.promiseSend.apply(n,a)})},i.valueOf=function(){return e?i:n.valueOf()},Error.captureStackTrace&&(Error.captureStackTrace(i,A),i.stack=i.stack.substring(i.stack.indexOf("\n")+1)),o(i),r.promise=i,r.resolve=s,r.reject=function(e){s(U(e))},r.notify=function(n){e&&d(t,function(e,t){u(function(){t(n)})},void 0)},r}function O(e){var t=A();return ot(e,t.resolve,t.reject,t.notify).fail(t.reject),t.promise}function M(e,t,n,r){t===void 0&&(t=function(e){return U(new Error("Promise does not support operation: "+e))});var i=g(M.prototype);return i.promiseSend=function(n,r){var s=p(arguments,2),o;try{e[n]?o=e[n].apply(i,s):o=t.apply(i,[n].concat(s))}catch(u){o=U(u)}r&&r(o)},n&&(i.valueOf=n),r&&(i.exception=r),o(i),i}function _(e){return D(e)?e.valueOf():e}function D(e){return e&&typeof e.promiseSend=="function"}function P(e){return e&&typeof e.then=="function"}function H(e){return B(e)||j(e)}function B(e){return!P(_(e))}function j(e){return e=_(e),D(e)&&"exception"in e}function R(){!q&&typeof window!="undefined"&&!window.Touch&&window.console&&console.log("Should be empty:",I),q=!0}function U(e){var t=M({when:function(t){if(t){var n=v(F,this);n!==-1&&(I.splice(n,1),F.splice(n,1))}return t?t(e):U(e)}},function(){return U(e)},function n(){return this},e);return R(),F.push(t),I.push(e),t}function z(e){if(D(e))return e;e=_(e);if(P(e)){var t=A();return e.then(t.resolve,t.reject,t.notify),t.promise}return M({when:function(){return e},get:function(t){return e[t]},put:function(t,n){return e[t]=n,e},del:function(t){return delete e[t],e},post:function(t,n){return e[t].apply(e,n)},apply:function(t,n){return e.apply(t,n)},fapply:function(t){return e.apply(void 0,t)},viewInfo:function(){function r(e){n[e]||(n[e]=typeof t[e])}var t=e,n={};while(t)Object.getOwnPropertyNames(t).forEach(r),t=Object.getPrototypeOf(t);return{type:typeof e,properties:n}},keys:function(){return y(e)}},void 0,function n(){return e})}function W(e){return M({isDef:function(){}},function(){var n=p(arguments);return Z.apply(void 0,[e].concat(n))},function(){return _(e)})}function X(e,t){return e=z(e),t?M({viewInfo:function(){return t}},function(){var n=p(arguments);return Z.apply(void 0,[e].concat(n))},function(){return _(e)}):Z(e,"viewInfo")}function V(e){return X(e).when(function(t){var n;t.type==="function"?n=function(){return rt(e,void 0,arguments)}:n={};var r=t.properties||{};return y(r).forEach(function(t){r[t]==="function"&&(n[t]=function(){return nt(e,t,arguments)})}),z(n)})}function $(e,t,n,r){function o(e){try{return typeof t=="function"?t(e):e}catch(n){return U(n)}}function a(e){if(typeof n=="function"){x(e,l);try{return n(e)}catch(t){return U(t)}}return U(e)}function f(e){return typeof r=="function"?r(e):e}var i=A(),s=!1,l=z(e);return u(function(){l.promiseSend("when",function(e){if(s)return;s=!0,i.resolve(o(e))},function(e){if(s)return;s=!0,i.resolve(a(e))})}),l.promiseSend("when",void 0,void 0,function(e){i.notify(f(e))}),i.promise}function J(e,t,n){return $(e,function(e){return ft(e).then(function(e){return t.apply(void 0,e)},n)},n)}function K(e){return function(){function t(e,t){var s;try{s=n[e](t)}catch(o){return w(o)?o.value:U(o)}return $(s,r,i)}var n=e.apply(this,arguments),r=t.bind(t,"send"),i=t.bind(t,"throw");return r()}}function Q(e){throw new E(e)}function G(e){return function(){return ft([this,ft(arguments)]).spread(function(t,n){return e.apply(t,n)})}}function Y(e){return function(t){var n=p(arguments,1);return Z.apply(void 0,[t,e].concat(n))}}function Z(e,t){var n=A(),r=p(arguments,2);return e=z(e),u(function(){e.promiseSend.apply(e,[t,n.resolve].concat(r))}),n.promise}function et(e,t,n){var r=A();return e=z(e),u(function(){e.promiseSend.apply(e,[t,r.resolve].concat(n))}),r.promise}function tt(e){return function(t){var n=p(arguments,1);return et(t,e,n)}}function st(e,t){var n=p(arguments,2);return rt(e,t,n)}function ot(e){var t=p(arguments,1);return it(e,t)}function ut(e,t){var n=p(arguments,2);return function(){var i=n.concat(p(arguments));return rt(e,t,i)}}function at(e){var t=p(arguments,1);return function(){var r=t.concat(p(arguments));return it(e,r)}}function ft(e){return $(e,function(e){var t=e.length;if(t===0)return z(e);var n=A();return d(e,function(r,i,s){B(i)?(e[s]=_(i),--t===0&&n.resolve(e)):$(i,function(r){e[s]=r,--t===0&&n.resolve(e)}).fail(n.reject)},void 0),n.promise})}function lt(e){return $(e,function(e){return $(ft(m(e,function(e){return $(e,i,i)})),function(){return m(e,z)})})}function ct(e,t){return $(e,void 0,t)}function ht(e,t){return $(e,void 0,void 0,t)}function pt(e,t){return $(e,function(e){return $(t(),function(){return e})},function(e){return $(t(),function(){return U(e)})})}function dt(e,n,r,i){function s(n){u(function(){x(n,e);if(!t.onerror)throw n;t.onerror(n)})}var o=n||r||i?$(e,n,r,i):e;ct(o,s)}function vt(e,t){var n=A(),r=setTimeout(function(){n.reject(new Error("Timed out after "+t+" ms"))},t);return $(e,function(e){clearTimeout(r),n.resolve(e)},function(e){clearTimeout(r),n.reject(e)}),n.promise}function mt(e,t){t===void 0&&(t=e,e=void 0);var n=A();return setTimeout(function(){n.resolve(e)},t),n.promise}function gt(e,t){var n=p(t),r=A();return n.push(r.makeNodeResolver()),it(e,n).fail(r.reject),r.promise}function yt(e){var t=p(arguments,1),n=A();return t.push(n.makeNodeResolver()),it(e,t).fail(n.reject),n.promise}function bt(e){var t=p(arguments,1);return function(){var n=t.concat(p(arguments)),r=A();return n.push(r.makeNodeResolver()),it(e,n).fail(r.reject),r.promise}}function wt(e,t,n){return St(e,t).apply(void 0,n)}function Et(e,t){var n=p(arguments,2);return wt(e,t,n)}function St(e){if(arguments.length>1){var t=arguments[1],n=p(arguments,2),r=e;e=function(){var e=n.concat(p(arguments));return r.apply(t,e)}}return function(){var t=A(),n=p(arguments);return n.push(t.makeNodeResolver()),it(e,n).fail(t.reject),t.promise}}function xt(e,t,n){var r=p(n),i=A();return r.push(i.makeNodeResolver()),nt(e,t,r).fail(i.reject),i.promise}function Tt(e,t){var n=p(arguments,2),r=A();return n.push(r.makeNodeResolver()),nt(e,t,n).fail(r.reject),r.promise}function Nt(e,t){if(!t)return e;e.then(function(e){u(function(){t(null,e)})},function(e){u(function(){t(e)})})}var n=k(),r,i=function(){},o=Object.freeze||i;typeof cajaVM!="undefined"&&(o=cajaVM.def);var u;if(typeof s!="undefined")u=s.nextTick;else if(typeof setImmediate=="function")u=setImmediate;else if(typeof MessageChannel!="undefined"){var a=new MessageChannel,f={},l=f;a.port1.onmessage=function(){f=f.next;var e=f.task;delete f.task,e()},u=function(e){l=l.next={task:e},a.port2.postMessage(0)}}else u=function(e){setTimeout(e,0)};var c;if(Function.prototype.bind){var h=Function.prototype.bind;c=h.bind(h.call)}else c=function(e){return function(){return e.call.apply(e,arguments)}};var p=c(Array.prototype.slice),d=c(Array.prototype.reduce||function(e,t){var n=0,r=this.length;if(arguments.length===1)do{if(n in this){t=this[n++];break}if(++n>=r)throw new TypeError}while(1);for(;n<r;n++)n in this&&(t=e(t,this[n],n));return t}),v=c(Array.prototype.indexOf||function(e){for(var t=0;t<this.length;t++)if(this[t]===e)return t;return-1}),m=c(Array.prototype.map||function(e,t){var n=this,r=[];return d(n,function(i,s,o){r.push(e.call(t,s,o,n))},void 0),r}),g=Object.create||function(e){function t(){}return t.prototype=e,new t},y=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t},b=Object.prototype.toString,E;typeof ReturnValue!="undefined"?E=ReturnValue:E=function(e){this.value=e};var S="From previous event:";t.nextTick=u,t.defer=A,A.prototype.makeNodeResolver=function(){var e=this;return function(t,n){t?e.reject(t):arguments.length>2?e.resolve(p(arguments,1)):e.resolve(n)}},A.prototype.node=L(A.prototype.makeNodeResolver,"node","makeNodeResolver"),t.promise=O,t.makePromise=M,M.prototype.then=function(e,t,n){return $(this,e,t,n)},M.prototype.thenResolve=function(e){return $(this,function(){return e})},d(["isResolved","isFulfilled","isRejected","when","spread","send","get","put","del","post","invoke","keys","apply","call","bind","fapply","fcall","fbind","all","allResolved","view","viewInfo","timeout","delay","catch","finally","fail","fin","progress","end","done","nfcall","nfapply","nfbind","ncall","napply","nbind","npost","ninvoke","nend","nodeify"],function(e,n){M.prototype[n]=function(){return t[n].apply(t,[this].concat(p(arguments)))}},void 0),M.prototype.toSource=function(){return this.toString()},M.prototype.toString=function(){return"[object Promise]"},o(M.prototype),t.nearer=_,t.isPromise=D,t.isPromiseAlike=P,t.isResolved=H,t.isFulfilled=B,t.isRejected=j;var F=[],I=[],q;t.reject=U,t.begin=z,t.resolve=z,t.ref=L(z,"ref","resolve"),t.master=W,t.viewInfo=X,t.view=V,t.when=$,t.spread=J,t.async=K,t["return"]=Q,t.promised=G,t.sender=L(Y,"sender","dispatcher"),t.Method=L(Y,"Method","dispatcher"),t.send=L(Z,"send","dispatch"),t.dispatch=et,t.dispatcher=tt,t.get=tt("get"),t.put=tt("put"),t["delete"]=t.del=tt("del");var nt=t.post=tt("post");t.invoke=function(e,t){var n=p(arguments,2);return nt(e,t,n)};var rt=t.apply=L(tt("apply"),"apply","fapply"),it=t.fapply=tt("fapply");t.call=L(st,"call","fcall"),t["try"]=ot,t.fcall=ot,t.bind=L(ut,"bind","fbind"),t.fbind=at,t.keys=tt("keys"),t.all=ft,t.allResolved=lt,t["catch"]=t.fail=ct,t.progress=ht,t["finally"]=t.fin=pt,t.end=L(dt,"end","done"),t.done=dt,t.timeout=vt,t.delay=mt,t.nfapply=gt,t.nfcall=yt,t.nfbind=bt,t.napply=L(wt,"napply","npost"),t.ncall=L(Et,"ncall","ninvoke"),t.nbind=L(St,"nbind","nfbind"),t.npost=xt,t.ninvoke=Tt,t.nend=L(Nt,"nend","nodeify"),t.nodeify=Nt;var Ct=k()})}),e.define("/src/js/app/index.js",function(e,t,n,r,i,s,o){function x(){var t=e("../views"),n=e("../models/collections"),r=e("../views/commandViews"),i=new t.MainHelperBar,s=new t.BackgroundView;this.commandCollection=new n.CommandCollection,this.commandBuffer=new n.CommandBuffer({collection:this.commandCollection}),this.commandPromptView=new r.CommandPromptView({el:$("#commandLineBar")}),this.commandLineHistoryView=new r.CommandLineHistoryView({el:$("#commandLineHistory"),collection:this.commandCollection})}var u=e("underscore"),a=e("backbone"),f=e("../util/constants"),l=e("../util"),c=e("../intl"),h=u.clone(a.Events),p,d,v,m,g,y=function(){var t=e("../sandbox/").Sandbox,n=e("../level").Level,r=e("../util/eventBaton").EventBaton,i=e("../level/arbiter").LevelArbiter,s=e("../views/levelDropdownView").LevelDropdownView;v=new r,p=new x,d=new t,m=new i,g=new s({wait:!0}),h.on("localeChanged",w),h.on("vcsModeChange",b),E(v),S(d)},b=function(e){if(!window.$)return;var t=e.mode,n=t.slice(0,1).toUpperCase()+t.slice(1),r=n==="Git"?"Hg":"Git",i=new RegExp(r,"g");document.title=c.str("learn-git-branching").replace(i,n),$("span.vcs-mode-aware").each(function(e,t){var r=$(t).text().replace(i,n);$(t).text(r)})},w=function(){if(!window.$)return;$("span.intl-aware").each(function(t,n){var r=e("../intl"),i=$(n).attr("data-intl");$(n).text(r.str(i).toUpperCase())})},E=function(e){var t=function(){$("#commandTextField").focus()};t(),$(window).focus(function(t){e.trigger("windowFocus",t)}),$(document).click(function(t){e.trigger("documentClick",t)}),$(document).bind("keydown",function(t){e.trigger("docKeydown",t)}),$(document).bind("keyup",function(t){e.trigger("docKeyup",t)}),$(window).on("resize",function(e){h.trigger("resize",e)}),e.stealBaton("docKeydown",function(){}),e.stealBaton("docKeyup",function(){}),e.stealBaton("windowFocus",t),e.stealBaton("documentClick",t);var n=function(t){return function(){var n=[t];u.each(arguments,function(e){n.push(e)}),e.trigger.apply(e,n)}};$("#commandTextField").on("keydown",n("keydown")),$("#commandTextField").on("keyup",n("keyup")),$(window).trigger("resize")},S=function(e){var t=l.parseQueryString(window.location.href),n;t.hasOwnProperty("demo")?n=["git commit; git checkout -b bugFix C1; git commit; git merge master; git checkout master; git commit; git rebase bugFix;","delay 1000; reset;","level advanced1 --noFinishDialog --noStartCommand --noIntroDialog;","delay 2000; show goal; delay 1000; hide goal;","git checkout bugFix; git rebase master; git checkout side; git rebase bugFix;","git checkout another; git rebase side; git rebase another master;","help; levels"]:t.hasOwnProperty("hgdemo")?(n=['importTreeNow {"branches":{"master":{"target":"C3","id":"master"},"feature":{"target":"C2","id":"feature"},"debug":{"target":"C4","id":"debug"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"}},"HEAD":{"target":"feature","id":"HEAD"}}',"delay 1000","git rebase master","delay 1000","undo","hg book","delay 1000","hg rebase -d master"],n=n.join(";#").split("#")):t.hasOwnProperty("hgdemo2")?(n=['importTreeNow {"branches":{"master":{"target":"C3","id":"master"},"feature":{"target":"C2","id":"feature"},"debug":{"target":"C4","id":"debug"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"}},"HEAD":{"target":"debug","id":"HEAD"}}',"delay 1000","git rebase master","delay 1000","undo","hg sum","delay 1000","hg rebase -d master"],n=n.join(";#").split("#")):t.hasOwnProperty("hgdemo3")?(n=['importTreeNow {"branches":{"master":{"target":"C1","id":"master"},"trunk":{"target":"C2","id":"trunk"},"feature":{"target":"C5","id":"feature"},"debug":{"target":"C4","id":"debug"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"}},"HEAD":{"target":"feature","id":"HEAD"}}',"hg book","delay 2000","hg rebase -d trunk"],n=n.join(";#").split("#")):t.hasOwnProperty("NODEMO")||(n=["git help;","delay 1000;","help;","levels"]),n&&e.mainVis.customEvents.on("gitEngineReady",function(){v.trigger("commandSubmitted",n.join(""))}),t.locale!==undefined&&t.locale.length&&(f.GLOBAL.locale=t.locale,h.trigger("localeChanged"));if(t.command){var r=unescape(t.command);e.mainVis.customEvents.on("gitEngineReady",function(){v.trigger("commandSubmitted",r)})}(/(iPhone|iPod|iPad).*AppleWebKit/i.test(navigator.userAgent)||/android/i.test(navigator.userAgent))&&e.mainVis.customEvents.on("gitEngineReady",function(){v.trigger("commandSubmitted","mobile alert")})};e("../util").isBrowser()&&$(document).ready(y),n.getEvents=function(){return h},n.getSandbox=function(){return d},n.getEventBaton=function(){return v},n.getCommandUI=function(){return p},n.getLevelArbiter=function(){return m},n.getLevelDropdown=function(){return g},n.init=y}),e.define("/src/js/level/index.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=e("q"),l=e("../util"),c=e("../app"),h=e("../intl"),p=e("../log"),d=e("../util/errors"),v=e("../sandbox/").Sandbox,m=e("../util/constants"),g=e("../visuals/visualization").Visualization,y=e("../level/parseWaterfall").ParseWaterfall,b=e("../level/disabledMap").DisabledMap,w=e("../models/commandModel").Command,E=e("../git/gitShim").GitShim,S=e("../commands"),x=e("../views/multiView").MultiView,T=e("../views").CanvasTerminalHolder,N=e("../views").ConfirmCancelTerminal,C=e("../views").NextLevelConfirm,k=e("../views").LevelToolbar,L=e("../git/treeCompare").TreeCompare,A={"help level":/^help level$/,"start dialog":/^start dialog$/,"show goal":/^(show goal|goal|help goal)$/,"hide goal":/^hide goal$/,"show solution":/^show solution($|\s)/,objective:/^(objective|assignment)$/},O=l.genParseCommand(A,"processLevelCommand"),M=v.extend({initialize:function(e){e=e||{},e.level=e.level||{},this.level=e.level,this.gitCommandsIssued=[],this.solved=!1,this.initGoalData(e),this.initName(e),M.__super__.initialize.apply(this,[e]),this.startOffCommand(),this.handleOpen(e.deferred)},handleOpen:function(e){e=e||f.defer();if(this.level.startDialog&&!this.testOption("noIntroDialog")){new x(u.extend({},h.getStartDialog(this.level),{deferred:e}));return}setTimeout(function(){e.resolve()},this.getAnimationTime()*1.2)},objectiveDialog:function(e,t,n){n=n===undefined?this.level:n;if(!n||!n.startDialog){e.set("error",new d.GitError({msg:h.str("no-start-dialog")})),t.resolve();return}debugger;console.log(h.getStartDialog(n));var r=$.extend({},h.getStartDialog(n));r.childViews=r.childViews.slice(-1),new x(u.extend(r,{deferred:t})),t.promise.then(function(){e.set("status","finished")})},startDialog:function(e,t){if(!this.level.startDialog){e.set("error",new d.GitError({msg:h.str("no-start-dialog")})),t.resolve();return}this.handleOpen(t),t.promise.then(function(){e.set("status","finished")})},getEnglishName:function(){return this.level.name.en_US},initName:function(){var e=h.getName(this.level);this.levelToolbar=new k({name:e})},initGoalData:function(e){if(!this.level.goalTreeString||!this.level.solutionCommand)throw new Error("need goal tree and solution")},takeControl:function(){c.getEventBaton().stealBaton("processLevelCommand",this.processLevelCommand,this),M.__super__.takeControl.apply(this)},releaseControl:function(){c.getEventBaton().releaseBaton("processLevelCommand",this.processLevelCommand,this),M.__super__.releaseControl.apply(this)},startOffCommand:function(){this.testOption("noStartCommand")||c.getEventBaton().trigger("commandSubmitted","hint; delay 2000; show goal")},initVisualization:function(e){this.mainVis=new g({el:e.el||this.getDefaultVisEl(),treeString:e.level.startTree})},initGoalVisualization:function(){var e=L.onlyMasterCompared(this.level);return this.goalCanvasHolder=new T({text:e?h.str("goal-only-master"):undefined}),this.goalVis=new g({el:this.goalCanvasHolder.getCanvasLocation(),containerElement:this.goalCanvasHolder.getCanvasLocation(),treeString:this.level.goalTreeString,noKeyboardInput:!0,smallCanvas:!0,isGoalVis:!0,levelBlob:this.level,noClick:!0}),this.goalCanvasHolder},showSolution:function(t,n){var r=this.level.solutionCommand,i=u.bind(function(){this.isShowingSolution=!0,c.getEventBaton().trigger("commandSubmitted",r),p.showLevelSolution(this.getEnglishName())},this),s=t.get("rawStr");this.testOptionOnString(s,"noReset")||(r="reset --forSolution; "+r);if(this.testOptionOnString(s,"force")){i(),t.finishWith(n);return}var o=f.defer(),a=h.getDialog(e("../dialogs/confirmShowSolution"))[0],l=new N({markdowns:a.options.markdowns,deferred:o});o.promise.then(i).fail(function(){t.setResult("")}).done(function(){setTimeout(function(){t.finishWith(n)},l.getAnimationTime())})},showGoal:function(e,t){this.showSideVis(e,t,this.goalCanvasHolder,this.initGoalVisualization)},showSideVis:function(e,t,n,r){var i=function(){e&&e.finishWith(t)};if(!n||!n.inDom)n=r.apply(this);n.slideIn(),setTimeout(i,n.getAnimationTime())},hideGoal:function(e,t){this.hideSideVis(e,t,this.goalCanvasHolder)},hideSideVis:function(e,t,n,r){var i=function(){e&&e.finishWith(t)};n&&n.inDom?(n.die(),setTimeout(i,n.getAnimationTime())):i()},initParseWaterfall:function(e){M.__super__.initParseWaterfall.apply(this,[e]),this.parseWaterfall.addFirst("parseWaterfall",O),this.parseWaterfall.addFirst("instantWaterfall",this.getInstantCommands()),e.level.disabledMap&&this.parseWaterfall.addFirst("instantWaterfall",(new b({disabledMap:e.level.disabledMap})).getInstantCommands())},initGitShim:function(e){this.gitShim=new E({beforeCB:u.bind(this.beforeCommandCB,this),afterCB:u.bind(this.afterCommandCB,this),afterDeferHandler:u.bind(this.afterCommandDefer,this)})},undo:function(){this.gitCommandsIssued.pop(),M.__super__.undo.apply(this,arguments)},afterCommandCB:function(e){if(e.get("error"))return;var t=!1;u.each(S.commands.getCommandsThatCount(),function(n){u.each(n,function(n){t=t||n.test(e.get("rawStr"))})}),t&&this.gitCommandsIssued.push(e.get("rawStr"))},afterCommandDefer:function(e,t){if(this.solved){t.addWarning(h.str("already-solved")),e.resolve();return}var n=this.mainVis.gitEngine.exportTree(),r=L.dispatchFromLevel(this.level,n);if(!r){e.resolve();return}this.levelSolved(e)},getNumSolutionCommands:function(){var e=this.level.solutionCommand.replace(/^;|;$/g,"");return e.split(";").length},testOption:function(e){return this.options.command&&(new RegExp("--"+e)).test(this.options.command.get("rawStr"))},testOptionOnString:function(e,t){return e&&(new RegExp("--"+t)).test(e)},levelSolved:function(e){this.solved=!0,this.isShowingSolution||(c.getEvents().trigger("levelSolved",this.level.id),p.levelSolved(this.getEnglishName())),this.hideGoal();var t=c.getLevelArbiter().getNextLevel(this.level.id),n=this.gitCommandsIssued.length,r=this.getNumSolutionCommands();m.GLOBAL.isAnimating=!0;var i=this.testOption("noFinishDialog"),s=this.mainVis.gitVisuals.finishAnimation();this.mainVis.originVis&&(s=s.then(this.mainVis.originVis.gitVisuals.finishAnimation())),i||(s=s.then(function(){var e=new C({nextLevel:t,numCommands:n,best:r});return e.getPromise()})),s.then(function(){!i&&t&&(p.choseNextLevel(t.id),c.getEventBaton().trigger("commandSubmitted","level "+t.id))}).fail(function(){}).done(function(){m.GLOBAL.isAnimating=!1,e.resolve()})},die:function(){this.levelToolbar.die(),this.hideGoal(),this.mainVis.die(),this.releaseControl(),this.clear(),delete this.commandCollection,delete this.mainVis,delete this.goalVis,delete this.goalCanvasHolder},getInstantCommands:function(){var e=u.bind(function(){var e=h.getHint(this.level);return!e||!e.length?h.str("no-hint"):e},this);return[[/^help$|^\?$/,function(){throw new d.CommandResult({msg:h.str("help-vague-level")})}],[/^hint$/,function(){throw new d.CommandResult({msg:e()})}]]},reset:function(e,t){this.gitCommandsIssued=[];var n=e?e.get("rawStr"):"";this.testOptionOnString(n,"forSolution")||(this.isShowingSolution=!1),this.solved=!1,M.__super__.reset.apply(this,arguments)},buildLevel:function(e,t){this.exitLevel(),setTimeout(function(){c.getSandbox().buildLevel(e,t)},this.getAnimationTime()*1.5)},importLevel:function(e,t){this.exitLevel(),setTimeout(function(){c.getSandbox().importLevel(e,t)},this.getAnimationTime()*1.5)},startLevel:function(e,t){this.exitLevel(),setTimeout(function(){c.getSandbox().startLevel(e,t)},this.getAnimationTime()*1.5)},exitLevel:function(e,t){this.die();if(!e||!t)return;setTimeout(function(){e.finishWith(t)},this.getAnimationTime()),c.getEventBaton().trigger("levelExited")},processLevelCommand:function(e,t){var n={"show goal":this.showGoal,"hide goal":this.hideGoal,"show solution":this.showSolution,"start dialog":this.startDialog,"help level":this.startDialog,objective:this.objectiveDialog},r=n[e.get("method")];if(!r)throw new Error("woah we dont support that method yet",r);r.apply(this,[e,t])}});n.Level=M,n.regexMap=A}),e.define("/src/js/log/index.js",function(e,t,n,r,i,s,o){var u=function(e,t,n){window._gaq=window._gaq||[],window._gaq.push(["_trackEvent",e,t,n])};n.viewInteracted=function(e){u("views","interacted",e)},n.showLevelSolution=function(e){u("levels","showedLevelSolution",e)},n.choseNextLevel=function(e){u("levels","nextLevelChosen",e)},n.levelSelected=function(e){u("levels","levelSelected",e)},n.levelSolved=function(e){u("levels","levelSolved",e)},n.commandEntered=function(e){u("commands","commandEntered",e)}}),e.define("/src/js/util/errors.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=a.Model.extend({defaults:{type:"MyError",msg:"Unknown Error"},toString:function(){return this.get("type")+": "+this.get("msg")},getMsg:function(){return this.get("msg")||"Unknown Error"},toResult:function(){return this.get("msg").length?"<p>"+this.get("msg").replace(/\n/g,"</p><p>")+"</p>":""}}),l=n.CommandProcessError=f.extend({defaults:{type:"Command Process Error"}}),c=n.CommandResult=f.extend({defaults:{type:"Command Result"}}),h=n.Warning=f.extend({defaults:{type:"Warning"}}),p=n.GitError=f.extend({defaults:{type:"Git Error"}}),d=function(e){if(e instanceof l||e instanceof p||e instanceof c||e instanceof h)return;throw e};n.filterError=d}),e.define("/src/js/visuals/visualization.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../util").isBrowser()?a=window.Backbone:a=e("backbone"),f=e("../models/collections"),l=f.CommitCollection,c=f.BranchCollection,h=e("../util/eventBaton").EventBaton,p=e("../visuals").GitVisuals,d=a.View.extend({initialize:function(e){e=e||{},this.options=e,this.customEvents=u.clone(a.Events),this.containerElement=e.containerElement;var t=this,n=e.containerElement||$("#canvasHolder")[0];new Raphael(n,200,200,function(){var n=this;s.nextTick(function(){t.paperInitialize(n,e)})})},paperInitialize:function(t,n){this.treeString=n.treeString,this.paper=t;var r=e("../app");this.eventBaton=n.noKeyboardInput?new h:r.getEventBaton(),this.commitCollection=new l,this.branchCollection=new c,this.gitVisuals=new p({commitCollection:this.commitCollection,branchCollection:this.branchCollection,paper:this.paper,noClick:this.options.noClick,isGoalVis:this.options.isGoalVis,smallCanvas:this.options.smallCanvas,visualization:this});var i=e("../git").GitEngine;this.gitEngine=new i({collection:this.commitCollection,branches:this.branchCollection,gitVisuals:this.gitVisuals,eventBaton:this.eventBaton}),this.gitEngine.init(),this.gitVisuals.assignGitEngine(this.gitEngine),this.myResize(),$(window).on("resize",u.bind(function(){this.myResize()},this)),this.gitVisuals.drawTreeFirstTime(),this.treeString&&this.gitEngine.loadTreeFromString(this.treeString),this.options.zIndex&&this.setTreeIndex(this.options.zIndex),this.shown=!1,this.setTreeOpacity(0),s.nextTick(u.bind(this.fadeTreeIn,this)),this.customEvents.trigger("gitEngineReady"),this.customEvents.trigger("paperReady")},clearOrigin:function(){delete this.originVis},makeOrigin:function(e){return this.originVis=new d(u.extend({},this.options,{noKeyboardInput:!0,noClick:!0,treeString:e.treeString})),this.originVis.customEvents.on("paperReady",u.bind(function(){var e=$(this.paper.canvas).css("z-index");this.originVis.setTreeIndex(e)},this)),this.originVis},originToo:function(e,t){if(!this.originVis)return;var n=u.bind(function(){this.originVis[e].apply(this.originVis,t)},this);if(this.originVis.paper){n();return}this.originVis.customEvents.on("paperReady",n)},setTreeIndex:function(e){$(this.paper.canvas).css("z-index",e),this.originToo("setTreeIndex",arguments)},setTreeOpacity:function(e){e===0&&(this.shown=!1),$(this.paper.canvas).css("opacity",e),this.originToo("setTreeOpacity",arguments)},getAnimationTime:function(){return 300},fadeTreeIn:function(){this.shown=!0,$(this.paper.canvas).animate({opacity:1},this.getAnimationTime()),this.originToo("fadeTreeIn",arguments)},fadeTreeOut:function(){this.shown=!1,$(this.paper.canvas).animate({opacity:0},this.getAnimationTime()),this.originToo("fadeTreeOut",arguments)},hide:function(){this.fadeTreeOut(),setTimeout(u.bind(function(){$(this.paper.canvas).css("visibility","hidden")},this),this.getAnimationTime()),this.originToo("hide",arguments)},show:function(){$(this.paper.canvas).css("visibility","visible"),setTimeout(u.bind(this.fadeTreeIn,this),10),this.originToo("show",arguments)},showHarsh:function(){$(this.paper.canvas).css("visibility","visible"),this.setTreeOpacity(1),this.originToo("showHarsh",arguments)},resetFromThisTreeNow:function(e){this.treeString=e;var t=this.getOriginInTreeString(e);if(t){var n=this.gitEngine.printTree(t);this.originToo("resetFromThisThreeNow",[n])}},getOriginInTreeString:function(e){var t=JSON.parse(unescape(e));return t.originTree},reset:function(e){var t=e||this.treeString;this.setTreeOpacity(0),t?this.gitEngine.loadTreeFromString(t):this.gitEngine.defaultInit(),this.fadeTreeIn();if(this.originVis)if(t){var n=this.getOriginInTreeString(t);this.originToo("reset",[JSON.stringify(n)])}else this.originToo("reset",arguments)},tearDown:function(){this.gitEngine.tearDown(),this.gitVisuals.tearDown(),delete this.paper,this.originToo("tearDown",arguments)},die:function(){this.fadeTreeOut(),setTimeout(u.bind(function(){this.shown||this.tearDown()},this),this.getAnimationTime()),this.originToo("die",arguments)},myResize:function(){if(!this.paper)return;var e=1,t=this.el,n=t.clientWidth-e,r=t.clientHeight-e;if(!this.containerElement){var i=t.offsetLeft,s=t.offsetTop;$(this.paper.canvas).css({position:"absolute",left:i+"px",top:s+"px"})}else $(this.paper.canvas).css({position:"absolute"});this.paper.setSize(n,r),this.gitVisuals.canvasResize(n,r)}});n.Visualization=d}),e.define("/src/js/models/collections.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?f=window.Backbone:f=e("backbone"),l=e("../git").Commit,c=e("../git").Branch,h=e("../models/commandModel").Command,p=e("../models/commandModel").CommandEntry,d=e("../util/constants").TIME,v=f.Collection.extend({model:l}),m=f.Collection.extend({model:h}),g=f.Collection.extend({model:c}),y=f.Collection.extend({model:p,localStorage:f.LocalStorage?new f.LocalStorage("CommandEntries"):null}),b=f.Model.extend({defaults:{collection:null},initialize:function(e){e.collection.bind("add",this.addCommand,this),this.buffer=[],this.timeout=null},addCommand:function(e){this.buffer.push(e),this.touchBuffer()},touchBuffer:function(){if(this.timeout)return;this.setTimeout()},setTimeout:function(){this.timeout=setTimeout(u.bind(function(){this.sipFromBuffer()},this),d.betweenCommandsDelay)},popAndProcess:function(){var e=this.buffer.shift(0);while(e.get("error")&&this.buffer.length)e=this.buffer.shift(0);e.get("error")?this.clear():this.processCommand(e)},processCommand:function(t){t.set("status","processing");var n=a.defer();n.promise.then(u.bind(function(){this.setTimeout()},this));var r=t.get("eventName");if(!r)throw new Error("I need an event to trigger when this guy is parsed and ready");var i=e("../app"),s=i.getEventBaton(),o=s.getNumListeners(r);if(!o){var f=e("../util/errors");t.set("error",new f.GitError({msg:"That command is valid, but not supported in this current environment! Try entering a level or level builder to use that command"})),n.resolve();return}i.getEventBaton().trigger(r,t,n)},clear:function(){clearTimeout(this.timeout),this.timeout=null},sipFromBuffer:function(){if(!this.buffer.length){this.clear();return}this.popAndProcess()}});n.CommitCollection=v,n.CommandCollection=m,n.BranchCollection=g,n.CommandEntryCollection=y,n.CommandBuffer=b}),e.define("/src/js/git/index.js",function(e,t,n,r,i,s,o){function E(e){this.rootCommit=null,this.refs={},this.HEAD=null,this.origin=null,this.mode="git",this.localRepo=null,this.branchCollection=e.branches,this.commitCollection=e.collection,this.gitVisuals=e.gitVisuals,this.eventBaton=e.eventBaton,this.eventBaton.stealBaton("processGitCommand",this.dispatch,this),this.animationFactory=e.animationFactory?e.animationFactory:c,this.initUniqueID()}var u=e("underscore"),a=e("../util").isBrowser()?a=window.Backbone:a=e("backbone"),f=e("q"),l=e("../intl"),c=e("../visuals/animation/animationFactory").AnimationFactory,h=e("../visuals/animation").AnimationQueue,p=e("./treeCompare").TreeCompare,d=e("../util/errors"),v=e("../app"),m=e("../commands"),g=d.GitError,y=d.CommandResult,b=e("../util/eventBaton").EventBaton,w="o/";E.prototype.initUniqueID=function(){this.uniqueId=function(){var e=0;return function(t){return t?t+e++:e++}}()},E.prototype.handleModeChange=function(e,t){if(this.mode===e){t();return}v.getEvents().trigger("vcsModeChange",{mode:e});var n=this.setMode(e);this.origin&&this.origin.setMode(e,function(){});if(!n){t();return}n.then(t)},E.prototype.getIsHg=function(){return this.mode==="hg"},E.prototype.setMode=function(e){var t=this.mode==="git"&&e==="hg";this.mode=e;if(!t)return;var n=f.defer();n.resolve();var r=n.promise,i=this.updateAllBranchesForHg();if(i)return r=r.then(u.bind(function(){return this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},this)),r=r.then(u.bind(function(){var e=this.pruneTree();if(!e)return;return this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),r;var s=this.pruneTree();if(!s)return;return this.animationFactory.playRefreshAnimation(this.gitVisuals)},E.prototype.assignLocalRepo=function(e){this.localRepo=e},E.prototype.defaultInit=function(){var e=this.getDefaultTree();this.loadTree(e)},E.prototype.getDefaultTree=function(){return JSON.parse(unescape("%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%2C%22type%22%3A%22branch%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22type%22%3A%22commit%22%2C%22parents%22%3A%5B%5D%2C%22author%22%3A%22Peter%20Cottle%22%2C%22createTime%22%3A%22Mon%20Nov%2005%202012%2000%3A56%3A47%20GMT-0800%20%28PST%29%22%2C%22commitMessage%22%3A%22Quick%20Commit.%20Go%20Bears%21%22%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22type%22%3A%22commit%22%2C%22parents%22%3A%5B%22C0%22%5D%2C%22author%22%3A%22Peter%20Cottle%22%2C%22createTime%22%3A%22Mon%20Nov%2005%202012%2000%3A56%3A47%20GMT-0800%20%28PST%29%22%2C%22commitMessage%22%3A%22Quick%20Commit.%20Go%20Bears%21%22%2C%22id%22%3A%22C1%22%7D%7D%2C%22HEAD%22%3A%7B%22id%22%3A%22HEAD%22%2C%22target%22%3A%22master%22%2C%22type%22%3A%22general%20ref%22%7D%7D"))},E.prototype.init=function(){this.rootCommit=this.makeCommit(null,null,{rootCommit:!0}),this.commitCollection.add(this.rootCommit);var e=this.makeBranch("master",this.rootCommit);this.HEAD=new S({id:"HEAD",target:e}),this.refs[this.HEAD.get("id")]=this.HEAD,this.commit()},E.prototype.hasOrigin=function(){return!!this.origin},E.prototype.isOrigin=function(){return!!this.localRepo},E.prototype.exportTreeForBranch=function(e){var t=this.exportTree(),n=this.getUpstreamSet(e),r=t.commits;t.commits={},u.each(r,function(e,r){n[r]&&(t.commits[r]=e)});var i=t.branches;return t.branches={},u.each(i,function(n,r){r===e&&(t.branches[r]=n)}),t.HEAD.target=e,t},E.prototype.exportTree=function(){var e={branches:{},commits:{},HEAD:null};u.each(this.branchCollection.toJSON(),function(t){t.target=t.target.get("id"),t.visBranch=undefined,e.branches[t.id]=t}),u.each(this.commitCollection.toJSON(),function(t){u.each(T.prototype.constants.circularFields,function(e){t[e]=undefined},this);var n=[];u.each(t.parents,function(e){n.push(e.get("id"))}),t.parents=n,e.commits[t.id]=t},this);var t=this.HEAD.toJSON();return t.visBranch=undefined,t.lastTarget=t.lastLastTarget=t.visBranch=undefined,t.target=t.target.get("id"),e.HEAD=t,this.hasOrigin()&&(e.originTree=this.origin.exportTree()),e},E.prototype.printTree=function(e){e=e||this.exportTree(),p.reduceTreeFields([e]);var t=JSON.stringify(e);return/'/.test(t)&&(t=escape(t)),t},E.prototype.printAndCopyTree=function(){window.prompt(l.str("Copy the tree string below"),this.printTree())},E.prototype.loadTree=function(e){e=JSON.parse(JSON.stringify(e)),this.removeAll(),this.instantiateFromTree(e),this.reloadGraphics(),this.initUniqueID()},E.prototype.loadTreeFromString=function(e){this.loadTree(JSON.parse(unescape(e)))},E.prototype.instantiateFromTree=function(e){var t={};u.each(e.commits,function(n){var r=this.getOrMakeRecursive(e,t,n.id);this.commitCollection.add(r)},this),u.each(e.branches,function(n){var r=this.getOrMakeRecursive(e,t,n.id);this.branchCollection.add(r,{silent:!0})},this);var n=this.getOrMakeRecursive(e,t,e.HEAD.id);this.HEAD=n,this.rootCommit=t.C0;if(!this.rootCommit)throw new Error("Need root commit of C0 for calculations");this.refs=t,this.gitVisuals.gitReady=!1,this.branchCollection.each(function(e){this.gitVisuals.addBranch(e)},this);if(e.originTree){var r=JSON.stringify(e.originTree);this.animationQueue=this.animationQueue||new h({callback:function(){}}),this.makeOrigin(r)}},E.prototype.makeOrigin=function(e){if(this.hasOrigin())throw new g({msg:l.str("git-error-origin-exists")});e=e||this.printTree(this.exportTreeForBranch("master"));var t=this.gitVisuals.getVisualization(),n=t.makeOrigin({localRepo:this,treeString:e});this.animationQueue.set("promiseBased",!0),n.customEvents.on("gitEngineReady",function(){this.origin=n.gitEngine,n.gitEngine.assignLocalRepo(this),this.origin.externalRefresh(),this.animationFactory.playRefreshAnimationAndFinish(this.gitVisuals,this.animationQueue)},this);var r=JSON.parse(unescape(e));u.each(r.branches,function(e,t){var n=e.target,r=this.makeBranch(w+t,this.getCommitFromRef(n));this.setLocalToTrackRemote(this.refs[e.id],r)},this)},E.prototype.setLocalToTrackRemote=function(e,t){t.addLocalBranchThatTracksThis(e),e.setRemoteTrackingBranchID(t.get("id"));var n='local branch "'+e.get("id")+'" set to track remote branch "'+t.get("id")+'"';this.command.addWarning(n)},E.prototype.getOrMakeRecursive=function(e,t,n){if(t[n])return t[n];var r=function(e,t){if(e.commits[t])return"commit";if(e.branches[t])return"branch";if(t=="HEAD")return"HEAD";throw new Error("bad type for "+t)},i=r(e,n);if(i=="HEAD"){var s=e.HEAD,o=new S(u.extend(e.HEAD,{target:this.getOrMakeRecursive(e,t,s.target)}));return t[n]=o,o}if(i=="branch"){var a=e.branches[n],f=new x(u.extend(e.branches[n],{target:this.getOrMakeRecursive(e,t,a.target)}));return t[n]=f,f}if(i=="commit"){var l=e.commits[n],c=[];u.each(l.parents,function(n){c.push(this.getOrMakeRecursive(e,t,n))},this);var h=new T(u.extend(l,{parents:c,gitVisuals:this.gitVisuals}));return t[n]=h,h}throw new Error("ruh rho!! unsupported type for "+n)},E.prototype.tearDown=function(){this.eventBaton.releaseBaton("processGitCommand",this.dispatch,this),this.removeAll()},E.prototype.reloadGraphics=function(){this.gitVisuals.rootCommit=this.refs.C0,this.gitVisuals.initHeadBranch(),this.gitVisuals.drawTreeFromReload(),this.gitVisuals.refreshTreeHarsh()},E.prototype.removeAll=function(){this.branchCollection.reset(),this.commitCollection.reset(),this.refs={},this.HEAD=null,this.rootCommit=null,this.origin&&(this.origin.gitVisuals.getVisualization().tearDown(),delete this.origin,this.gitVisuals.getVisualization().clearOrigin()),this.gitVisuals.resetAll()},E.prototype.getDetachedHead=function(){var e=this.HEAD.get("target"),t=e.get("type");return t!=="branch"},E.prototype.validateBranchName=function(e){e=e.replace(/\s/g,"");if(!/^[a-zA-Z0-9]+$/.test(e))throw new g({msg:l.str("bad-branch-name",{branch:e})});if(/[hH][eE][aA][dD]/.test(e))throw new g({msg:l.str("bad-branch-name",{branch:e})});return e.length>9&&(e=e.slice(0,9),this.command.addWarning(l.str("branch-name-short",{branch:e}))),e},E.prototype.validateAndMakeBranch=function(e,t){e=this.validateBranchName(e);if(this.refs[e])throw new g({msg:l.str("bad-branch-name",{branch:name})});this.makeBranch(e,t)},E.prototype.makeBranch=function(e,t){var n=new x({target:t,id:e});return this.branchCollection.add(n),this.refs[n.get("id")]=n,n},E.prototype.getHead=function(){return u.clone(this.HEAD)},E.prototype.getBranches=function(){var e=[];return this.branchCollection.each(function(t){e.push({id:t.get("id"),selected:this.HEAD.get("target")===t,target:t.get("target"),remote:t.getIsRemote(),obj:t})},this),e},E.prototype.getRemoteBranches=function(){var e=this.getBranches();return u.filter(e,function(e){return e.remote===!0})},E.prototype.getLocalBranches=function(){var e=this.getBranches();return u.filter(e,function(e){return e.remote===!1})},E.prototype.printBranchesWithout=function(e){var t=this.getUpstreamBranchSet(),n=this.getCommitFromRef(e).get("id"),r=[];u.each(t[n],function(e){e.selected=this.HEAD.get("target").get("id")==e.id,r.push(e)},this),this.printBranches(r)},E.prototype.printBranches=function(e){var t="";throw u.each(e,function(e){t+=(e.selected?"* ":"")+e.id+"\n"}),new y({msg:t})},E.prototype.getUniqueID=function(){var e=this.uniqueId("C"),t=u.bind(function(e){return this.refs[e]?!0:this.origin&&this.origin.refs[e]?!0:!1},this);while(t(e))e=this.uniqueId("C");return e},E.prototype.makeCommit=function(e,t,n){t||(t=this.getUniqueID());var r=new T(u.extend({parents:e,id:t,gitVisuals:this.gitVisuals},n||{}));return this.refs[r.get("id")]=r,this.commitCollection.add(r),r},E.prototype.revert=function(e){var t=u.map(e,function(e){return this.getCommitFromRef(e)},this),n=f.defer(),r=n.promise,i=this.resolveID("HEAD");r=this.animationFactory.highlightEachWithPromise(r,t,i);var s=this.getCommitFromRef("HEAD"),o=u.bind(function(e){var t=this.rebaseAltID(e.get("id")),n=l.str("git-revert-msg",{oldCommit:this.resolveName(e),oldMsg:e.get("commitMessage")}),r=this.makeCommit([s],t,{commitMessage:n});return s=r,this.animationFactory.playCommitBirthPromiseAnimation(r,this.gitVisuals)},this);u.each(t,function(e){r=r.then(function(){return o(e)})},this),r=r.then(u.bind(function(){return this.setTargetLocation("HEAD",s),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),this.animationQueue.thenFinish(r,n)},E.prototype.reset=function(e){this.setTargetLocation("HEAD",this.getCommitFromRef(e))},E.prototype.setupCherrypickChain=function(e){var t=f.defer(),n=t.promise,r=this.resolveID("HEAD");n=this.animationFactory.highlightEachWithPromise(n,e,r);var i=u.bind(function(e){var t=this.cherrypick(e);return this.animationFactory.playCommitBirthPromiseAnimation(t,this.gitVisuals)},this);u.each(e,function(e){n=n.then(function(){return i(e)})},this),this.animationQueue.thenFinish(n,t)},E.prototype.checkUpstreamOfSource=function(e,t,n,r,i){var s=t.getUpstreamSet(r),o=e.getCommitFromRef(n).get("id");if(!s[o])throw new g({msg:i||l.str("git-error-origin-fetch-no-ff")})},E.prototype.getTargetGraphDifference=function(e,t,n,r,i){i=i||{},r=t.resolveID(r);var s=e.getUpstreamSet(n),o=t.getCommitFromRef(r),a=t.exportTree(),f=a.commits[o.get("id")];if(e.refs[f.id]){if(i.dontThrowOnNoFetch)return[];throw new g({msg:l.str("git-error-origin-fetch-uptodate")})}f.depth=0;var c=[],h=[f],p=function(e){if(s[e])return;var t=a.commits[e];t.depth=d.depth+1,h.push(t)};while(h.length){var d=h.pop();c.push(d),u.each(d.parents,p)}var v={},m=[];return u.forEach(c,function(e){if(v[e.id])return;v[e.id]=!0,m.push(e)}),m.sort(function(e,t){return t.depth-e.depth})},E.prototype.push=function(e){e=e||{};var t=this.refs.master,n=this.origin.refs.master;this.checkUpstreamOfSource(this,this.origin,n,t,l.str("git-error-origin-push-no-ff"));var r=this.getTargetGraphDifference(this.origin,this,n,t);r=u.filter(r,function(e){return!this.origin.refs[e.id]},this);var i=u.bind(function(e,t){var n=u.map(t,function(e){return this.origin.refs[e]},this);return this.origin.makeCommit(n,e)},this),s=u.bind(function(e,t){var n=i(e,t);return this.animationFactory.playCommitBirthPromiseAnimation(n,this.origin.gitVisuals)},this),o=f.defer(),a=o.promise;u.each(r,function(e){a=a.then(u.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.refs[e.id],n)},this)),a=a.then(function(){return s(e.id,e.parents)})},this),a=a.then(u.bind(function(){var e=t.get("target").get("id"),r=this.origin.refs[e];return this.origin.setTargetLocation(n,r),this.animationFactory.playRefreshAnimation(this.gitVisuals),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals)},this)),a=a.then(u.bind(function(){var e=this.getCommitFromRef(t),n=t.getRemoteBranchID();return this.setTargetLocation(this.refs[n],e),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),e.dontResolvePromise||this.animationQueue.thenFinish(a,o)},E.prototype.fetch=function(e){e=e||{};var t=this.refs["o/master"],n=this.origin.refs.master,r=this.branchCollection.filter(function(e){return e.getIsRemote()});console.log(r),u.each(r,function(e){this.checkUpstreamOfSource(this,this.origin,e,e.getRemoteBranchFromEngine(this.origin))},this);var i=this.getTargetGraphDifference(this,this.origin,t,n,e);if(i.length===0){this.command.addWarning(l.str("git-error-origin-fetch-uptodate"));var s=f.defer();return{deferred:s,chain:s.promise}}var o=u.bind(function(e,t){var n=u.map(t,function(e){return this.refs[e]},this);return this.makeCommit(n,e)},this),a=u.bind(function(e,t){var n=o(e,t);return this.animationFactory.playCommitBirthPromiseAnimation(n,this.gitVisuals)},this),c=f.defer(),h=c.promise;return u.each(i,function(e){h=h.then(u.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.origin.refs[e.id],t)},this)),h=h.then(function(){return a(e.id,e.parents)})},this),h=h.then(u.bind(function(){var e=n.get("target").get("id"),r=this.refs[e];return this.setTargetLocation(t,r),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),e.dontResolvePromise||this.animationQueue.thenFinish(h,c),{chain:h,deferred:c}},E.prototype.pull=function(e){e=e||{};var t=this.refs.master,n=this.refs["o/master"],r=this.fetch({dontResolvePromise:!0,dontThrowOnNoFetch:!0});e.isRebase?this.pullFinishWithRebase(r,t,n):this.pullFinishWithMerge(r,t,n)},E.prototype.pullFinishWithRebase=function(e,t,n){var r=e.chain,i=e.deferred;r=r.then(u.bind(function(){return this.animationFactory.getDelayedPromise(300)},this)),r=r.then(u.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(n),t)},this)),r=r.then(u.bind(function(){return e.dontResolvePromise=!0,this.rebase(n,t,e)},this)),this.animationQueue.thenFinish(r,i)},E.prototype.pullFinishWithMerge=function(e,t,n){var r=e.chain,i=e.deferred;r=r.then(u.bind(function(){return this.animationFactory.getDelayedPromise(300)},this)),r=r.then(u.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(n),t)},this)),r=r.then(u.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(t),n)},this)),r=r.then(u.bind(function(){return this.animationFactory.getDelayedPromise(700)},this)),r=r.then(u.bind(function(){var e=this.merge("o/master");return e?this.animationFactory.playCommitBirthPromiseAnimation(e,this.gitVisuals):this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),this.animationQueue.thenFinish(r,i)},E.prototype.fakeTeamwork=function(e,t){var n=u.bind(function(){var e=this.getUniqueID();return this.origin.receiveTeamwork(e,t,this.animationQueue)},this),r=u.bind(function(){var e=n();return this.animationFactory.playCommitBirthPromiseAnimation(e,this.origin.gitVisuals)},this),i=f.defer(),s=i.promise;u.each(u.range(e),function(e){s=s.then(function(){return r()})}),this.animationQueue.thenFinish(s,i)},E.prototype.receiveTeamwork=function(e,t,n){this.checkout(this.resolveID(t));var r=this.makeCommit([this.getCommitFromRef("HEAD")],e);return this.setTargetLocation(this.HEAD,r),r},E.prototype.cherrypick=function(e){var t=this.rebaseAltID(e.get("id")),n=this.makeCommit([this.getCommitFromRef("HEAD")],t);return this.setTargetLocation(this.HEAD,n),n},E.prototype.commit=function(e){e=e||{};var t=this.getCommitFromRef(this.HEAD),n=null;e.isAmend&&(t=this.resolveID("HEAD~1"),n=this.rebaseAltID(this.getCommitFromRef("HEAD").get("id")));var r=this.makeCommit([t],n);return this.getDetachedHead()&&this.mode==="git"&&this.command.addWarning(l.str("git-warning-detached")),this.setTargetLocation(this.HEAD,r),r},E.prototype.resolveName=function(e){var t=this.resolveID(e);return t.get("type")=="commit"?"commit "+t.get("id"):t.get("type")=="branch"?'branch "'+t.get("id")+'"':this.resolveName(t.get("target"))},E.prototype.resolveID=function(e){if(e===null||e===undefined)throw new Error("Dont call this with null / undefined");return typeof e!="string"?e:this.resolveStringRef(e)},E.prototype.resolveRelativeRef=function(e,t){var n=/([~\^])(\d*)/g,r;while(r=n.exec(t)){var i=e,s=r[2]?parseInt(r[2],10):1;if(r[1]=="^")i=e.getParent(s-1);else while(i&&s--)i=i.getParent(0);if(!i){var o=l.str("git-error-relative-ref",{commit:e.id,match:r[0]});throw new g({msg:o})}e=i}return e},E.prototype.resolveStringRef=function(e){e=this.crappyUnescape(e);if(this.refs[e])return this.refs[e];var t=null,n=null,r=/^([a-zA-Z0-9]+)(([~\^]\d*)*)/,i=r.exec(e);if(!i)throw new g({msg:l.str("git-error-exist",{ref:e})});t=i[1],n=i[2];if(!this.refs[t])throw new g({msg:l.str("git-error-exist",{ref:e})});var s=this.getCommitFromRef(t);return n&&(s=this.resolveRelativeRef(s,n)),s},E.prototype.getCommitFromRef=function(e){var t=this.resolveID(e);while(t.get("type")!=="commit")t=t.get("target");return t},E.prototype.getType=function(e){return this.resolveID(e).get("type")},E.prototype.setTargetLocation=function(e,t){if(this.getType(e)=="commit")return;e=this.getOneBeforeCommit(e),e.set("target",t)},E.prototype.updateBranchesFromSet=function(e){if(!e)throw new Error("need commit set here");var t=this.getUpstreamBranchSet(),n={};u.each(e,function(e,r){u.each(t[r],function(e){n[e.id]=!0})},this);var r=u.map(n,function(e,t){return t});return this.updateBranchesForHg(r)},E.prototype.updateAllBranchesForHgAndPlay=function(e){return this.updateBranchesForHg(e)&&this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},E.prototype.updateAllBranchesForHg=function(){var e=this.branchCollection.map(function(e){return e.get("id")});return this.updateBranchesForHg(e)},E.prototype.updateBranchesForHg=function(e){var t=!1;return u.each(e,function(e){var n=this.getCommitFromRef(e).get("id"),r=this.getBumpedID(n);if(!this.refs[r])return;t=!0;var i;while(this.refs[r])i=r,r=this.rebaseAltID(r);this.setTargetLocation(this.refs[e],this.refs[i])},this),t?!0:!1},E.prototype.updateCommitParentsForHgRebase=function(e){var t=!1;return u.each(e,function(e,n){var r=this.refs[n],i=r.checkForUpdatedParent(this);t=t||i},this),t},E.prototype.pruneTreeAndPlay=function(){return this.pruneTree()&&this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},E.prototype.pruneTree=function(){var e=this.getUpstreamBranchSet(),t=this.getUpstreamSet("HEAD");u.each(t,function(t,n){e[n]=!0});var n=[];this.commitCollection.each(function(t){e[t.get("id")]||n.push(t)},this);if(!n.length)return;return this.command.addWarning(l.str("hg-prune-tree")),u.each(n,function(e){e.removeFromParents(),this.commitCollection.remove(e);var t=e.get("id");this.refs[t]=undefined,delete this.refs[t];var n=e.get("visNode");n&&n.removeAll()},this),!0},E.prototype.getUpstreamBranchSet=function(){var e={},t=function(e,t){var n=!1;return u.each(e,function(e){e.id==t&&(n=!0)}),n},n=function(e){var t=[],n=[e];while(n.length){var r=n.pop();t.push(r.get("id")),r.get("parents")&&r.get("parents").length&&(n=n.concat(r.get("parents")))}return t};return this.branchCollection.each(function(r){var i=n(r.get("target"));u.each(i,function(n){e[n]=e[n]||[],t(e[n],r.get("id"))||e[n].push({obj:r,id:r.get("id")})})}),e},E.prototype.getUpstreamHeadSet=function(){var e=this.getUpstreamSet("HEAD"),t=this.getCommitFromRef("HEAD").get("id");return e[t]=!0,e},E.prototype.getOneBeforeCommit=function(e){var t=this.resolveID(e);return t===this.HEAD&&!this.getDetachedHead()&&(t=t.get("target")),t},E.prototype.scrapeBaseID=function(e){var t=/^C(\d+)/.exec(e);if(!t)throw new Error("regex failed on "+e);return"C"+t[1]},E.prototype.rebaseAltID=function(e){var t=this.getBumpedID(e);while(this.refs[t])t=this.getBumpedID(t);return t},E.prototype.getMostRecentBumpedID=function(e){var t=e,n;while(this.refs[t])n=t,t=this.getBumpedID(t);return n},E.prototype.getBumpedID=function(e){var t=[[/^C(\d+)[']{0,2}$/,function(e){return e[0]+"'"}],[/^C(\d+)[']{3}$/,function(e){return e[0].slice(0,-3)+"'^4"}],[/^C(\d+)['][\^](\d+)$/,function(e){return"C"+String(e[1])+"'^"+String(Number(e[2])+1)}]];for(var n=0;n<t.length;n++){var r=t[n][0],i=t[n][1],s=r.exec(e);if(s)return i(s)}throw new Error("could not modify the id "+e)},E.prototype.idSortFunc=function(e,t){var n=1e3,r=[[/^C(\d+)$/,function(e){return n*e[1]}],[/^C(\d+)([']+)$/,function(e){return n*e[1]+e[2].length}],[/^C(\d+)['][\^](\d+)$/,function(e){return n*e[1]+Number(e[2])}]],i=function(e){for(var t=0;t<r.length;t++){var n=r[t][0],i=r[t][1],s=n.exec(e);if(s)return i(s)}throw new Error("Could not parse commit ID "+e)};return i(e.get("id"))-i(t.get("id"))},E.prototype.dateSortFunc=function(e,t){var n=new Date(e.get("createTime")),r=new Date(t.get("createTime"));return n-r===0?E.prototype.idSortFunc(e,t):n-r},E.prototype.hgRebase=function(e,t){var n=f.defer(),r=this.rebase(e,t,{dontResolvePromise:!0,deferred:n});if(!r)return;var i=this.getCommonAncestor(e,t),s=this.getCommitFromRef(t),o=this.getDownstreamSet(t),a=this.getUpstreamSet(e),l=this.getUpstreamDiffSetFromSet(a,t),c=[];u.each(l,function(e,t){c.push(this.getDownstreamSet(t))},this);var h={};h[s.get("id")]=!0,u.each([l,o].concat(c),function(e){u.each(e,function(e,t){h[t]=!0})});var p={},d=this.getUpstreamBranchSet();u.each(h,function(e,t){u.each(d[t],function(e){p[e.id]=!0})});var v=u.map(p,function(e,t){return t});r=r.then(u.bind(function(){var e=this.updateCommitParentsForHgRebase(h);if(!e)return;return this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},this)),r=r.then(u.bind(function(){return this.updateAllBranchesForHgAndPlay(v)},this)),r=r.then(u.bind(function(){return this.pruneTreeAndPlay()},this)),this.animationQueue.thenFinish(r,n)},E.prototype.rebase=function(e,t,n){if(this.isUpstreamOf(e,t)){this.command.setResult(l.str("git-result-uptodate")),this.checkout(t);return}if(this.isUpstreamOf(t,e)){this.setTargetLocation(t,this.getCommitFromRef(e)),this.command.setResult(l.str("git-result-fastforward")),this.checkout(t);return}var r=this.getUpstreamSet(e),i=this.getUpstreamDiffFromSet(r,t);return this.rebaseFinish(i,r,e,t,n)},E.prototype.getUpstreamDiffSetFromSet=function(e,t){var n={};return u.each(this.getUpstreamDiffFromSet(e,t),function(e){n[e.get("id")]=!0}),n},E.prototype.getUpstreamDiffFromSet=function(e,t){var n=[],r=[this.getCommitFromRef(t)];while(r.length){var i=r.pop();if(e[i.get("id")])continue;n.push(i),n.sort(this.dateSortFunc),r=r.concat(i.get("parents"))}return n},E.prototype.rebaseInteractive=function(t,n,r){r=r||{};if(this.isUpstreamOf(n,t))throw new g({msg:l.str("git-result-nothing")});var i=this.getUpstreamSet(t),s=[],o=[this.getCommitFromRef(n)];while(o.length){var a=o.pop();if(i[a.get("id")])continue;s.push(a),o=o.concat(a.get("parents")),o.sort(this.dateSortFunc)}var c=[];u.each(s,function(e){e.get("parents").length==1&&c.push(e)});if(!c.length)throw new g({msg:l.str("git-error-rebase-none")});this.animationQueue.set("defer",!0);var h=f.defer();h.promise.then(u.bind(function(e){if(!e.length)throw new y({msg:l.str("git-result-nothing")});this.rebaseFinish(e,{},t,n)},this)).fail(u.bind(function(e){this.filterError(e),this.command.set("error",e),this.animationQueue.start()},this)).done();var p=e("../views/rebaseView").InteractiveRebaseView;new p({deferred:h,toRebase:c,aboveAll:r.aboveAll})},E.prototype.filterRebaseCommits=function(e,t){var n={};u.each(t,function(e,t){n[this.scrapeBaseID(t)]=!0},this);var r={};return u.filter(e,function(e){if(e.get("parents").length!==1)return!1;var t=this.scrapeBaseID(e.get("id"));return n[t]?!1:r[e.get("id")]?!1:(r[e.get("id")]=!0,!0)},this)},E.prototype.rebaseFinish=function(e,t,n,r,i){i=i||{};var s=this.resolveID(n),o=i.deferred||f.defer(),a=i.chain||o.promise,c=this.filterRebaseCommits(e,t);if(!c.length)throw new g({msg:l.str("git-error-rebase-none")});a=this.animationFactory.highlightEachWithPromise(a,c,s);var h=this.getCommitFromRef(n),p=u.bind(function(e){var t=this.rebaseAltID(e.get("id")),n=this.makeCommit([h],t);return h=n,this.animationFactory.playCommitBirthPromiseAnimation(n,this.gitVisuals)},this);return u.each(c,function(e){a=a.then(function(){return p(e)})},this),a=a.then(u.bind(function(){return this.resolveID(r).get("type")=="commit"?this.checkout(h):(this.setTargetLocation(r,h),this.checkout(r)),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),i.dontResolvePromise||this.animationQueue.thenFinish(a,o),a},E.prototype.merge=function(e){var t="HEAD";if(this.isUpstreamOf(e,t)||this.getCommitFromRef(e)===this.getCommitFromRef(t))throw new y({msg:l.str("git-result-uptodate")});if(this.isUpstreamOf(t,e)){this.setTargetLocation(t,this.getCommitFromRef(e)),this.command.setResult(l.str("git-result-fastforward"));return}var n=this.getCommitFromRef(t),r=this.getCommitFromRef(e),i=l.str("git-merge-msg",{target:this.resolveName(e),current:this.resolveName(t)}),s=this.makeCommit([n,r],null,{commitMessage:i});return this.setTargetLocation(t,s),s},E.prototype.checkout=function(e){var t=this.resolveID(e);if(t.get("id")==="HEAD")return;var n=t.get("type");n==="branch"&&t.getIsRemote()&&(t=this.getCommitFromRef(t.get("id")));if(n!=="branch"&&n!=="commit")throw new g({msg:l.str("git-error-options")});this.HEAD.set("target",t)},E.prototype.forceBranch=function(e,t){e=this.crappyUnescape(e),this.refs[e]||this.branch(e,t);var n=this.resolveID(e);if(n.get("type")!=="branch")throw new g({msg:l.str("git-error-options")});if(n.getIsRemote())throw new g({msg:l.str("git-error-remote-branch")});var r=this.getCommitFromRef(t);this.setTargetLocation(n,r)},E.prototype.branch=function(e,t){var n=this.getCommitFromRef(t);this.validateAndMakeBranch(e,n)},E.prototype.deleteBranch=function(e){var t=this.resolveID(e);if(t.get("type")!=="branch"||t.get("id")=="master"||this.HEAD.get("target")===t)throw new g({msg:l.str("git-error-branch")});var n=t;if(t.getIsRemote())throw new g({msg:l.str("git-error-remote-branch")});this.branchCollection.remove(n),this.refs[n.get("id")]=undefined,delete this.refs[n.get("id")],n.get("visBranch")&&n.get("visBranch").remove()},E.prototype.crappyUnescape=function(e){return e.replace(/&#x27;/g,"'").replace(/&#x2F;/g,"/")},E.prototype.filterError=function(e){if(!(e instanceof g||e instanceof y))throw e},E.prototype.externalRefresh=function(){this.animationQueue=new h({callback:function(){}}),this.animationFactory.refreshTree(this.animationQueue,this.gitVisuals),this.animationQueue.start()},E.prototype.dispatch=function(e,t){this.command=e;var n=e.get("vcs"),r=u.bind(function(){this.dispatchProcess(e,t)},this);this.handleModeChange(n,r)},E.prototype.dispatchProcess=function(e,t){var n=u.bind(function(){e.finishWith(t)},this);this.animationQueue=new h({callback:n});var r=e.get("vcs"),i=e.get("method").replace(/-/g,"");try{m.commands.execute(r,i,this,this.command)}catch(s){this.filterError(s),e.set("error",s),t.resolve();return}var o=this.animationQueue.get("defer")||this.animationQueue.get("promiseBased");!this.animationQueue.get("animations").length&&!o&&this.animationFactory.refreshTree(this.animationQueue,this.gitVisuals),o||this.animationQueue.start()},E.prototype.show=function(e){var t=this.getCommitFromRef(e);throw new y({msg:t.getShowEntry()})},E.prototype.status=function(){var e=[];if(this.getDetachedHead())e.push(l.str("git-status-detached"));else{var t=this.HEAD.get("target").get("id");e.push(l.str("git-status-onbranch",{branch:t}))}e.push("Changes to be committed:"),e.push(""),e.push("&nbsp;&nbsp;&nbsp; modified: cal/OskiCostume.stl"),e.push(""),e.push(l.str("git-status-readytocommit"));var n="";throw u.each(e,function(e){n+="# "+e+"\n"}),new y({msg:n})},E.prototype.logWithout=function(e,t){t=t.slice(1),this.log(e,this.getUpstreamSet(t))},E.prototype.log=function(e,t){t=t||{};var n=this.getCommitFromRef(e),r=[],i=[n],s={};while(i.length){var o=i.shift(0);if(s[o.get("id")]||t[o.get("id")])continue;s[o.get("id")]=!0,r.push(o),o.get("parents")&&o.get("parents").length&&(i=i.concat(o.get("parents")))}var a="";throw u.each(r,function(e){a+=e.getLogEntry()},this),new y({msg:a})},E.prototype.getCommonAncestor=function(e,t){if(this.isUpstreamOf(t,e))throw new Error("Dont use common ancestor if we are upstream!");var n=this.getUpstreamSet(e),r=[this.getCommitFromRef(t)];while(r.length){var i=r.pop();if(n[i.get("id")])return i;r=r.concat(i.get("parents"))}throw new Error("something has gone very wrong... two nodes arent connected!")},E.prototype.isUpstreamOf=function(e,t){e=this.getCommitFromRef(e);var n=this.getUpstreamSet(t);return n[e.get("id")]!==undefined},E.prototype.getDownstreamSet=function(e){var t=this.getCommitFromRef(e),n=t.get("id"),r=[t],i={};i[n]=!0;var s=function(e){i[e.get("id")]=!0,r.push(e)};while(r.length){var o=r.pop(),a=o.get("children");u.each(a,s)}return i},E.prototype.getUpstreamSet=function(e){var t=this.getCommitFromRef(e),n=t.get("id"),r=[t],i={};i[n]=!0;var s=function(e){i[e.get("id")]=!0,r.push(e)};while(r.length){var o=r.pop(),a=o.get("parents");u.each(a,s)}return i};var S=a.Model.extend({initialize:function(){if(!this.get("target"))throw new Error("must be initialized with target");if(!this.get("id"))throw new Error("must be given an id");this.set("type","general ref"),this.get("id")=="HEAD"&&(this.set("lastLastTarget",null),this.set("lastTarget",this.get("target")),this.on("change:target",this.targetChanged,this))},getIsRemote:function(){return!1},getName:function(){return this.get("id")},targetChanged:function(e,t,n){this.set("lastLastTarget",this.get("lastTarget")),this.set("lastTarget",t)},toString:function(){return"a "+this.get("type")+"pointing to "+String(this.get("target"))}}),x=S.extend({defaults:{visBranch:null,remoteTrackingBranchID:null,localBranchesThatTrackThis:null,remote:!1},initialize:function(){S.prototype.initialize.call(this),this.set("type","branch")},setRemoteTrackingBranchID:function(e){this.set("remoteTrackingBranchID",e)},getRemoteTrackingBranchID:function(){return this.get("remoteTrackingBranchID")},addLocalBranchThatTracksThis:function(e){this.setLocalBranchesThatTrackThis(this.getLocalBranchesThatTrackThis().concat([e]))},setLocalBranchesThatTrackThis:function(e){this.set("localBranchesThatTrackThis",e)},getLocalBranchesThatTrackThis:function(){return this.get("localBranchesThatTrackThis")||[]},getRemoteBranchID:function(){if(this.getIsRemote())throw new Error("I am a remote branch! dont try to get remote from me");return w+this.get("id")},getRemoteBranchFromEngine:function(e){return e.refs[this.getRemoteBranchID()]},getIsRemote:function(){return this.get("id").slice(0,2)===w}}),T=a.Model.extend({defaults:{type:"commit",children:null,parents:null,author:"Peter Cottle",createTime:null,commitMessage:null,visNode:null,gitVisuals:null},constants:{circularFields:["gitVisuals","visNode","children"]},getLogEntry:function(){return["Author: "+this.get("author"),"Date: "+this.get("createTime"),"<br/>",this.get("commitMessage"),"<br/>","Commit: "+this.get("id")].join("\n")+"\n"},getShowEntry:function(){return[this.getLogEntry(),"diff --git a/bigGameResults.html b/bigGameResults.html","--- bigGameResults.html","+++ bigGameResults.html","@@ 13,27 @@ Winner, Score","- Stanfurd, 14-7","+ Cal, 21-14"].join("\n")+"\n"},validateAtInit:function(){if(!this.get("id"))throw new Error("Need ID!!");this.get("createTime")||this.set("createTime",(new Date).toString()),this.get("commitMessage")||this.set("commitMessage",l.str("git-dummy-msg")),this.set("children",[]);if(!this.get("rootCommit"))if(!this.get("parents")||!this.get("parents").length)throw new Error("needs parents")},addNodeToVisuals:function(){var e=this.get("gitVisuals").addNode(this.get("id"),this);this.set("visNode",e)},addEdgeToVisuals:function(e){this.get("gitVisuals").addEdge(this.get("id"),e.get("id"))},getParent:function(e){return this&&this.attributes&&this.attributes.parents?this.attributes.parents[e]:null},removeFromParents:function(){u.each(this.get("parents"),function(e){e.removeChild(this)},this)},checkForUpdatedParent:function(e){var t=this.get("parents");if(t.length>1)return;var n=t[0],r=n.get("id"),i=e.getMostRecentBumpedID(r);if(r===i)return;var s=e.refs[i];this.removeFromParents(),this.set("parents",[s]),s.get("children").push(this);var o=this.get("visNode");o&&o.removeAllEdges();var u=this.get("gitVisuals");return u&&u.addEdge(this.get("id"),i),!0},removeChild:function(e){var t=[];u.each(this.get("children"),function(n){n!==e&&t.push(n)},this),this.set("children",t)},isMainParent:function(e){var t=this.get("parents").indexOf(e);return t===0},initialize:function(e){this.validateAtInit(),this.addNodeToVisuals(),u.each(this.get("parents"),function(e){e.get("children").push(this),this.addEdgeToVisuals(e)},this)}});n.GitEngine=E,n.Commit=T,n.Branch=x,n.Ref=S}),e.define("/src/js/visuals/animation/animationFactory.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=e("q"),l=e("./index").Animation,c=e("./index").PromiseAnimation,h=e("../../util/constants").GRAPHICS,p={},d=function(e,t){var n=h.defaultAnimationTime*1,r=n*2,i=function(){e.refreshTree(n),t.setBirth(),t.parentInFront(),e.visBranchesFront(),t.animateUpdatedPosition(r,"bounce"),t.animateOutgoingEdges(n)};return{animation:i,duration:Math.max(n,r)}},v=function(e,t){var n=h.defaultAnimationTime*.66,r=n*2;return{animation:function(){e.highlightTo(t,r,"easeInOut")},duration:r*1.5}};p.genCommitBirthAnimation=function(e,t,n){if(!e)throw new Error("Need animation queue to add closure to!");var r=t.get("visNode"),i=d(n,r);e.add(new l({closure:i.animation,duration:i.duration}))},p.genCommitBirthPromiseAnimation=function(e,t){var n=e.get("visNode");return new c(d(t,n))},p.highlightEachWithPromise=function(e,t,n){return u.each(t,function(t){e=e.then(u.bind(function(){return this.playHighlightPromiseAnimation(t,n)},this))},this),e},p.playCommitBirthPromiseAnimation=function(e,t){var n=this.genCommitBirthPromiseAnimation(e,t);return n.play(),n.getPromise()},p.playRefreshAnimationAndFinish=function(e,t){var n=new c({closure:function(){e.refreshTree()}});n.play(),t.thenFinish(n.getPromise())},p.genRefreshPromiseAnimation=function(e){return new c({closure:function(){e.refreshTree()}})},p.playRefreshAnimationSlow=function(e){var t=h.defaultAnimationTime;return this.playRefreshAnimation(e,t*2)},p.playRefreshAnimation=function(e,t){var n=new c({duration:t,closure:function(){e.refreshTree(t)}});return n.play(),n.getPromise()},p.refreshTree=function(e,t){e.add(new l({closure:function(){t.refreshTree()}}))},p.genHighlightPromiseAnimation=function(e,t){var n=t.get("visBranch")||t.get("visNode"),r=e.get("visNode");return new c(v(r,n))},p.playHighlightPromiseAnimation=function(e,t){var n=this.genHighlightPromiseAnimation(e,t);return n.play(),n.getPromise()},p.getDelayedPromise=function(e){var t=f.defer();return setTimeout(t.resolve,e||1e3),t.promise},p.delay=function(e,t){t=t||h.defaultAnimationTime,e.add(new l({closure:function(){},duration:t}))},n.AnimationFactory=p}),e.define("/src/js/visuals/animation/index.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("backbone"),l=e("../../util/constants").GLOBAL,c=e("../../util/constants").GRAPHICS,h=f.Model.extend({defaults:{duration:c.defaultAnimationTime,closure:null},validateAtInit:function(){if(!this.get("closure"))throw new Error("give me a closure!")},initialize:function(e){this.validateAtInit()},run:function(){this.get("closure")()}}),p=f.Model.extend({defaults:{animations:null,index:0,callback:null,defer:!1,promiseBased:!1},initialize:function(e){this.set("animations",[]),e.callback||console.warn("no callback")},thenFinish:function(e,t){e.then(u.bind(function(){this.finish()},this)),e.fail(function(e){throw console.log("uncaught error",e),e}),this.set("promiseBased",!0),t&&t.resolve()},add:function(e){if(!e instanceof h)throw new Error("Need animation not something else");this.get("animations").push(e)},start:function(){this.set("index",0),l.isAnimating=!0,this.next()},finish:function(){l.isAnimating=!1,this.get("callback")()},next:function(){var e=this.get("animations"),t=this.get("index");if(t>=e.length){this.finish();return}var n=e[t],r=n.get("duration");n.run(),this.set("index",t+1),setTimeout(u.bind(function(){this.next()},this),r)}}),d=f.Model.extend({defaults:{deferred:null,closure:null,duration:c.defaultAnimationTime},initialize:function(e){if(!e.closure&&!e.animation)throw new Error("need closure or animation");this.set("closure",e.closure||e.animation),this.set("duration",e.duration||this.get("duration")),this.set("deferred",e.deferred||a.defer())},getPromise:function(){return this.get("deferred").promise},play:function(){this.get("closure")(),setTimeout(u.bind(function(){this.get("deferred").resolve()},this),this.get("duration"))},then:function(e){return this.get("deferred").promise.then(e)}});d.fromAnimation=function(e){return new d({closure:e.get("closure"),duration:e.get("duration")})},n.Animation=h,n.PromiseAnimation=d,n.AnimationQueue=p}),e.define("/src/js/git/treeCompare.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a={};a.dispatchFromLevel=function(e,t){var n=e.goalTreeString;return a.dispatch(e,n,t)},a.onlyMasterCompared=function(e){var t=!0;switch(t){case!!e.compareOnlyMaster:case!!e.compareOnlyMasterHashAgnostic:case!!e.compareOnlyMasterHashAgnosticWithAsserts:return!0;default:return!1}},a.dispatch=function(e,t,n){var r=this.convertTreeSafe(t);n=this.convertTreeSafe(n);if(typeof r.originTree!=typeof n.originTree)return!1;var i=this.dispatchShallow(e,r,n);if(!i||!r.originTree)return i;var s=e.originCompare?e.originCompare:e;return i&&this.dispatchShallow(s,r.originTree,n.originTree)},a.dispatchShallow=function(e,t,n){var r=!0;switch(r){case!!e.compareOnlyMaster:return a.compareBranchWithinTrees(n,t,"master");case!!e.compareOnlyBranches:return a.compareAllBranchesWithinTrees(n,t);case!!e.compareAllBranchesHashAgnostic:return a.compareAllBranchesWithinTreesHashAgnostic(n,t);case!!e.compareOnlyMasterHashAgnostic:return a.compareBranchesWithinTreesHashAgnostic(n,t,["master"]);case!!e.compareOnlyMasterHashAgnosticWithAsserts:return a.compareBranchesWithinTreesHashAgnostic(n,t,["master"])&&a.evalAsserts(n,e.goalAsserts);default:return a.compareAllBranchesWithinTreesAndHEAD(n,t)}},a.compareAllBranchesWithinTreesAndHEAD=function(e,t){return e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),e.HEAD.target==t.HEAD.target&&this.compareAllBranchesWithinTrees(e,t)},a.compareAllBranchesWithinTrees=function(e,t){e=this.convertTreeSafe(e),t=this.convertTreeSafe(t);var n=u.extend({},e.branches,t.branches),r=!0;return u.uniq(n,function(n,i){r=r&&this.compareBranchWithinTrees(e,t,i)},this),r},a.compareBranchesWithinTrees=function(e,t,n){var r=!0;return u.each(n,function(n){r=r&&this.compareBranchWithinTrees(e,t,n)},this),r},a.compareBranchWithinTrees=function(e,t,n){e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]);var r=this.getRecurseCompare(e,t),i=e.branches[n],s=t.branches[n];return u.isEqual(i,s)&&r(e.commits[i.target],t.commits[s.target])},a.compareAllBranchesWithinTreesHashAgnostic=function(e,t){e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]);var n=u.extend({},e.branches,t.branches),r=[];return u.each(n,function(e,t){r.push(t)}),this.compareBranchesWithinTreesHashAgnostic(e,t,r)},a.compareBranchesWithinTreesHashAgnostic=function(e,t,n){e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]);var r=u.bind(function(e,t){return!e||!t?!1:(e=u.clone(e),t=u.clone(t),e.target=this.getBaseRef(e.target),t.target=this.getBaseRef(t.target),u.isEqual(e,t))},this),i=this.getRecurseCompareHashAgnostic(e,t),s=!0;return u.each(n,function(n){var o=e.branches[n],u=t.branches[n];s=s&&r(o,u)&&i(e.commits[o.target],t.commits[u.target])},this),s},a.evalAsserts=function(e,t){var n=!0;return u.each(t,function(t,r){n=n&&this.evalAssertsOnBranch(e,r,t)},this),n},a.evalAssertsOnBranch=function(e,t,n){e=this.convertTreeSafe(e);if(!e.branches[t])return!1;var r=e.branches[t],i=[r.target],s={};while(i.length){var o=i.pop();s[this.getBaseRef(o)]=this.getNumHashes(o),i=i.concat(e.commits[o].parents)}var a=!0;return u.each(n,function(e){try{a=a&&e(s)}catch(t){console.warn("error during assert",t),console.log(t),a=!1}}),a},a.getNumHashes=function(e){var t=[[/^C(\d+)([']{0,3})$/,function(e){return e[2]?e[2].length:0}],[/^C(\d+)['][\^](\d+)$/,function(e){return Number(e[2])}]];for(var n=0;n<t.length;n++){var r=t[n][0],i=t[n][1],s=r.exec(e);if(s)return i(s)}throw new Error("coudlnt parse ref "+e)},a.getBaseRef=function(e){var t=/^C(\d+)/,n=t.exec(e);if(!n)throw new Error("no regex matchy for "+e);return"C"+n[1]},a.getRecurseCompareHashAgnostic=function(e,t){var n=u.bind(function(e){return e?u.extend({},e,{id:this.getBaseRef(e.id),parents:null}):{}},this),r=function(e,t){return u.isEqual(n(e),n(t))};return this.getRecurseCompare(e,t,{isEqual:r})},a.getRecurseCompare=function(e,t,n){n=n||{};var r=function(i,s){var o=n.isEqual?n.isEqual(i,s):u.isEqual(i,s);if(!o)return!1;var a=Math.max(i.parents.length,s.parents.length);return u.each(u.range(a),function(n){var u=i.parents[n],a=s.parents[n],f=e.commits[u],l=t.commits[a];o=o&&r(f,l)},this),o};return r},a.convertTreeSafe=function(e){return typeof e=="string"?JSON.parse(unescape(e)):e},a.reduceTreeFields=function(e){var t=["parents","id","rootCommit"],n=["children","parents"],r=["target","id"],i=function(e,t,n,r){var i=e[t];u.each(i,function(i,s){var o={};u.each(n,function(e){i[e]!==undefined&&(o[e]=i[e])}),u.each(r,function(e){i[e]&&(i[e].sort(),o[e]=i[e])}),e[t][s]=o})};u.each(e,function(e){i(e,"commits",t,n),i(e,"branches",r),e.HEAD={target:e.HEAD.target,id:e.HEAD.id}})},a.compareTrees=function(e,t){return e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]),u.isEqual(e,t)},n.TreeCompare=a}),e.define("/src/js/commands/index.js",function(e,t,n,r,i,s,o){function g(e,t,n){this.vcs=e,this.method=t,this.rawOptions=n,this.supportedMap=v.getOptionMap()[e][t];if(this.supportedMap===undefined)throw new Error("No option map for "+t);this.generalArgs=[]}var u=e("underscore"),a=e("../intl"),f=e("../util/errors"),l=e("../git/commands"),c=e("../mercurial/commands"),h=f.CommandProcessError,p=f.CommandResult,d={git:l.commandConfig,hg:c.commandConfig},v={execute:function(e,t,n,r){if(!d[e][t])throw new Error("i dont have a command for "+t);var i=d[e][t];if(i.delegate)return this.delegateExecute(i,n,r);i.execute.call(this,n,r)},delegateExecute:function(e,t,n){var r=e.delegate.call(this,t,n);r.multiDelegate?u.each(r.multiDelegate,function(e){n.setOptionsMap(e.options||{}),n.setGeneralArgs(e.args||[]),d[e.vcs][e.name].execute.call(this,t,n)},this):(e=d[r.vcs][r.name],d[r.vcs][r.name].execute.call(this,t,n))},blankMap:function(){return{git:{},hg:{}}},getShortcutMap:function(){var e=this.blankMap();return this.loop(function(t,n,r){if(!t.sc)return;e[r][n]=t.sc},this),e},getOptionMap:function(){var e=this.blankMap();return this.loop(function(t,n,r){var i=t.displayName||n,s={};u.each(t.options,function(e){s[e]=!1}),e[r][i]=s}),e},getRegexMap:function(){var e=this.blankMap();return this.loop(function(t,n,r){var i=t.displayName||n;e[r][i]=t.regex}),e},getCommandsThatCount:function(){var e=this.blankMap();return this.loop(function(t,n,r){if(t.dontCountForGolf)return;e[r][n]=t.regex}),e},loop:function(e,t){u.each(d,function(t,n){u.each(t,function(t,r){e(t,r,n)})})}},m=function(e){var t,n,r;u.each(v.getRegexMap(),function(i,s){u.each(i,function(i,o){i.exec(e)&&(t=s,n=o,r=e.split(" ").slice(2).join(" "))})});if(!n)return!1;var i=new g(t,n,r),s=i.explodeAndSet();return{toSet:{generalArgs:i.generalArgs,supportedMap:i.supportedMap,error:s,vcs:t,method:n,options:r,eventName:"processGitCommand"}}};g.prototype.explodeAndSet=function(){var e=this.rawOptions.match(/('.*?'|".*?"|\S+)/g)||[];for(var t=0;t<e.length;t++){var n=e[t];if(n.slice(0,1)=="-"){if(this.supportedMap[n]===undefined)return new h({msg:a.str("option-not-supported",{option:n})});var r=[],i=t+1;while(i<e.length&&e[i].slice(0,1)!="-")r.push(e[i]),i+=1;t=i-1,this.supportedMap[n]=r}else this.generalArgs.push(n)}},n.commands=v,n.parse=m}),e.define("/src/js/git/commands.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../intl"),f=e("../util/errors"),l=f.CommandProcessError,c=f.GitError,h=f.Warning,p=f.CommandResult,d={commit:{sc:/^(gc|git ci)($|\s)/,regex:/^git +commit($|\s)/,options:["--amend","-a","-am","-m"],execute:function(e,t){var n=t.getOptionsMap();t.acceptNoGeneralArgs();if(n["-am"]&&(n["-a"]||n["-m"]))throw new c({msg:a.str("git-error-options")});var r=null,i=null;n["-a"]&&t.addWarning(a.str("git-warning-add")),n["-am"]&&(i=n["-am"],t.validateArgBounds(i,1,1,"-am"),r=i[0]),n["-m"]&&(i=n["-m"],t.validateArgBounds(i,1,1,"-m"),r=i[0]);var s=e.commit({isAmend:n["--amend"]});r&&(r=r.replace(/&quot;/g,'"').replace(/^"/g,"").replace(/"$/g,""),s.set("commitMessage",r));var o=e.animationFactory.playCommitBirthPromiseAnimation(s,e.gitVisuals);e.animationQueue.thenFinish(o)}},cherrypick:{displayName:"cherry-pick",regex:/^git +cherry-pick($|\s)/,execute:function(e,t){var n=t.getOptionsMap(),r=t.getGeneralArgs();t.validateArgBounds(r,1,Number.MAX_VALUE);var i=e.getUpstreamSet("HEAD"),s=u.map(r,function(t){var n=e.getCommitFromRef(t);if(i[n.get("id")])throw new c({msg:a.str("git-error-already-exists",{commit:n.get("id")})});return n},this);e.setupCherrypickChain(s)}},pull:{regex:/^git +pull($|\s)/,options:["--rebase"],execute:function(e,t){if(!e.hasOrigin())throw new c({msg:a.str("git-error-origin-required")});var n=t.getOptionsMap();t.acceptNoGeneralArgs(),e.pull({isRebase:n["--rebase"]})}},fakeTeamwork:{regex:/^git +fakeTeamwork($|\s)/,execute:function(e,t){var n=t.getGeneralArgs();if(!e.hasOrigin())throw new c({msg:a.str("git-error-origin-required")});t.validateArgBounds(n,0,2);var r=e.origin.refs[n[0]]?n[0]:"master",i=parseInt(n[0],10)||n[1]||1,s=e.origin.resolveID(r);if(s.get("type")!=="branch")throw new c({msg:a.str("git-error-options")});e.fakeTeamwork(i,r)}},clone:{regex:/^git +clone *?$/,execute:function(e,t){t.acceptNoGeneralArgs(),e.makeOrigin(e.printTree())}},fetch:{regex:/^git +fetch *?$/,execute:function(e,t){if(!e.hasOrigin())throw new c({msg:a.str("git-error-origin-required")});t.acceptNoGeneralArgs(),e.fetch()}},branch:{sc:/^(gb|git br)($|\s)/,regex:/^git +branch($|\s)/,options:["-d","-D","-f","-a","-r","--contains"],execute:function(e,t){var n=t.getOptionsMap(),r=t.getGeneralArgs(),i=null;if(n["-d"]||n["-D"]){var s=n["-d"]||n["-D"];t.validateArgBounds(s,1,Number.MAX_VALUE,"-d"),u.each(s,function(t){e.deleteBranch(t)});return}if(n["--contains"]){i=n["--contains"],t.validateArgBounds(i,1,1,"--contains"),e.printBranchesWithout(i[0]);return}if(n["-f"]){i=n["-f"],t.twoArgsImpliedHead(i,"-f"),e.forceBranch(i[0],i[1]);return}if(r.length===0){var o;n["-a"]?o=e.getBranches():n["-r"]?o=e.getRemoteBranches():o=e.getLocalBranches(),e.printBranches(o);return}t.twoArgsImpliedHead(r),e.branch(r[0],r[1])}},add:{dontCountForGolf:!0,sc:/^ga($|\s)/,regex:/^git +add($|\s)/,execute:function(){throw new p({msg:a.str("git-error-staging")})}},reset:{regex:/^git +reset($|\s)/,options:["--hard","--soft"],execute:function(e,t){var n=t.getOptionsMap(),r=t.getGeneralArgs();if(n["--soft"])throw new c({msg:a.str("git-error-staging")});n["--hard"]&&(t.addWarning(a.str("git-warning-hard")),r=r.concat(n["--hard"])),t.validateArgBounds(r,1,1);if(e.getDetachedHead())throw new c({msg:a.str("git-error-reset-detached")});e.reset(r[0])}},revert:{regex:/^git +revert($|\s)/,execute:function(e,t){var n=t.getGeneralArgs();t.validateArgBounds(n,1,Number.MAX_VALUE),e.revert(n)}},merge:{regex:/^git +merge($|\s)/,execute:function(e,t){var n=t.getGeneralArgs();t.validateArgBounds(n,1,1);var r=e.merge(n[0]);if(r===undefined){e.animationFactory.refreshTree(e.animationQueue,e.gitVisuals);return}e.animationFactory.genCommitBirthAnimation(e.animationQueue,r,e.gitVisuals)}},log:{dontCountForGolf:!0,regex:/^git +log($|\s)/,execute:function(e,t){var n=t.getGeneralArgs();if(n.length==2){if(n[1][0]!="^")throw new c({msg:a.str("git-error-options")});e.logWithout(n[0],n[1])}t.oneArgImpliedHead(n),e.log(n[0])}},show:{dontCountForGolf:!0,regex:/^git +show($|\s)/,execute:function(e,t){var n=t.getGeneralArgs();t.oneArgImpliedHead(n),e.show(n[0])}},rebase:{sc:/^gr($|\s)/,options:["-i","--aboveAll"],regex:/^git +rebase($|\s)/,execute:function(e,t){var n=t.getOptionsMap(),r=t.getGeneralArgs();if(n["-i"]){var i=n["-i"];t.twoArgsImpliedHead(i," -i"),e.rebaseInteractive(i[0],i[1],{aboveAll:!!n["--aboveAll"]});return}t.twoArgsImpliedHead(r),e.rebase(r[0],r[1])}},status:{dontCountForGolf:!0,sc:/^(gst|gs|git st)($|\s)/,regex:/^git +status($|\s)/,execute:function(e){e.status()}},checkout:{sc:/^(go|git co)($|\s)/,regex:/^git +checkout($|\s)/,options:["-b","-B","-"],execute:function(e,t){var n=t.getOptionsMap(),r=t.getGeneralArgs(),i=null;if(n["-b"]){if(r.length)throw new c({msg:a.str("git-error-options")});i=n["-b"],t.twoArgsImpliedHead(i,"-b");var s=e.validateBranchName(i[0]);e.branch(s,i[1]),e.checkout(s);return}if(n["-"]){var o=e.HEAD.get("lastLastTarget");if(!o)throw new c({msg:a.str("git-result-nothing")});e.HEAD.set("target",o);return}if(n["-B"]){i=n["-B"],t.twoArgsImpliedHead(i,"-B"),e.forceBranch(i[0],i[1]),e.checkout(i[0]);return}t.validateArgBounds(r,1,1),e.checkout(e.crappyUnescape(r[0]))}},push:{regex:/^git +push($|\s)/,execute:function(e,t){if(!e.hasOrigin())throw new c({msg:a.str("git-error-origin-required")});t.acceptNoGeneralArgs(),e.push()}}},v=[[/^(git help($|\s)|git$)/,function(){var t=[a.str("git-version"),"<br/>",a.str("git-usage"),u.escape(a.str("git-usage-command")),"<br/>",a.str("git-supported-commands"),"<br/>"],n=e("../commands").commands.getOptionMap().git;u.each(n,function(e,n){t.push("git "+n),u.each(e,function(e,n){t.push("	 "+n)},this)},this);var r=t.join("\n");throw r=r.replace(/\t/g,"&nbsp;&nbsp;&nbsp;"),new p({msg:r})}]];n.commandConfig=d,n.instantCommands=v}),e.define("/src/js/mercurial/commands.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../intl"),f=e("../git/commands"),l=e("../util/errors"),c=l.CommandProcessError,h=l.GitError,p=l.Warning,d=l.CommandResult,v={commit:{regex:/^hg +(commit|ci)($|\s)/,options:["--amend","-A","-m"],delegate:function(e,t){var n=t.getOptionsMap();return n["-A"]&&t.addWarning(a.str("hg-a-option")),{vcs:"git",name:"commit"}}},status:{regex:/^hg +(status|st) *$/,dontCountForGolf:!0,execute:function(e,t){throw new h({msg:a.str("hg-error-no-status")})}},"export":{regex:/^hg +export($|\s)/,dontCountForGolf:!0,delegate:function(e,t){return t.mapDotToHead(),{vcs:"git",name:"show"}}},graft:{regex:/^hg +graft($|\s)/,options:["-r"],delegate:function(e,t){t.appendOptionR();var n=t.getOptionsMap();if(!n["-r"])throw new h({msg:a.str("git-error-options")});return t.setGeneralArgs(n["-r"]),{vcs:"git",name:"cherrypick"}}},log:{regex:/^hg +log($|\s)/,options:["-f"],dontCountForGolf:!0,delegate:function(e,t){var n=t.getOptionsMap();t.acceptNoGeneralArgs();if(!n["-f"])throw new h({msg:a.str("hg-error-log-no-follow")});return t.mapDotToHead(),{vcs:"git",name:"log"}}},bookmark:{regex:/^hg (bookmarks|bookmark|book)($|\s)/,options:["-r","-f","-d"],delegate:function(e,t){var n=t.getOptionsMap(),r=t.getGeneralArgs(),i,s,o={vcs:"git"};if(n["-m"]&&n["-d"])throw new h({msg:"-m and -d are incompatible"});if(n["-d"]&&n["-r"])throw new h({msg:"-r is incompatible with -d"});if(n["-m"]&&n["-r"])throw new h({msg:"-r is incompatible with -m"});return r.length+(n["-r"]?n["-r"].length:0)+(n["-d"]?n["-d"].length:0)===0?(o.name="branch",o):(n["-d"]?(n["-D"]=n["-d"],delete n["-d"],o.name="branch"):n["-r"]?(i=n["-r"][1]||"",s=n["-r"][0]||"",o.name="branch",t.setGeneralArgs([i,s])):r.length>0?(t.setOptionsMap({"-b":[r[0]]}),o.name="checkout",t.setGeneralArgs([])):o.name="branch",o)}},rebase:{regex:/^hg +rebase($|\s+)/,options:["-d","-s","-b"],execute:function(e,t){var n=function(){throw new h({msg:a.str("git-error-options")})},r=t.getOptionsMap();r["-d"]&&r["-s"]||!r["-d"]&&!r["-s"],r["-b"]||(r["-b"]=["."]),t.setOptionsMap(r),t.mapDotToHead(),r=t.getOptionsMap();if(r["-d"]){var i=r["-d"][0]||n(),s=r["-b"][0];e.hgRebase(i,s)}else n()}},update:{regex:/^hg +(update|up)($|\s+)/,options:["-r"],delegate:function(e,t){return t.appendOptionR(),{vcs:"git",name:"checkout"}}},backout:{regex:/^hg +backout($|\s+)/,options:["-r"],delegate:function(e,t){return t.appendOptionR(),{vcs:"git",name:"revert"}}},histedit:{regex:/^hg +histedit($|\s+)/,delegate:function(e,t){var n=t.getGeneralArgs();return t.validateArgBounds(n,1,1),t.setOptionsMap({"-i":n}),t.setGeneralArgs([]),{vcs:"git",name:"rebase"}}},pull:{regex:/^hg +pull($|\s+)/,delegate:function(e,t){return{vcs:"git",name:"pull"}}},summary:{regex:/^hg +(summary|sum) *$/,delegate:function(e,t){return{vcs:"git",name:"branch"}}}};n.commandConfig=v}),e.define("/src/js/util/eventBaton.js",function(e,t,n,r,i,s,o){function a(){this.eventMap={}}var u=e("underscore");a.prototype.stealBaton=function(e,t,n){if(!e)throw new Error("need name");if(!t)throw new Error("need func!");var r=this.eventMap[e]||[];r.push({func:t,context:n}),this.eventMap[e]=r},a.prototype.sliceOffArgs=function(e,t){var n=[];for(var r=e;r<t.length;r++)n.push(t[r]);return n},a.prototype.trigger=function(e){var t=this.sliceOffArgs(1,arguments),n=this.eventMap[e];if(!n||!n.length){console.warn("no listeners for",e);return}var r=n.slice(-1)[0];r.func.apply(r.context,t)},a.prototype.getNumListeners=function(e){var t=this.eventMap[e]||[];return t.length},a.prototype.getListenersThrow=function(e){var t=this.eventMap[e];if(!t||!t.length)throw new Error("no one has that baton!"+e);return t},a.prototype.passBatonBackSoft=function(e,t,n,r){try{return this.passBatonBack(e,t,n,r)}catch(i){}},a.prototype.passBatonBack=function(e,t,n,r){var i=this.getListenersThrow(e),s;u.each(i,function(e,r){if(r===0)return;e.func===t&&e.context===n&&(s=r-1)},this);if(s===undefined)throw new Error("you are the last baton holder! or i didnt find you");var o=i[s];o.func.apply(o.context,r)},a.prototype.releaseBaton=function(e,t,n){var r=this.getListenersThrow(e),i=[],s=!1;u.each(r,function(e){e.func===t&&e.context===n?(s&&(console.warn("woah duplicates!!!"),console.log(r)),s=!0):i.push(e)},this);if(!s)throw console.log("did not find that function",t,n,e,arguments),console.log(this.eventMap),new Error("cant releasebaton if yu dont have it");this.eventMap[e]=i},n.EventBaton=a}),e.define("/src/js/views/rebaseView.js",function(e,t,n,r,i,s,o){var u=e("../util/errors").GitError,a=e("underscore"),f=e("q"),l=e("../util").isBrowser()?window.Backbone:e("backbone"),c=e("../views").ModalTerminal,h=e("../views").ContainedBase,p=e("../views").ConfirmCancelView,d=e("../views").LeftRightView,v=h.extend({tagName:"div",template:a.template($("#interactive-rebase-template").html()),initialize:function(e){this.deferred=e.deferred,this.rebaseMap={},this.entryObjMap={},this.options=e,this.rebaseEntries=new g,e.toRebase.reverse(),a.each(e.toRebase,function(e){var t=e.get("id");this.rebaseMap[t]=e,this.entryObjMap[t]=new m({id:t}),this.rebaseEntries.add(this.entryObjMap[t])},this),this.container=new c({title:"Interactive Rebase"}),this.render(),this.show(),e.aboveAll&&$("#canvasHolder").css("display","none")},restoreVis:function(){$("#canvasHolder").css("display","inherit")},confirm:function(){this.die(),this.options.aboveAll&&this.restoreVis();var e=[];this.$("ul.rebaseEntries li").each(function(t,n){e.push(n.id)});var t=[];a.each(e,function(e){this.entryObjMap[e].get("pick")&&t.unshift(this.rebaseMap[e])},this),t.reverse(),this.deferred.resolve(t),this.$el.html("")},render:function(){var e={num:a.keys(this.rebaseMap).length},t=this.container.getInsideElement();this.$el.html(this.template(e)),$(t).append(this.el);var n=this.$("ul.rebaseEntries");this.rebaseEntries.each(function(e){new y({el:n,model:e})},this),n.sortable({axis:"y",placeholder:"rebaseEntry transitionOpacity ui-state-highlight",appendTo:"parent"}),this.makeButtons()},cancel:function(){this.hide(),this.options.aboveAll&&this.restoreVis(),this.deferred.resolve([])},makeButtons:function(){var e=f.defer();e.promise.then(a.bind(function(){this.confirm()},this)).fail(a.bind(function(){this.cancel()},this)).done(),new p({destination:this.$(".confirmCancel"),deferred:e})}}),m=l.Model.extend({defaults:{pick:!0},toggle:function(){this.set("pick",!this.get("pick"))}}),g=l.Collection.extend({model:m}),y=l.View.extend({tagName:"li",template:a.template($("#interactive-rebase-entry-template").html()),toggle:function(){this.model.toggle(),this.listEntry.toggleClass("notPicked",!this.model.get("pick"))},initialize:function(e){this.render()},render:function(){var e=this.model.toJSON();this.$el.append(this.template(this.model.toJSON())),this.listEntry=this.$el.children(":last"),this.listEntry.delegate("#toggleButton","click",a.bind(function(){this.toggle()},this))}});n.InteractiveRebaseView=v}),e.define("/src/js/views/index.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?window.Backbone:e("backbone"),l=e("../app"),c=e("../intl"),h=e("../log"),p=e("../util/constants"),d=e("../util/keyboard").KeyboardListener,v=e("../util/errors").GitError,m=f.View.extend({getDestination:function(){return this.destination||this.container.getInsideElement()},tearDown:function(){this.$el.remove(),this.container&&this.container.tearDown()},renderAgain:function(e){e=e||this.template(this.JSON),this.$el.html(e)},render:function(e){this.renderAgain(e);var t=this.getDestination();$(t).append(this.el)}}),g=m.extend({resolve:function(){this.deferred.resolve()},reject:function(){this.deferred.reject()}}),y=m.extend({positive:function(){this.navEvents.trigger("positive")},exit:function(){this.navEvents.trigger("exit")},negative:function(){this.navEvents.trigger("negative")}}),b=m.extend({getAnimationTime:function(){return 700},show:function(){this.container.show()},hide:function(){this.container.hide()},die:function(){this.hide(),setTimeout(u.bind(function(){this.tearDown()},this),this.getAnimationTime()*1.1)}}),w=b.extend({tagName:"a",className:"generalButton uiButton",template:u.template($("#general-button").html()),events:{click:"click"},initialize:function(e){e=e||{},this.navEvents=e.navEvents||u.clone(f.Events),this.destination=e.destination,this.destination||(this.container=new T),this.JSON={buttonText:e.buttonText||"General Button",wantsWrapper:e.wantsWrapper!==undefined?e.wantsWrapper:!0},this.render(),this.container&&!e.wait&&this.show()},click:function(){this.clickFunc||(this.clickFunc=u.throttle(u.bind(this.sendClick,this),500)),this.clickFunc()},sendClick:function(){this.navEvents.trigger("click")}}),E=g.extend({tagName:"div",className:"confirmCancelView box horizontal justify",template:u.template($("#confirm-cancel-template").html()),events:{"click .confirmButton":"resolve","click .cancelButton":"reject"},initialize:function(e){if(!e.destination)throw new Error("needmore");this.destination=e.destination,this.deferred=e.deferred||a.defer(),this.JSON={confirm:e.confirm||"Confirm",cancel:e.cancel||"Cancel"},this.render()}}),S=y.extend({tagName:"div",className:"leftRightView box horizontal center",template:u.template($("#left-right-template").html()),events:{"click .left":"negative","click .exit":"exit","click .right":"positive"},exit:function(){this.pipeEvents.trigger("exit"),S.__super__.exit.apply(this)},positive:function(){this.pipeEvents.trigger("positive"),S.__super__.positive.apply(this)},negative:function(){this.pipeEvents.trigger("negative"),S.__super__.negative.apply(this)},initialize:function(e){if(!e.destination||!e.events)throw new Error("needmore");this.destination=e.destination,this.pipeEvents=e.events,this.navEvents=u.clone(f.Events),this.JSON={showLeft:e.showLeft===undefined?!0:e.showLeft,lastNav:e.lastNav===undefined?!1:e.lastNav},this.render()}}),x=f.View.extend({tagName:"div",className:"modalView box horizontal center transitionOpacityLinear",template:u.template($("#modal-view-template").html()),getAnimationTime:function(){return 700},initialize:function(e){this.shown=!1,this.render()},render:function(){this.$el.html(this.template({})),$("body").append(this.el)},stealKeyboard:function(){l.getEventBaton().stealBaton("keydown",this.onKeyDown,this),l.getEventBaton().stealBaton("keyup",this.onKeyUp,this),l.getEventBaton().stealBaton("windowFocus",this.onWindowFocus,this),l.getEventBaton().stealBaton("documentClick",this.onDocumentClick,this),$("#commandTextField").blur()},releaseKeyboard:function(){l.getEventBaton().releaseBaton("keydown",this.onKeyDown,this),l.getEventBaton().releaseBaton("keyup",this.onKeyUp,this),l.getEventBaton().releaseBaton("windowFocus",this.onWindowFocus,this),l.getEventBaton().releaseBaton("documentClick",this.onDocumentClick,this),l.getEventBaton().trigger("windowFocus")},onWindowFocus:function(e){},onDocumentClick:function(e){},onKeyDown:function(e){e.preventDefault()},onKeyUp:function(e){e.preventDefault()},show:function(){this.toggleZ(!0),s.nextTick(u.bind(function(){this.toggleShow(!0)},this))},hide:function(){this.toggleShow(!1),setTimeout(u.bind(function(){this.shown||this.toggleZ(!1)},this),this.getAnimationTime())},getInsideElement:function(){return this.$(".contentHolder")},toggleShow:function(e){if(this.shown===e)return;e?this.stealKeyboard():this.releaseKeyboard(),this.shown=e,this.$el.toggleClass("show",e)},toggleZ:function(e){this.$el.toggleClass("inFront",e)},tearDown:function(){this.$el.html(""),$("body")[0].removeChild(this.el)}}),T=b.extend({tagName:"div",className:"modalTerminal box flex1",template:u.template($("#terminal-window-template").html()),events:{"click div.inside":"onClick"},initialize:function(e){e=e||{},this.navEvents=e.events||u.clone(f.Events),this.container=new x,this.JSON={title:e.title||"Heed This Warning!"},this.render()},onClick:function(){this.navEvents.trigger("click")},getInsideElement:function(){return this.$(".inside")}}),N=b.extend({tagName:"div",template:u.template($("#modal-alert-template").html()),initialize:function(e){e=e||{},this.JSON={title:e.title||"Something to say",text:e.text||"Here is a paragraph",markdown:e.markdown},e.markdowns&&(this.JSON.markdown=e.markdowns.join("\n")),this.container=new T({title:"Alert!"}),this.render(),e.wait||this.show()},render:function(){var t=this.JSON.markdown?e("markdown").markdown.toHTML(this.JSON.markdown):this.template(this.JSON);N.__super__.render.apply(this,[t])}}),C=f.View.extend({initialize:function(e){e=e||{},this.deferred=e.deferred||a.defer(),this.modalAlert=new N(u.extend({},{markdown:"#you sure?"},e));var t=a.defer();this.buttonDefer=t,this.confirmCancel=new E({deferred:t,destination:this.modalAlert.getDestination()}),t.promise.then(this.deferred.resolve).fail(this.deferred.reject).done(u.bind(function(){this.close()},this)),this.navEvents=u.clone(f.Events),this.navEvents.on("positive",this.positive,this),this.navEvents.on("negative",this.negative,this),this.keyboardListener=new d({events:this.navEvents,aliasMap:{enter:"positive",esc:"negative"}}),e.wait||this.modalAlert.show()},positive:function(){this.buttonDefer.resolve()},negative:function(){this.buttonDefer.reject()},getAnimationTime:function(){return 700},show:function(){this.modalAlert.show()},hide:function(){this.modalAlert.hide()},getPromise:function(){return this.deferred.promise},close:function(){this.keyboardListener.mute(),this.modalAlert.die()}}),k=C.extend({initialize:function(t){t=t||{};var n=t.nextLevel?c.getName(t.nextLevel):"",r=c.getDialog(e("../dialogs/nextLevel"))[0].options.markdowns,i=r.join("\n");i=c.template(i,{numCommands:t.numCommands,best:t.best}),t.numCommands<=t.best?i=i+"\n\n"+c.str("finish-dialog-win"):i=i+"\n\n"+c.str("finish-dialog-lose",{best:t.best}),i+="\n\n",t.nextLevel?i+=c.str("finish-dialog-next",{nextLevel:n}):i+=c.str("finish-dialog-finished"),t=u.extend({},t,{markdown:i}),k.__super__.initialize.apply(this,[t])}}),L=f.View.extend({initialize:function(){this.$body=$("body"),l.getEvents().on("vcsModeChange",this.updateMode,this)},updateMode:function(e){e=e||{};var t=e.mode==="git";this.$body.toggleClass("gitMode",t),this.$body.toggleClass("hgMode",!t)}}),A=f.View.extend({initialize:function(e){this.grabBatons(),this.modalAlert=new N({markdowns:this.markdowns}),this.modalAlert.show()},grabBatons:function(){l.getEventBaton().stealBaton(this.eventBatonName,this.batonFired,this)},releaseBatons:function(){l.getEventBaton().releaseBaton(this.eventBatonName,this.batonFired,this)},finish:function(){this.releaseBatons(),this.modalAlert.die()}}),O=A.extend({initialize:function(e){this.eventBatonName="windowSizeCheck",this.markdowns=["## That window size is not supported :-/","Please resize your window back to a supported size","","(and of course, pull requests to fix this are appreciated :D)"],O.__super__.initialize.apply(this,[e])},batonFired:function(e){e.w>p.VIEWPORT.minWidth&&e.h>p.VIEWPORT.minHeight&&this.finish()}}),M=A.extend({initialize:function(e){if(!e||!e.level)throw new Error("need level");this.eventBatonName="zoomChange",this.markdowns=["## That zoom level of "+e.level+" is not supported :-/","Please zoom back to a supported zoom level with Ctrl + and Ctrl -","","(and of course, pull requests to fix this are appreciated :D)"],M.__super__.initialize.apply(this,[e])},batonFired:function(e){e<=p.VIEWPORT.maxZoom&&e>=p.VIEWPORT.minZoom&&this.finish()}}),_=m.extend({tagName:"div",className:"levelToolbarHolder",template:u.template($("#level-toolbar-template").html()),initialize:function(e){e=e||{},this.JSON={name:e.name||"Some level! (unknown name)"},this.beforeDestination=$($("#commandLineHistory div.toolbar")[0]),this.render(),e.wait||s.nextTick(u.bind(this.show,this))},getAnimationTime:function(){return 700},render:function(){var e=this.template(this.JSON);this.$el.html(e),this.beforeDestination.after(this.el)},die:function(){this.hide(),setTimeout(u.bind(function(){this.tearDown()},this),this.getAnimationTime())},hide:function(){this.$("div.toolbar").toggleClass("hidden",!0)},show:function(){this.$("div.toolbar").toggleClass("hidden",!1)}}),D=m.extend({tagName:"div",className:"helperBar transitionAll",template:u.template($("#helper-bar-template").html()),events:{"click a":"onClick"},onClick:function(e){var t=e.target,n=$(t).attr("data-id"),r="on"+n[0].toUpperCase()+n.slice(1)+"Click";this[r].call(this)},show:function(){this.$el.toggleClass("show",!0)},hide:function(){this.$el.toggleClass("show",!1),this.deferred&&this.deferred.resolve()},getItems:function(){return[]},setupChildren:function(){},fireCommand:function(e){l.getEventBaton().trigger("commandSubmitted",e)},showDeferMe:function(e){this.hide();var t=a.defer();e.deferred=t,t.promise.then(u.bind(function(){this.show()},this)),e.show()},onExitClick:function(){this.hide()},initialize:function(e){e=e||{},this.destination=$("body"),this.JSON={items:this.getItems()},this.render(),this.setupChildren(),e.wait||this.show()}}),P=D.extend({getItems:function(){return[{text:"Git Branching",id:"english"},{text:"日本語版リポジトリ",id:"japanese"},{text:"Git 브랜치 배우기",id:"korean"},{text:"学习Git分支",id:"chinese"},{text:"français",id:"french"},{icon:"signout",id:"exit"}]},fireCommand:function(){h.viewInteracted("intlSelect"),D.prototype.fireCommand.apply(this,arguments)},onJapaneseClick:function(){this.fireCommand("locale ja; levels"),this.hide()},onEnglishClick:function(){this.fireCommand("locale en_US; levels"),this.hide()},onKoreanClick:function(){this.fireCommand("locale ko; levels"),this.hide()},onFrenchClick:function(){this.fireCommand("locale fr_FR; levels"),this.hide()},onChineseClick:function(){this.fireCommand("locale zh_CN; levels"),this.hide()}}),H=D.extend({getItems:function(){return[{text:"Levels",id:"levels"},{text:"Reset",id:"reset"},{text:"Undo",id:"undo"},{text:"Objective",id:"objective"},{text:"Help",id:"help"},{icon:"signout",id:"exit"}]},fireCommand:function(){h.viewInteracted("helperBar"),D.prototype.fireCommand.apply(this,arguments)},onObjectiveClick:function(){this.fireCommand("objective")},onLevelsClick:function(){this.fireCommand("levels")},onResetClick:function(){this.fireCommand("reset")},onUndoClick:function(){this.fireCommand("undo")},onHelpClick:function(){this.fireCommand("help general; git help")}}),B=D.extend({getItems:function(){return[{icon:"question-sign",id:"commands"},{icon:"globe",id:"intl"},{newPageLink:!0,icon:"facebook",id:"fb",href:"https://www.facebook.com/LearnGitBranching"}]},onFbClick:function(){h.viewInteracted("fbPageLink")},onIntlClick:function(){this.showDeferMe(this.intlHelper),h.viewInteracted("openIntlBar")},onCommandsClick:function(){this.showDeferMe(this.commandsHelper),h.viewInteracted("openCommandsBar")},setupChildren:function(){this.commandsHelper=new H({wait:!0}),this.intlHelper=new P({wait:!0})}}),j=m.extend({tagName:"div",className:"canvasTerminalHolder box flex1",template:u.template($("#terminal-window-bare-template").html()),events:{"click div.wrapper":"onClick"},initialize:function(e){e=e||{},this.destination=$("body"),this.JSON={title:e.title||c.str("goal-to-reach"),text:e.text||c.str("hide-goal")},this.render(),this.inDom=!0,e.additionalClass&&this.$el.addClass(e.additionalClass)},getAnimationTime:function(){return 700},onClick:function(){this.die()},die:function(){this.slideOut(),this.inDom=!1,setTimeout(u.bind(function(){this.tearDown()},this),this.getAnimationTime())},slideOut:function(){this.slideToggle(!0)},slideIn:function(){this.slideToggle(!1)},slideToggle:function(e){this.$("div.terminal-window-holder").toggleClass("slideOut",e)},getCanvasLocation:function(){return this.$("div.inside")[0]}});n.BaseView=m,n.BackgroundView=L,n.GeneralButton=w,n.ModalView=x,n.ModalTerminal=T,n.ModalAlert=N,n.ContainedBase=b,n.ConfirmCancelView=E,n.LeftRightView=S,n.ZoomAlertWindow=M,n.ConfirmCancelTerminal=C,n.WindowSizeAlertWindow=O,n.MainHelperBar=B,n.CanvasTerminalHolder=j,n.LevelToolbar=_,n.NextLevelConfirm=k}),e.define("/src/js/util/keyboard.js",function(e,t,n,r,i,s,o){function c(e){this.events=e.events||u.clone(a.Events),this.aliasMap=e.aliasMap||{},e.wait||this.listen()}var u=e("underscore"),a=e("backbone"),f=e("../app"),l=function(e){var t={37:"left",38:"up",39:"right",40:"down",27:"esc",13:"enter"};return t[e]};c.prototype.listen=function(){if(this.listening)return;this.listening=!0,f.getEventBaton().stealBaton("docKeydown",this.keydown,this)},c.prototype.mute=function(){this.listening=!1,f.getEventBaton().releaseBaton("docKeydown",this.keydown,this)},c.prototype.keydown=function(e){var t=e.which||e.keyCode,n=l(t);if(n===undefined)return;this.fireEvent(n,e)},c.prototype.fireEvent=function(e,t){e=this.aliasMap[e]||e,this.events.trigger(e,t)},c.prototype.passEventBack=function(e){f.getEventBaton().passBatonBackSoft("docKeydown",this.keydown,this,[e])},n.KeyboardListener=c,n.mapKeycodeToKey=l}),e.define("/node_modules/markdown/package.json",function(e,t,n,r,i,s,o){t.exports={main:"./lib/index.js"}}),e.define("/node_modules/markdown/lib/index.js",function(e,t,n,r,i,s,o){n.markdown=e("./markdown"),n.parse=n.markdown.toHTML}),e.define("/node_modules/markdown/lib/markdown.js",function(e,t,n,r,i,s,o){(function(t){function r(){return"Markdown.mk_block( "+uneval(this.toString())+", "+uneval(this.trailing)+", "+uneval(this.lineNumber)+" )"}function i(){var t=e("util");return"Markdown.mk_block( "+t.inspect(this.toString())+", "+t.inspect(this.trailing)+", "+t.inspect(this.lineNumber)+" )"}function o(e){var t=0,n=-1;while((n=e.indexOf("\n",n+1))!==-1)t++;return t}function u(e,t){function i(e){this.len_after=e,this.name="close_"+t}var n=e+"_state",r=e=="strong"?"em_state":"strong_state";return function(s,o){if(this[n][0]==t)return this[n].shift(),[s.length,new i(s.length-t.length)];var u=this[r].slice(),a=this[n].slice();this[n].unshift(t);var f=this.processInline(s.substr(t.length)),l=f[f.length-1],c=this[n].shift();if(l instanceof i){f.pop();var h=s.length-l.len_after;return[h,[e].concat(f)]}return this[r]=u,this[n]=a,[t.length,t]}}function f(e){var t=e.split(""),n=[""],r=!1;while(t.length){var i=t.shift();switch(i){case" ":r?n[n.length-1]+=i:n.push("");break;case"'":case'"':r=!r;break;case"\\":i=t.shift();default:n[n.length-1]+=i}}return n}function h(e){return l(e)&&e.length>1&&typeof e[1]=="object"&&!l(e[1])?e[1]:undefined}function d(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function v(e){if(typeof e=="string")return d(e);var t=e.shift(),n={},r=[];e.length&&typeof e[0]=="object"&&!(e[0]instanceof Array)&&(n=e.shift());while(e.length)r.push(arguments.callee(e.shift()));var i="";for(var s in n)i+=" "+s+'="'+d(n[s])+'"';return t=="img"||t=="br"||t=="hr"?"<"+t+i+"/>":"<"+t+i+">"+r.join("")+"</"+t+">"}function m(e,t,n){var r;n=n||{};var i=e.slice(0);typeof n.preprocessTreeNode=="function"&&(i=n.preprocessTreeNode(i,t));var s=h(i);if(s){i[1]={};for(r in s)i[1][r]=s[r];s=i[1]}if(typeof i=="string")return i;switch(i[0]){case"header":i[0]="h"+i[1].level,delete i[1].level;break;case"bulletlist":i[0]="ul";break;case"numberlist":i[0]="ol";break;case"listitem":i[0]="li";break;case"para":i[0]="p";break;case"markdown":i[0]="html",s&&delete s.references;break;case"code_block":i[0]="pre",r=s?2:1;var o=["code"];o.push.apply(o,i.splice(r)),i[r]=o;break;case"inlinecode":i[0]="code";break;case"img":i[1].src=i[1].href,delete i[1].href;break;case"linebreak":i[0]="br";break;case"link":i[0]="a";break;case"link_ref":i[0]="a";var u=t[s.ref];if(!u)return s.original;delete s.ref,s.href=u.href,u.title&&(s.title=u.title),delete s.original;break;case"img_ref":i[0]="img";var u=t[s.ref];if(!u)return s.original;delete s.ref,s.src=u.href,u.title&&(s.title=u.title),delete s.original}r=1;if(s){for(var a in i[1])r=2;r===1&&i.splice(r,1)}for(;r<i.length;++r)i[r]=arguments.callee(i[r],t,n);return i}function g(e){var t=h(e)?2:1;while(t<e.length)typeof e[t]=="string"?t+1<e.length&&typeof e[t+1]=="string"?e[t]+=e.splice(t+1,1)[0]:++t:(arguments.callee(e[t]),++t)}var n=t.Markdown=function y(e){switch(typeof e){case"undefined":this.dialect=y.dialects.Gruber;break;case"object":this.dialect=e;break;default:if(!(e in y.dialects))throw new Error("Unknown Markdown dialect '"+String(e)+"'");this.dialect=y.dialects[e]}this.em_state=[],this.strong_state=[],this.debug_indent=""};t.parse=function(e,t){var r=new n(t);return r.toTree(e)},t.toHTML=function(n,r,i){var s=t.toHTMLTree(n,r,i);return t.renderJsonML(s)},t.toHTMLTree=function(t,n,r){typeof t=="string"&&(t=this.parse(t,n));var i=h(t),s={};i&&i.references&&(s=i.references);var o=m(t,s,r);return g(o),o};var s=n.mk_block=function(e,t,n){arguments.length==1&&(t="\n\n");var s=new String(e);return s.trailing=t,s.inspect=i,s.toSource=r,n!=undefined&&(s.lineNumber=n),s};n.prototype.split_blocks=function(t,n){var r=/([\s\S]+?)($|\n(?:\s*\n|$)+)/g,i=[],u,a=1;(u=/^(\s*\n)/.exec(t))!=null&&(a+=o(u[0]),r.lastIndex=u[0].length);while((u=r.exec(t))!==null)i.push(s(u[1],u[2],a)),a+=o(u[0]);return i},n.prototype.processBlock=function(t,n){var r=this.dialect.block,i=r.__order__;if("__call__"in r)return r.__call__.call(this,t,n);for(var s=0;s<i.length;s++){var o=r[i[s]].call(this,t,n);if(o)return(!l(o)||o.length>0&&!l(o[0]))&&this.debug(i[s],"didn't return a proper array"),o}return[]},n.prototype.processInline=function(t){return this.dialect.inline.__call__.call(this,String(t))},n.prototype.toTree=function(t,n){var r=t instanceof Array?t:this.split_blocks(t),i=this.tree;try{this.tree=n||this.tree||["markdown"];e:while(r.length){var s=this.processBlock(r.shift(),r);if(!s.length)continue e;this.tree.push.apply(this.tree,s)}return this.tree}finally{n&&(this.tree=i)}},n.prototype.debug=function(){var e=Array.prototype.slice.call(arguments);e.unshift(this.debug_indent),typeof print!="undefined"&&print.apply(print,e),typeof console!="undefined"&&typeof console.log!="undefined"&&console.log.apply(null,e)},n.prototype.loop_re_over_block=function(e,t,n){var r,i=t.valueOf();while(i.length&&(r=e.exec(i))!=null)i=i.substr(r[0].length),n.call(this,r);return i},n.dialects={},n.dialects.Gruber={block:{atxHeader:function(t,n){var r=t.match(/^(#{1,6})\s*(.*?)\s*#*\s*(?:\n|$)/);if(!r)return undefined;var i=["header",{level:r[1].length}];return Array.prototype.push.apply(i,this.processInline(r[2])),r[0].length<t.length&&n.unshift(s(t.substr(r[0].length),t.trailing,t.lineNumber+2)),[i]},setextHeader:function(t,n){var r=t.match(/^(.*)\n([-=])\2\2+(?:\n|$)/);if(!r)return undefined;var i=r[2]==="="?1:2,o=["header",{level:i},r[1]];return r[0].length<t.length&&n.unshift(s(t.substr(r[0].length),t.trailing,t.lineNumber+2)),[o]},code:function(t,n){var r=[],i=/^(?: {0,3}\t| {4})(.*)\n?/,o;if(!t.match(i))return undefined;e:do{var u=this.loop_re_over_block(i,t.valueOf(),function(e){r.push(e[1])});if(u.length){n.unshift(s(u,t.trailing));break e}if(!n.length)break e;if(!n[0].match(i))break e;r.push(t.trailing.replace(/[^\n]/g,"").substring(2)),t=n.shift()}while(!0);return[["code_block",r.join("\n")]]},horizRule:function(t,n){var r=t.match(/^(?:([\s\S]*?)\n)?[ \t]*([-_*])(?:[ \t]*\2){2,}[ \t]*(?:\n([\s\S]*))?$/);if(!r)return undefined;var i=[["hr"]];return r[1]&&i.unshift.apply(i,this.processBlock(r[1],[])),r[3]&&n.unshift(s(r[3])),i},lists:function(){function o(t){return new RegExp("(?:^("+i+"{0,"+t+"} {0,3})("+e+")\\s+)|"+"(^"+i+"{0,"+(t-1)+"}[ ]{0,4})")}function u(e){return e.replace(/ {0,3}\t/g,"    ")}function a(e,t,n,r){if(t){e.push(["para"].concat(n));return}var i=e[e.length-1]instanceof Array&&e[e.length-1][0]=="para"?e[e.length-1]:e;r&&e.length>1&&n.unshift(r);for(var s=0;s<n.length;s++){var o=n[s],u=typeof o=="string";u&&i.length>1&&typeof i[i.length-1]=="string"?i[i.length-1]+=o:i.push(o)}}function f(e,t){var n=new RegExp("^("+i+"{"+e+"}.*?\\n?)*$"),r=new RegExp("^"+i+"{"+e+"}","gm"),o=[];while(t.length>0){if(n.exec(t[0])){var u=t.shift(),a=u.replace(r,"");o.push(s(a,u.trailing,u.lineNumber))}break}return o}function l(e,t,n){var r=e.list,i=r[r.length-1];if(i[1]instanceof Array&&i[1][0]=="para")return;if(t+1==n.length)i.push(["para"].concat(i.splice(1)));else{var s=i.pop();i.push(["para"].concat(i.splice(1)),s)}}var e="[*+-]|\\d+\\.",t=/[*+-]/,n=/\d+\./,r=new RegExp("^( {0,3})("+e+")[ 	]+"),i="(?: {0,3}\\t| {4})";return function(e,n){function s(e){var n=t.exec(e[2])?["bulletlist"]:["numberlist"];return h.push({list:n,indent:e[1]}),n}var i=e.match(r);if(!i)return undefined;var h=[],p=s(i),d,v=!1,m=[h[0].list],g;e:for(;;){var y=e.split(/(?=\n)/),b="";for(var w=0;w<y.length;w++){var E="",S=y[w].replace(/^\n/,function(e){return E=e,""}),x=o(h.length);i=S.match(x);if(i[1]!==undefined){b.length&&(a(d,v,this.processInline(b),E),v=!1,b=""),i[1]=u(i[1]);var T=Math.floor(i[1].length/4)+1;if(T>h.length)p=s(i),d.push(p),d=p[1]=["listitem"];else{var N=!1;for(g=0;g<h.length;g++){if(h[g].indent!=i[1])continue;p=h[g].list,h.splice(g+1),N=!0;break}N||(T++,T<=h.length?(h.splice(T),p=h[T-1].list):(p=s(i),d.push(p))),d=["listitem"],p.push(d)}E=""}S.length>i[0].length&&(b+=E+S.substr(i[0].length))}b.length&&(a(d,v,this.processInline(b),E),v=!1,b="");var C=f(h.length,n);C.length>0&&(c(h,l,this),d.push.apply(d,this.toTree(C,[])));var k=n[0]&&n[0].valueOf()||"";if(k.match(r)||k.match(/^ /)){e=n.shift();var L=this.dialect.block.horizRule(e,n);if(L){m.push.apply(m,L);break}c(h,l,this),v=!0;continue e}break}return m}}(),blockquote:function(t,n){if(!t.match(/^>/m))return undefined;var r=[];if(t[0]!=">"){var i=t.split(/\n/),s=[];while(i.length&&i[0][0]!=">")s.push(i.shift());t=i.join("\n"),r.push.apply(r,this.processBlock(s.join("\n"),[]))}while(n.length&&n[0][0]==">"){var o=n.shift();t=new String(t+t.trailing+o),t.trailing=o.trailing}var u=t.replace(/^> ?/gm,""),a=this.tree;return r.push(this.toTree(u,["blockquote"])),r},referenceDefn:function(t,n){var r=/^\s*\[(.*?)\]:\s*(\S+)(?:\s+(?:(['"])(.*?)\3|\((.*?)\)))?\n?/;if(!t.match(r))return undefined;h(this.tree)||this.tree.splice(1,0,{});var i=h(this.tree);i.references===undefined&&(i.references={});var o=this.loop_re_over_block(r,t,function(e){e[2]&&e[2][0]=="<"&&e[2][e[2].length-1]==">"&&(e[2]=e[2].substring(1,e[2].length-1));var t=i.references[e[1].toLowerCase()]={href:e[2]};e[4]!==undefined?t.title=e[4]:e[5]!==undefined&&(t.title=e[5])});return o.length&&n.unshift(s(o,t.trailing)),[]},para:function(t,n){return[["para"].concat(this.processInline(t))]}}},n.dialects.Gruber.inline={__oneElement__:function(t,n,r){var i,s,o=0;n=n||this.dialect.inline.__patterns__;var u=new RegExp("([\\s\\S]*?)("+(n.source||n)+")");i=u.exec(t);if(!i)return[t.length,t];if(i[1])return[i[1].length,i[1]];var s;return i[2]in this.dialect.inline&&(s=this.dialect.inline[i[2]].call(this,t.substr(i.index),i,r||[])),s=s||[i[2].length,i[2]],s},__call__:function(t,n){function s(e){typeof e=="string"&&typeof r[r.length-1]=="string"?r[r.length-1]+=e:r.push(e)}var r=[],i;while(t.length>0)i=this.dialect.inline.__oneElement__.call(this,t,n,r),t=t.substr(i.shift()),c(i,s);return r},"]":function(){},"}":function(){},"\\":function(t){return t.match(/^\\[\\`\*_{}\[\]()#\+.!\-]/)?[2,t[1]]:[1,"\\"]},"![":function(t){var n=t.match(/^!\[(.*?)\][ \t]*\([ \t]*(\S*)(?:[ \t]+(["'])(.*?)\3)?[ \t]*\)/);if(n){n[2]&&n[2][0]=="<"&&n[2][n[2].length-1]==">"&&(n[2]=n[2].substring(1,n[2].length-1)),n[2]=this.dialect.inline.__call__.call(this,n[2],/\\/)[0];var r={alt:n[1],href:n[2]||""};return n[4]!==undefined&&(r.title=n[4]),[n[0].length,["img",r]]}return n=t.match(/^!\[(.*?)\][ \t]*\[(.*?)\]/),n?[n[0].length,["img_ref",{alt:n[1],ref:n[2].toLowerCase(),original:n[0]}]]:[2,"!["]},"[":function b(e){var t=String(e),r=n.DialectHelpers.inline_until_char.call(this,e.substr(1),"]");if(!r)return[1,"["];var i=1+r[0],s=r[1],b,o;e=e.substr(i);var u=e.match(/^\s*\([ \t]*(\S+)(?:[ \t]+(["'])(.*?)\2)?[ \t]*\)/);if(u){var a=u[1];i+=u[0].length,a&&a[0]=="<"&&a[a.length-1]==">"&&(a=a.substring(1,a.length-1));if(!u[3]){var f=1;for(var l=0;l<a.length;l++)switch(a[l]){case"(":f++;break;case")":--f==0&&(i-=a.length-l,a=a.substring(0,l))}}return a=this.dialect.inline.__call__.call(this,a,/\\/)[0],o={href:a||""},u[3]!==undefined&&(o.title=u[3]),b=["link",o].concat(s),[i,b]}return u=e.match(/^\s*\[(.*?)\]/),u?(i+=u[0].length,o={ref:(u[1]||String(s)).toLowerCase(),original:t.substr(0,i)},b=["link_ref",o].concat(s),[i,b]):s.length==1&&typeof s[0]=="string"?(o={ref:s[0].toLowerCase(),original:t.substr(0,i)},b=["link_ref",o,s[0]],[i,b]):[1,"["]},"<":function(t){var n;return(n=t.match(/^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\.[a-zA-Z]+))>/))!=null?n[3]?[n[0].length,["link",{href:"mailto:"+n[3]},n[3]]]:n[2]=="mailto"?[n[0].length,["link",{href:n[1]},n[1].substr("mailto:".length)]]:[n[0].length,["link",{href:n[1]},n[1]]]:[1,"<"]},"`":function(t){var n=t.match(/(`+)(([\s\S]*?)\1)/);return n&&n[2]?[n[1].length+n[2].length,["inlinecode",n[3]]]:[1,"`"]},"  \n":function(t){return[3,["linebreak"]]}},n.dialects.Gruber.inline["**"]=u("strong","**"),n.dialects.Gruber.inline.__=u("strong","__"),n.dialects.Gruber.inline["*"]=u("em","*"),n.dialects.Gruber.inline._=u("em","_"),n.buildBlockOrder=function(e){var t=[];for(var n in e){if(n=="__order__"||n=="__call__")continue;t.push(n)}e.__order__=t},n.buildInlinePatterns=function(e){var t=[];for(var n in e){if(n.match(/^__.*__$/))continue;var r=n.replace(/([\\.*+?|()\[\]{}])/g,"\\$1").replace(/\n/,"\\n");t.push(n.length==1?r:"(?:"+r+")")}t=t.join("|"),e.__patterns__=t;var i=e.__call__;e.__call__=function(e,n){return n!=undefined?i.call(this,e,n):i.call(this,e,t)}},n.DialectHelpers={},n.DialectHelpers.inline_until_char=function(e,t){var n=0,r=[];for(;;){if(e[n]==t)return n++,[n,r];if(n>=e.length)return null;res=this.dialect.inline.__oneElement__.call(this,e.substr(n)),n+=res[0],r.push.apply(r,res.slice(1))}},n.subclassDialect=function(e){function t(){}function n(){}return t.prototype=e.block,n.prototype=e.inline,{block:new t,inline:new n}},n.buildBlockOrder(n.dialects.Gruber.block),n.buildInlinePatterns(n.dialects.Gruber.inline),n.dialects.Maruku=n.subclassDialect(n.dialects.Gruber),n.dialects.Maruku.processMetaHash=function(t){var n=f(t),r={};for(var i=0;i<n.length;++i)if(/^#/.test(n[i]))r.id=n[i].substring(1);else if(/^\./.test(n[i]))r["class"]?r["class"]=r["class"]+n[i].replace(/./," "):r["class"]=n[i].substring(1);else if(/\=/.test(n[i])){var s=n[i].split(/\=/);r[s[0]]=s[1]}return r},n.dialects.Maruku.block.document_meta=function(t,n){if(t.lineNumber>1)return undefined;if(!t.match(/^(?:\w+:.*\n)*\w+:.*$/))return undefined;h(this.tree)||this.tree.splice(1,0,{});var r=t.split(/\n/);for(p in r){var i=r[p].match(/(\w+):\s*(.*)$/),s=i[1].toLowerCase(),o=i[2];this.tree[1][s]=o}return[]},n.dialects.Maruku.block.block_meta=function(t,n){var r=t.match(/(^|\n) {0,3}\{:\s*((?:\\\}|[^\}])*)\s*\}$/);if(!r)return undefined;var i=this.dialect.processMetaHash(r[2]),s;if(r[1]===""){var o=this.tree[this.tree.length-1];s=h(o);if(typeof o=="string")return undefined;s||(s={},o.splice(1,0,s));for(a in i)s[a]=i[a];return[]}var u=t.replace(/\n.*$/,""),f=this.processBlock(u,[]);s=h(f[0]),s||(s={},f[0].splice(1,0,s));for(a in i)s[a]=i[a];return f},n.dialects.Maruku.block.definition_list=function(t,n){var r=/^((?:[^\s:].*\n)+):\s+([\s\S]+)$/,i=["dl"],s;if(!(a=t.match(r)))return undefined;var o=[t];while(n.length&&r.exec(n[0]))o.push(n.shift());for(var u=0;u<o.length;++u){var a=o[u].match(r),f=a[1].replace(/\n$/,"").split(/\n/),l=a[2].split(/\n:\s+/);for(s=0;s<f.length;++s)i.push(["dt",f[s]]);for(s=0;s<l.length;++s)i.push(["dd"].concat(this.processInline(l[s].replace(/(\n)\s+/,"$1"))))}return[i]},n.dialects.Maruku.inline["{:"]=function(t,n,r){if(!r.length)return[2,"{:"];var i=r[r.length-1];if(typeof i=="string")return[2,"{:"];var s=t.match(/^\{:\s*((?:\\\}|[^\}])*)\s*\}/);if(!s)return[2,"{:"];var o=this.dialect.processMetaHash(s[1]),u=h(i);u||(u={},i.splice(1,0,u));for(var a in o)u[a]=o[a];return[s[0].length,""]},n.buildBlockOrder(n.dialects.Maruku.block),n.buildInlinePatterns(n.dialects.Maruku.inline);var l=Array.isArray||function(e){return Object.prototype.toString.call(e)=="[object Array]"},c;Array.prototype.forEach?c=function(e,t,n){return e.forEach(t,n)}:c=function(e,t,n){for(var r=0;r<e.length;r++)t.call(n||e,e[r],r,e)},t.renderJsonML=function(e,t){t=t||{},t.root=t.root||!1;var n=[];if(t.root)n.push(v(e));else{e.shift(),e.length&&typeof e[0]=="object"&&!(e[0]instanceof Array)&&e.shift();while(e.length)n.push(v(e.shift()))}return n.join("\n\n")}})(function(){return typeof n=="undefined"?(window.markdown={},window.markdown):n}())}),e.define("util",function(e,t,n,r,i,s,o){function a(e){return e instanceof Array||Array.isArray(e)||e&&e!==Object.prototype&&a(e.__proto__)}function f(e){return e instanceof RegExp||typeof e=="object"&&Object.prototype.toString.call(e)==="[object RegExp]"}function l(e){if(e instanceof Date)return!0;if(typeof e!="object")return!1;var t=Date.prototype&&v(Date.prototype),n=e.__proto__&&v(e.__proto__);return JSON.stringify(n)===JSON.stringify(t)}function c(e){return e<10?"0"+e.toString(10):e.toString(10)}function p(){var e=new Date,t=[c(e.getHours()),c(e.getMinutes()),c(e.getSeconds())].join(":");return[e.getDate(),h[e.getMonth()],t].join(" ")}var u=e("events");n.isArray=a,n.isDate=function(e){return Object.prototype.toString.call(e)==="[object Date]"},n.isRegExp=function(e){return Object.prototype.toString.call(e)==="[object RegExp]"},n.print=function(){},n.puts=function(){},n.debug=function(){},n.inspect=function(e,t,r,i){function u(e,r){if(e&&typeof e.inspect=="function"&&e!==n&&(!e.constructor||e.constructor.prototype!==e))return e.inspect(r);switch(typeof e){case"undefined":return o("undefined","undefined");case"string":var i="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return o(i,"string");case"number":return o(""+e,"number");case"boolean":return o(""+e,"boolean")}if(e===null)return o("null","null");var c=d(e),h=t?v(e):c;if(typeof e=="function"&&h.length===0){if(f(e))return o(""+e,"regexp");var p=e.name?": "+e.name:"";return o("[Function"+p+"]","special")}if(l(e)&&h.length===0)return o(e.toUTCString(),"date");var m,g,y;a(e)?(g="Array",y=["[","]"]):(g="Object",y=["{","}"]);if(typeof e=="function"){var b=e.name?": "+e.name:"";m=f(e)?" "+e:" [Function"+b+"]"}else m="";l(e)&&(m=" "+e.toUTCString());if(h.length===0)return y[0]+m+y[1];if(r<0)return f(e)?o(""+e,"regexp"):o("[Object]","special");s.push(e);var w=h.map(function(t){var n,i;e.__lookupGetter__&&(e.__lookupGetter__(t)?e.__lookupSetter__(t)?i=o("[Getter/Setter]","special"):i=o("[Getter]","special"):e.__lookupSetter__(t)&&(i=o("[Setter]","special"))),c.indexOf(t)<0&&(n="["+t+"]"),i||(s.indexOf(e[t])<0?(r===null?i=u(e[t]):i=u(e[t],r-1),i.indexOf("\n")>-1&&(a(e)?i=i.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):i="\n"+i.split("\n").map(function(e){return"   "+e}).join("\n"))):i=o("[Circular]","special"));if(typeof n=="undefined"){if(g==="Array"&&t.match(/^\d+$/))return i;n=JSON.stringify(""+t),n.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(n=n.substr(1,n.length-2),n=o(n,"name")):(n=n.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),n=o(n,"string"))}return n+": "+i});s.pop();var E=0,S=w.reduce(function(e,t){return E++,t.indexOf("\n")>=0&&E++,e+t.length+1},0);return S>50?w=y[0]+(m===""?"":m+"\n ")+" "+w.join(",\n  ")+" "+y[1]:w=y[0]+m+" "+w.join(", ")+" "+y[1],w}var s=[],o=function(e,t){var n={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},r={special:"cyan",number:"blue","boolean":"yellow","undefined":"grey","null":"bold",string:"green",date:"magenta",regexp:"red"}[t];return r?"["+n[r][0]+"m"+e+"["+n[r][1]+"m":e};return i||(o=function(e,t){return e}),u(e,typeof r=="undefined"?2:r)};var h=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];n.log=function(e){},n.pump=null;var d=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t},v=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.hasOwnProperty.call(e,n)&&t.push(n);return t},m=Object.create||function(e,t){var n;if(e===null)n={__proto__:null};else{if(typeof e!="object")throw new TypeError("typeof prototype["+typeof e+"] != 'object'");var r=function(){};r.prototype=e,n=new r,n.__proto__=e}return typeof t!="undefined"&&Object.defineProperties&&Object.defineProperties(n,t),n};n.inherits=function(e,t){e.super_=t,e.prototype=m(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})};var g=/%[sdj%]/g;n.format=function(e){if(typeof e!="string"){var t=[];for(var r=0;r<arguments.length;r++)t.push(n.inspect(arguments[r]));return t.join(" ")}var r=1,i=arguments,s=i.length,o=String(e).replace(g,function(e){if(e==="%%")return"%";if(r>=s)return e;switch(e){case"%s":return String(i[r++]);case"%d":return Number(i[r++]);case"%j":return JSON.stringify(i[r++]);default:return e}});for(var u=i[r];r<s;u=i[++r])u===null||typeof u!="object"?o+=" "+u:o+=" "+n.inspect(u);return o}}),e.define("events",function(e,t,n,r,i,s,o){function f(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;n++)if(t===e[n])return n;return-1}s.EventEmitter||(s.EventEmitter=function(){});var u=n.EventEmitter=s.EventEmitter,a=typeof Array.isArray=="function"?Array.isArray:function(e){return Object.prototype.toString.call(e)==="[object Array]"},l=10;u.prototype.setMaxListeners=function(e){this._events||(this._events={}),this._events.maxListeners=e},u.prototype.emit=function(e){if(e==="error")if(!this._events||!this._events.error||a(this._events.error)&&!this._events.error.length)throw arguments[1]instanceof Error?arguments[1]:new Error("Uncaught, unspecified 'error' event.");if(!this._events)return!1;var t=this._events[e];if(!t)return!1;if(typeof t=="function"){switch(arguments.length){case 1:t.call(this);break;case 2:t.call(this,arguments[1]);break;case 3:t.call(this,arguments[1],arguments[2]);break;default:var n=Array.prototype.slice.call(arguments,1);t.apply(this,n)}return!0}if(a(t)){var n=Array.prototype.slice.call(arguments,1),r=t.slice();for(var i=0,s=r.length;i<s;i++)r[i].apply(this,n);return!0}return!1},u.prototype.addListener=function(e,t){if("function"!=typeof t)throw new Error("addListener only takes instances of Function");this._events||(this._events={}),this.emit("newListener",e,t);if(!this._events[e])this._events[e]=t;else if(a(this._events[e])){if(!this._events[e].warned){var n;this._events.maxListeners!==undefined?n=this._events.maxListeners:n=l,n&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),console.trace())}this._events[e].push(t)}else this._events[e]=[this._events[e],t];return this},u.prototype.on=u.prototype.addListener,u.prototype.once=function(e,t){var n=this;return n.on(e,function r(){n.removeListener(e,r),t.apply(this,arguments)}),this},u.prototype.removeListener=function(e,t){if("function"!=typeof t)throw new Error("removeListener only takes instances of Function");if(!this._events||!this._events[e])return this;var n=this._events[e];if(a(n)){var r=f(n,t);if(r<0)return this;n.splice(r,1),n.length==0&&delete this._events[e]}else this._events[e]===t&&delete this._events[e];return this},u.prototype.removeAllListeners=function(e){return e&&this._events&&this._events[e]&&(this._events[e]=null),this},u.prototype.listeners=function(e){return this._events||(this._events={}),this._events[e]||(this._events[e]=[]),a(this._events[e])||(this._events[e]=[this._events[e]]),this._events[e]}}),e.define("/src/js/dialogs/nextLevel.js",function(e,t,n,r,i,s,o){n.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Great Job!!","","You solved the level in *{numCommands}* command(s); ","our solution uses {best}."]}}],ja:[{type:"ModalAlert",options:{markdowns:["## 完成!","","あなたは*{numCommands}*回のコマンドでこの課題をクリアしました; ","模範解答では{best}回です。"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 恭喜！","","你用 *{numCommands}* 条命令搞定了这一关；我们的答案要用 {best}。"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Beau Travail!!","","Vous avez résolu le niveau en *{numCommands}* commande(s); ","notre solution le fait en {best}."]}}]}}),e.define("/src/js/models/commandModel.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../util").isBrowser()?a=window.Backbone:a=e("backbone"),f=e("../util/errors"),l=e("../level/parseWaterfall").ParseWaterfall,c=e("../intl"),h=f.CommandProcessError,p=f.GitError,d=f.Warning,v=f.CommandResult,m=a.Model.extend({defaults:{status:"inqueue",rawStr:null,result:"",createTime:null,error:null,warnings:null,parseWaterfall:new l,generalArgs:null,supportedMap:null,options:null,method:null},initialize:function(e){this.initDefaults(),this.validateAtInit(),this.on("change:error",this.errorChanged,this),this.get("error")&&this.errorChanged(),this.parseOrCatch()},initDefaults:function(){this.set("generalArgs",[]),this.set("supportedMap",{}),this.set("warnings",[])},replaceDotWithHead:function(e){return e.replace(/\./g,"HEAD")},appendOptionR:function(){var e=this.getOptionsMap()["-r"]||[];this.setGeneralArgs(this.getGeneralArgs().concat(e))},mapDotToHead:function(){var e=this.getGeneralArgs(),t=this.getOptionsMap();e=u.map(e,function(e){return this.replaceDotWithHead(e)},this);var n={};u.each(t,function(e,t){n[t]=u.map(e,function(e){return this.replaceDotWithHead(e)},this)},this),this.setGeneralArgs(e),this.setOptionsMap(n)},deleteOptions:function(e){var t=this.getOptionsMap();u.each(e,function(e){delete t[e]},this),this.setOptionsMap(t)},getGeneralArgs:function(){return this.get("generalArgs")},setGeneralArgs:function(e){this.set("generalArgs",e)},setOptionsMap:function(e){this.set("supportedMap",e)},getOptionsMap:function(){return this.get("supportedMap")},acceptNoGeneralArgs:function(){if(this.getGeneralArgs().length)throw new p({msg:c.str("git-error-no-general-args")})},oneArgImpliedHead:function(e,t){this.validateArgBounds(e,0,1,t),e.length===0&&e.push("HEAD")},twoArgsImpliedHead:function(e,t){this.validateArgBounds(e,1,2,t),e.length==1&&e.push("HEAD")},validateArgBounds:function(e,t,n,r){var i=r===undefined?"git "+this.get("method"):this.get("method")+" "+r+" ";i="with "+i;if(e.length<t)throw new p({msg:c.str("git-error-args-few",{lower:String(t),what:i})});if(e.length>n)throw new p({msg:c.str("git-error-args-many",{upper:String(n),what:i})})},validateAtInit:function(){if(this.get("rawStr")===null)throw new Error("Give me a string!");this.get("createTime")||this.set("createTime",(new Date).toString())},setResult:function(e){this.set("result",e)},finishWith:function(e){this.set("status","finished"),e.resolve()},addWarning:function(e){this.get("warnings").push(e),this.set("numWarnings",this.get("numWarnings")?this.get("numWarnings")+1:1)},getFormattedWarnings:function(){if(!this.get("warnings").length)return"";var e='<i class="icon-exclamation-sign"></i>';return"<p>"+e+this.get("warnings").join("</p><p>"+e)+"</p>"},parseOrCatch:function(){this.expandShortcuts(this.get("rawStr"));try{this.processInstants()}catch(e){f.filterError(e),this.set("error",e);return}if(this.parseAll())return;this.set("error",new h({msg:'The command "'+this.get("rawStr")+"\" isn't supported, sorry!"}))},errorChanged:function(){var e=this.get("error");if(!e)return;e instanceof h||e instanceof p?this.set("status","error"):e instanceof v?this.set("status","finished"):e instanceof d&&this.set("status","warning"),this.formatError()},formatError:function(){this.set("result",this.get("error").toResult())},expandShortcuts:function(e){e=this.get("parseWaterfall").expandAllShortcuts(e),this.set("rawStr",e)},processInstants:function(){var e=this.get("rawStr");if(!e.length)throw new v({msg:""});this.get("parseWaterfall").processAllInstants(e)},parseAll:function(){var e=this.get("rawStr"),t=this.get("parseWaterfall").parseAll(e);return t?(u.each(t.toSet,function(e,t){this.set(t,e)},this),!0):!1}}),g=a.Model.extend({defaults:{text:""}});n.CommandEntry=g,n.Command=m}),e.define("/src/js/level/parseWaterfall.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../git/commands"),f=e("../commands"),l=e("../sandbox/commands"),c=function(e){e=e||{},this.options=e,this.shortcutWaterfall=e.shortcutWaterfall||[f.commands.getShortcutMap()],this.instantWaterfall=e.instantWaterfall||[a.instantCommands,l.instantCommands]};c.prototype.initParseWaterfall=function(){if(!e("../util").isBrowser()){this.parseWaterfall=[f.parse];return}this.parseWaterfall=this.options.parseWaterfall||[f.parse,l.parse,l.getOptimisticLevelParse(),l.getOptimisticLevelBuilderParse()]},c.prototype.clone=function(){return new c({shortcutWaterfall:this.shortcutWaterfall.slice(),instantWaterfall:this.instantWaterfall.slice(),parseWaterfall:this.parseWaterfall.slice()})},c.prototype.getWaterfallMap=function(){return this.parseWaterfall||this.initParseWaterfall(),{shortcutWaterfall:this.shortcutWaterfall,instantWaterfall:this.instantWaterfall,parseWaterfall:this.parseWaterfall}},c.prototype.addFirst=function(e,t){if(!e||!t)throw new Error("need to know which!!!");this.getWaterfallMap()[e].unshift(t)},c.prototype.addLast=function(e,t){this.getWaterfallMap()[e].push(t)},c.prototype.expandAllShortcuts=function(e){return u.each(this.shortcutWaterfall,function(t){e=this.expandShortcut(e,t)},this),e},c.prototype.expandShortcut=function(e,t){return u.each(t,function(t,n){u.each(t,function(t,r){var i=t.exec(e);i&&(e=n+" "+r+" "+e.slice(i[0].length))})}),e},c.prototype.processAllInstants=function(e){u.each(this.instantWaterfall,function(t){this.processInstant(e,t)},this)},c.prototype.processInstant=function(e,t){u.each(t,function(t){var n=t[0],r=n.exec(e);r&&t[1](r)})},c.prototype.parseAll=function(e){this.parseWaterfall||this.initParseWaterfall();var t=!1;return u.each(this.parseWaterfall,function(n){var r=n(e);r&&(t=r)},this),t},n.ParseWaterfall=c}),e.define("/src/js/sandbox/commands.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../util"),f=e("../util/constants"),l=e("../intl"),c=e("../commands"),h=e("../util/errors"),p=h.CommandProcessError,d=h.GitError,v=h.Warning,m=h.CommandResult,g=[[/^ls/,function(){throw new m({msg:l.str("ls-command")})}],[/^cd/,function(){throw new m({msg:l.str("cd-command")})}],[/^(locale|locale reset)$/,function(t){f.GLOBAL.locale=l.getDefaultLocale();var n=e("../app").getEvents().trigger("localeChanged");throw new m({msg:l.str("locale-reset-command",{locale:l.getDefaultLocale()})})}],[/^show$/,function(e){var t=[l.str("show-command"),"<br/>","show commands","show solution","show goal"];throw new m({msg:t.join("\n")})}],[/^locale (\w+)$/,function(t){f.GLOBAL.locale=t[1];var n=e("../app").getEvents().trigger("localeChanged");throw new m({msg:l.str("locale-command",{locale:t[1]})})}],[/^refresh$/,function(){var t=e("../app").getEvents();throw t.trigger("refreshTree"),new m({msg:l.str("refresh-tree-command")})}],[/^rollup (\d+)$/,function(t){var n=e("../app").getEvents();throw n.trigger("rollupCommands",t[1]),new m({msg:"Commands combined!"})}],[/^echo "(.*?)"$|^echo (.*?)$/,function(e){var t=e[1]||e[2];throw new m({msg:t})}],[/^show +commands$/,function(e){var t=b(),n=[l.str("show-all-commands"),"<br/>"];throw u.each(t,function(e,t){n.push(t)}),new m({msg:n.join("\n")})}]],y={"reset solved":/^reset solved($|\s)/,help:/^help( +general)?$|^\?$/,reset:/^reset( +--forSolution)?$/,delay:/^delay (\d+)$/,clear:/^clear($|\s)/,"exit level":/^exit level($|\s)/,sandbox:/^sandbox($|\s)/,level:/^level\s?([a-zA-Z0-9]*)/,levels:/^levels($|\s)/,mobileAlert:/^mobile alert($|\s)/,"build level":/^build +level($|\s)/,"export tree":/^export +tree$/,importTreeNow:/^importTreeNow($|\s)/,"import tree":/^import +tree$/,"import level":/^import +level$/,undo:/^undo($|\s)/},b=function(){var t=["mobileAlert"],n=u.extend({},e("../level").regexMap,y);return u.each(c.commands.getRegexMap(),function(e,t){u.each(e,function(e,r){n[t+" "+r]=e})}),u.each(t,function(e){delete n[e]}),n};n.instantCommands=g,n.parse=a.genParseCommand(y,"processSandboxCommand"),n.getOptimisticLevelParse=function(){return a.genParseCommand(e("../level").regexMap,"processLevelCommand")},n.getOptimisticLevelBuilderParse=function(){return a.genParseCommand(e("../level/builder").regexMap,"processLevelBuilderCommand")}}),e.define("/src/js/level/builder.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=e("q"),l=e("../util"),c=e("../app"),h=e("../intl"),p=e("../util/errors"),d=e("../visuals/visualization").Visualization,v=e("../level/parseWaterfall").ParseWaterfall,m=e("../level").Level,g=e("../models/commandModel").Command,y=e("../git/gitShim").GitShim,b=e("../views/multiView").MultiView,w=e("../views").CanvasTerminalHolder,E=e("../views").ConfirmCancelTerminal,S=e("../views").NextLevelConfirm,x=e("../views").LevelToolbar,T=e("../views/builderViews").MarkdownPresenter,N=e("../views/builderViews").MultiViewBuilder,C=e("../views/builderViews").MarkdownGrabber,k={"define goal":/^define goal$/,"define name":/^define name$/,"help builder":/^help builder$/,"define start":/^define start$/,"edit dialog":/^edit dialog$/,"show start":/^show start$/,"hide start":/^hide start$/,"define hint":/^define hint$/,finish:/^finish$/},L=l.genParseCommand(k,"processLevelBuilderCommand"),A=m.extend({initialize:function(t){t=t||{},t.level=t.level||{};var n=h.getLocale();t.level.startDialog={},t.level.startDialog[n]={childViews:h.getDialog(e("../dialogs/levelBuilder"))},A.__super__.initialize.apply(this,[t]),this.startDialogObj=undefined,this.definedGoal=!1,delete this.treeCompare,delete this.solved},initName:function(){this.levelToolbar=new x({name:h.str("level-builder")})},initGoalData:function(){this.level.goalTreeString='{"branches":{"master":{"target":"C1","id":"master"},"makeLevel":{"target":"C2","id":"makeLevel"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"makeLevel","id":"HEAD"}}',this.level.solutionCommand="git checkout -b makeLevel; git commit",A.__super__.initGoalData.apply(this,arguments)},initStartVisualization:function(){return this.startCanvasHolder=new w({additionalClass:"startTree",text:h.str("hide-start")}),this.startVis=new d({el:this.startCanvasHolder.getCanvasLocation(),containerElement:this.startCanvasHolder.getCanvasLocation(),treeString:this.level.startTree,noKeyboardInput:!0,smallCanvas:!0,noClick:!0}),this.startCanvasHolder},startOffCommand:function(){c.getEventBaton().trigger("commandSubmitted","echo :D")},objectiveDialog:function(e,t){var n=[e,t,this.startDialogObj===undefined?null:{startDialog:{en_US:this.startDialogObj}}];A.__super__.objectiveDialog.apply(this,n)},initParseWaterfall:function(e){A.__super__.initParseWaterfall.apply(this,[e]),this.parseWaterfall.addFirst("parseWaterfall",L),this.parseWaterfall.addFirst("instantWaterfall",this.getInstantCommands())},buildLevel:function(e,t){this.exitLevel(),setTimeout(function(){c.getSandbox().buildLevel(e,t)},this.getAnimationTime()*1.5)},getInstantCommands:function(){return[[/^help$|^\?$/,function(){throw new p.CommandResult({msg:h.str("help-vague-builder")})}]]},takeControl:function(){c.getEventBaton().stealBaton("processLevelBuilderCommand",this.processLevelBuilderCommand,this),A.__super__.takeControl.apply(this)},releaseControl:function(){c.getEventBaton().releaseBaton("processLevelBuilderCommand",this.processLevelBuilderCommand,this),A.__super__.releaseControl.apply(this)},showGoal:function(){this.hideStart(),A.__super__.showGoal.apply(this,arguments)},showStart:function(e,t){this.hideGoal(),this.showSideVis(e,t,this.startCanvasHolder,this.initStartVisualization)},resetSolution:function(){this.gitCommandsIssued=[],this.level.solutionCommand=undefined},hideStart:function(e,t){this.hideSideVis(e,t,this.startCanvasHolder)},defineStart:function(e,t){this.hideStart(),e.addWarning(h.str("define-start-warning")),this.resetSolution(),this.level.startTree=this.mainVis.gitEngine.printTree(),this.mainVis.resetFromThisTreeNow(this.level.startTree),this.showStart(e,t)},defineGoal:function(e,t){this.hideGoal();if(!this.gitCommandsIssued.length){e.set("error",new p.GitError({msg:h.str("solution-empty")})),t.resolve();return}this.definedGoal=!0,this.level.solutionCommand=this.gitCommandsIssued.join(";"),this.level.goalTreeString=this.mainVis.gitEngine.printTree(),this.initGoalVisualization(),this.showGoal(e,t)},defineName:function(e,t){this.level.name={en_US:prompt(h.str("prompt-name"))},e&&e.finishWith(t)},defineHint:function(e,t){this.level.hint={en_US:prompt(h.str("prompt-hint"))},e&&e.finishWith(t)},editDialog:function(e,t){var n=f.defer();this.currentBuilder=new N({multiViewJSON:this.startDialogObj,deferred:n}),n.promise.then(u.bind(function(e){this.startDialogObj=e},this)).fail(function(){}).done(function(){e?e.finishWith(t):t.resolve()})},finish:function(e,t){if(!this.gitCommandsIssued.length||!this.definedGoal){e.set("error",new p.GitError({msg:h.str("solution-empty")})),t.resolve();return}while(!this.level.name)this.defineName();var n=f.defer(),r=n.promise;if(this.level.hint===undefined){var i=f.defer();r=r.then(function(){return i.promise});var s=new E({markdowns:[h.str("want-hint")]});s.getPromise().then(u.bind(this.defineHint,this)).fail(u.bind(function(){this.level.hint={en_US:""}},this)).done(function(){i.resolve()})}if(this.startDialogObj===undefined){var o=f.defer();r=r.then(function(){return o.promise});var a=new E({markdowns:[h.str("want-start-dialog")]});a.getPromise().then(u.bind(function(){var e=f.defer();return this.editDialog(undefined,e),e.promise},this)).fail(function(){}).done(function(){o.resolve()})}r=r.done(u.bind(function(){new T({fillerText:JSON.stringify(this.getExportObj(),null,2),previewText:h.str("share-json")}),e.finishWith(t)},this)),n.resolve()},getExportObj:function(){var e=u.extend({},this.level);return delete e.startDialog,this.startDialogObj&&(e.startDialog={en_US:this.startDialogObj}),e},processLevelBuilderCommand:function(e,t){var n={"define goal":this.defineGoal,"define start":this.defineStart,"show start":this.showStart,"hide start":this.hideStart,finish:this.finish,"define hint":this.defineHint,"define name":this.defineName,"edit dialog":this.editDialog,"help builder":A.__super__.startDialog};if(!n[e.get("method")])throw new Error("woah we dont support that method yet");n[e.get("method")].apply(this,arguments)},afterCommandDefer:function(e,t){e.resolve()},die:function(){this.hideStart(),A.__super__.die.apply(this,arguments),delete this.startVis,delete this.startCanvasHolder}});n.LevelBuilder=A,n.regexMap=k}),e.define("/src/js/git/gitShim.js",function(e,t,n,r,i,s,o){function c(e){e=e||{},this.beforeCB=e.beforeCB||function(){},this.afterCB=e.afterCB||function(){};var t=function(e){e.resolve()};this.beforeDeferHandler=e.beforeDeferHandler||t,this.afterDeferHandler=e.afterDeferHandler||t,this.eventBaton=e.eventBaton||f.getEventBaton()}var u=e("underscore"),a=e("q"),f=e("../app"),l=e("../views/multiView").MultiView;c.prototype.insertShim=function(){this.eventBaton.stealBaton("processGitCommand",this.processGitCommand,this)},c.prototype.removeShim=function(){this.eventBaton.releaseBaton("processGitCommand",this.processGitCommand,this)},c.prototype.processGitCommand=function(e,t){this.beforeCB(e);var n=a.defer();n.promise.then(u.bind(function(){this.afterGitCommandProcessed(e,t)},this)).done();var r=u.bind(function(){this.eventBaton.passBatonBack("processGitCommand",this.processGitCommand,this,[e,n])},this),i=a.defer();i.promise.then(r).done(),this.beforeDeferHandler(i,e)},c.prototype.afterGitCommandProcessed=function(e,t){this.afterCB(e);var n=a.defer();n.promise.then(function(){t.resolve()}).done(),this.afterDeferHandler(n,e)},n.GitShim=c}),e.define("/src/js/views/multiView.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?window.Backbone:e("backbone"),l=e("../views").ModalTerminal,c=e("../views").ContainedBase,h=e("../views").ConfirmCancelView,p=e("../views").LeftRightView,d=e("../views").ModalAlert,v=e("../views/gitDemonstrationView").GitDemonstrationView,m=e("../views/builderViews"),g=m.MarkdownPresenter,y=e("../util/keyboard").KeyboardListener,b=e("../util/errors").GitError,w=f.View.extend({tagName:"div",className:"multiView",navEventDebounce:550,deathTime:700,typeToConstructor:{ModalAlert:d,GitDemonstrationView:v,MarkdownPresenter:g},initialize:function(e){e=e||{},this.childViewJSONs=e.childViews||[{type:"ModalAlert",options:{markdown:"Woah wtf!!"}},{type:"GitDemonstrationView",options:{command:"git checkout -b side; git commit; git commit"}},{type:"ModalAlert",options:{markdown:"Im second"}}],this.deferred=e.deferred||a.defer(),this.childViews=[],this.currentIndex=0,this.navEvents=u.clone(f.Events),this.navEvents.on("negative",this.getNegFunc(),this),this.navEvents.on("positive",this.getPosFunc(),this),this.navEvents.on("quit",this.finish,this),this.navEvents.on("exit",this.finish,this),this.keyboardListener=new y({events:this.navEvents,aliasMap:{left:"negative",right:"positive",enter:"positive",esc:"quit"}}),this.render(),e.wait||this.start()},onWindowFocus:function(){},getAnimationTime:function(){return 700},getPromise:function(){return this.deferred.promise},getPosFunc:function(){return u.debounce(u.bind(function(){this.navForward()},this),this.navEventDebounce,!0)},getNegFunc:function(){return u.debounce(u.bind(function(){this.navBackward()},this),this.navEventDebounce,!0)},lock:function(){this.locked=!0},unlock:function(){this.locked=!1},navForward:function(){if(this.locked)return;if(this.currentIndex===this.childViews.length-1){this.hideViewIndex(this.currentIndex),this.finish();return}this.navIndexChange(1)},navBackward:function(){if(this.currentIndex===0)return;this.navIndexChange(-1)},navIndexChange:function(e){this.hideViewIndex(this.currentIndex),this.currentIndex+=e,this.showViewIndex(this.currentIndex)},hideViewIndex:function(e){this.childViews[e].hide()},showViewIndex:function(e){this.childViews[e].show()},finish:function(){this.keyboardListener.mute(),u.each(this.childViews,function(e){e.die()}),this.deferred.resolve()},start:function(){this.showViewIndex(this.currentIndex)},createChildView:function(e){var t=e.type;if(!this.typeToConstructor[t])throw new Error('no constructor for type "'+t+'"');var n=new this.typeToConstructor[t](u.extend({},e.options,{wait:!0}));return n},addNavToView:function(e,t){var n=new p({events:this.navEvents,destination:e.getDestination(),showLeft:t!==0,lastNav:t===this.childViewJSONs.length-1});e.receiveMetaNav&&e.receiveMetaNav(n,this)},render:function(){u.each(this.childViewJSONs,function(e,t){var n=this.createChildView(e);this.childViews.push(n),this.addNavToView(n,t)},this)}});n.MultiView=w}),e.define("/src/js/views/gitDemonstrationView.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?window.Backbone:e("backbone"),l=e("../util"),c=e("../util/keyboard").KeyboardListener,h=e("../models/commandModel").Command,p=e("../views").ModalTerminal,d=e("../views").ContainedBase,v=e("../visuals/visualization").Visualization,m=e("../git/headless"),g=d.extend({tagName:"div",className:"gitDemonstrationView box horizontal",template:u.template($("#git-demonstration-view").html()),events:{"click div.command > p.uiButton":"positive"},initialize:function(t){t=t||{},this.options=t,this.JSON=u.extend({beforeMarkdowns:["## Git Commits","","Awesome!"],command:"git commit",afterMarkdowns:["Now you have seen it in action","","Go ahead and try the level!"]},t);var n=function(t){return e("markdown").markdown.toHTML(t.join("\n"))};this.JSON.beforeHTML=n(this.JSON.beforeMarkdowns),this.JSON.afterHTML=n(this.JSON.afterMarkdowns),this.container=new p({title:t.title||"Git 示例"}),this.render(),this.checkScroll(),this.navEvents=u.clone(f.Events),this.navEvents.on("positive",this.positive,this),this.navEvents.on("negative",this.negative,this),this.keyboardListener=new c({events:this.navEvents,aliasMap:{enter:"positive",right:"positive",left:"negative"},wait:!0}),this.visFinished=!1,this.initVis(),t.wait||this.show()},receiveMetaNav:function(e,t){var n=this;e.navEvents.on("positive",this.positive,this),this.metaContainerView=t},checkScroll:function(){var e=this.$("div.demonstrationText").children(),t=u.map(e,function(e){return e.clientHeight}),n=u.reduce(t,function(e,t){return e+t});n<this.$("div.demonstrationText").height()&&this.$("div.demonstrationText").addClass("noLongText")},dispatchBeforeCommand:function(){if(!this.options.beforeCommand)return;var e=a.defer();m.getTreeQuick(this.options.beforeCommand,e),e.promise.then(u.bind(function(e){console.log("the before command i got",this.options.beforeCommand),console.log(e,"is what i got"),this.mainVis.gitEngine.loadTree(e),this.mainVis.gitVisuals.refreshTreeHarsh()},this))},takeControl:function(){this.hasControl=!0,this.keyboardListener.listen(),this.metaContainerView&&this.metaContainerView.lock()},releaseControl:function(){if(!this.hasControl)return;this.hasControl=!1,this.keyboardListener.mute(),this.metaContainerView&&this.metaContainerView.unlock()},reset:function(){this.mainVis.reset(),this.dispatchBeforeCommand(),this.demonstrated=!1,this.$el.toggleClass("demonstrated",!1),this.$el.toggleClass("demonstrating",!1)},positive:function(){if(this.demonstrated||!this.hasControl)return;this.demonstrated=!0,this.demonstrate()},demonstrate:function(){this.$el.toggleClass("demonstrating",!0);var e=a.defer();this.dispatchCommand(this.JSON.command,e),e.promise.then(u.bind(function(){this.$el.toggleClass("demonstrating",!1),this.$el.toggleClass("demonstrated",!0),this.releaseControl()},this))},negative:function(e){if(this.$el.hasClass("demonstrating"))return;this.keyboardListener.passEventBack(e)},dispatchCommand:function(e,t){var n=[];l.splitTextCommand(e,function(e){n.push(new h({rawStr:e}))},this);var r=a.defer(),i=r.promise;u.each(n,function(e,t){i=i.then(u.bind(function(){var t=a.defer();return console.log("dispatching",e),this.mainVis.gitEngine.dispatch(e,t),t.promise},this)),i=i.then(function(){return a.delay(300)})},this),i=i.then(function(){t.resolve()}),r.resolve()},tearDown:function(){this.mainVis.tearDown(),g.__super__.tearDown.apply(this)},hide:function(){this.releaseControl(),this.reset(),this.visFinished&&(this.mainVis.setTreeIndex(-1),this.mainVis.setTreeOpacity(0)),this.shown=!1,g.__super__.hide.apply(this)},show:function(){this.takeControl(),this.visFinished&&setTimeout(u.bind(function(){this.shown&&(this.mainVis.setTreeIndex(300),this.mainVis.showHarsh())},this),this.getAnimationTime()*1),this.shown=!0,g.__super__.show.apply(this)},die:function(){if(!this.visFinished)return;g.__super__.die.apply(this)},initVis:function(){this.mainVis=new v({el:this.$("div.visHolder div.visHolderInside")[0],noKeyboardInput:!0,noClick:!0,smallCanvas:!0,zIndex:-1}),this.mainVis.customEvents.on("paperReady",u.bind(function(){this.visFinished=!0,this.dispatchBeforeCommand(),this.shown&&this.show()},this))}});n.GitDemonstrationView=g}),e.define("/src/js/git/headless.js",function(e,t,n,r,i,s,o){function E(){var e={},t=function(){var e=f.defer();return e.resolve(),e.promise};for(var n in c)e[n]=t;return e.playRefreshAnimationAndFinish=function(e,t){t.finish()},e.refreshTree=function(e,t){e.finish()},e.highlightEachWithPromise=function(e,t,n){return e},e}var u=e("underscore"),a=e("backbone"),f=e("q"),l=e("../git").GitEngine,c=e("../visuals/animation/animationFactory").AnimationFactory,h=e("../visuals").GitVisuals,p=e("../git/treeCompare").TreeCompare,d=e("../util/eventBaton").EventBaton,v=e("../models/collections"),m=v.CommitCollection,g=v.BranchCollection,y=e("../models/commandModel").Command,b=e("../util/mock").mock,w=e("../util"),S=function(){this.init()};S.prototype.init=function(){this.commitCollection=new m,this.branchCollection=new g;var e=E(),t=b(h);this.gitEngine=new l({collection:this.commitCollection,branches:this.branchCollection,gitVisuals:t,animationFactory:e,eventBaton:new d}),this.gitEngine.init()};var x=function(e,t){var n=f.defer(),r=new S;r.sendCommand(e,n),n.promise.then(function(){t.resolve(r.gitEngine.exportTree())})};S.prototype.sendCommand=function(e,t){var n=f.defer(),r=n.promise,i=(new Date).getTime();w.splitTextCommand(e,function(e){r=r.then(u.bind(function(){var t=new y({rawStr:e}),n=f.defer();return this.gitEngine.dispatch(t,n),n.promise},this))},this),r.then(function(){var e=(new Date).getTime();t&&t.resolve()}),n.resolve()},n.HeadlessGit=S,n.getTreeQuick=x}),e.define("/src/js/visuals/index.js",function(e,t,n,r,i,s,o){function w(t){t=t||{},this.options=t,this.visualization=t.visualization,this.commitCollection=t.commitCollection,this.branchCollection=t.branchCollection,this.visNodeMap={},this.visEdgeCollection=new b,this.visBranchCollection=new g,this.commitMap={},this.rootCommit=null,this.branchStackMap=null,this.upstreamBranchSet=null,this.upstreamHeadSet=null,this.paper=t.paper,this.gitReady=!1,this.branchCollection.on("add",this.addBranchFromEvent,this),this.branchCollection.on("remove",this.removeBranch,this),this.deferred=[],this.flipFraction=.65;var n=e("../app");n.getEvents().on("refreshTree",this.refreshTree,this)}function E(e){var t=0,n=0,r=0,i=0,s=e.length;u.each(e,function(e){var s=e.split("(")[1];s=s.split(")")[0],s=s.split(","),r+=parseFloat(s[1]),i+=parseFloat(s[2]);var o=parseFloat(s[0]),u=o*Math.PI*2;t+=Math.cos(u),n+=Math.sin(u)}),t/=s,n/=s,r/=s,i/=s;var o=Math.atan2(n,t)/(Math.PI*2);return o<0&&(o+=1),"hsb("+String(o)+","+String(r)+","+String(i)+")"}var u=e("underscore"),a=e("q"),f=e("backbone"),l=e("../util/constants").GRAPHICS,c=e("../util/constants").GLOBAL,h=e("../models/collections"),p=h.CommitCollection,d=h.BranchCollection,v=e("../visuals/visNode").VisNode,m=e("../visuals/visBranch").VisBranch,g=e("../visuals/visBranch").VisBranchCollection,y=e("../visuals/visEdge").VisEdge,b=e("../visuals/visEdge").VisEdgeCollection;w.prototype.defer=function(e){this.deferred.push(e)},w.prototype.deferFlush=function(){u.each(this.deferred,function(e){e()},this),this.deferred=[]},w.prototype.resetAll=function(){var e=this.visEdgeCollection.toArray();u.each(e,function(e){e.remove()},this);var t=this.visBranchCollection.toArray();u.each(t,function(e){e.remove()},this),u.each(this.visNodeMap,function(e){e.remove()},this),this.visEdgeCollection.reset(),this.visBranchCollection.reset(),this.visNodeMap={},this.rootCommit=null,this.commitMap={}},w.prototype.tearDown=function(){this.resetAll(),this.paper.remove()},w.prototype.assignGitEngine=function(e){this.gitEngine=e,this.initHeadBranch(),this.deferFlush()},w.prototype.getVisualization=function(){return this.visualization},w.prototype.initHeadBranch=function(){this.addBranchFromEvent(this.gitEngine.HEAD)},w.prototype.getScreenPadding=function(){return{widthPadding:l.nodeRadius*1.5,topHeightPadding:l.nodeRadius*1.5,bottomHeightPadding:l.nodeRadius*5}},w.prototype.getPosBoundaries=function(){return this.gitEngine.hasOrigin()?{min:0,max:.5}:this.gitEngine.isOrigin()?{min:.5,max:1}:{min:0,max:1}},w.prototype.getFlipPos=function(){var e=this.getPosBoundaries(),t=e.min,n=e.max;return this.flipFraction*(n-t)+t},w.prototype.getIsGoalVis=function(){return!!this.options.isGoalVis},w.prototype.getLevelBlob=function(){return this.visualization.options.levelBlob||{}},w.prototype.toScreenCoords=function(e){if(!this.paper.width)throw new Error("being called too early for screen coords");var t=this.getScreenPadding(),n=function(e,t,n){return n+e*(t-n*2)},r=function(e,t,n,r){return n+e*(t-r-n)};return{x:n(e.x,this.paper.width,t.widthPadding),y:r(e.y,this.paper.height,t.topHeightPadding,t.bottomHeightPadding)}},w.prototype.animateAllAttrKeys=function(e,t,n,r){var i=a.defer(),s=function(i){i.animateAttrKeys(e,t,n,r)};this.visBranchCollection.each(s),this.visEdgeCollection.each(s),u.each(this.visNodeMap,s);var o=n!==undefined?n:l.defaultAnimationTime;return setTimeout(function(){i.resolve()},o),i.promise},w.prototype.finishAnimation=function(){var e=this,t=a.defer(),n=a.defer(),r=l.defaultAnimationTime,i=l.nodeRadius,s="Solved!!\n:D",o=null,f=u.bind(function(){o=this.paper.text(this.paper.width/2,this.paper.height/2,s),o.attr({opacity:0,"font-weight":500,"font-size":"32pt","font-family":"Monaco, Courier, font-monospace",stroke:"#000","stroke-width":2,fill:"#000"}),o.animate({opacity:1},r)},this);return t.promise.then(u.bind(function(){return this.animateAllAttrKeys({exclude:["circle"]},{opacity:0},r*1.1)},this)).then(u.bind(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{r:i*2},r*1.5)},this)).then(u.bind(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{r:i*.75},r*.5)},this)).then(u.bind(function(){return f(),this.explodeNodes()},this)).then(u.bind(function(){return this.explodeNodes()},this)).then(u.bind(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{},r*1.25)},this)).then(u.bind(function(){return o.animate({opacity:0},r,undefined,undefined,function(){o.remove()}),this.animateAllAttrKeys({},{})},this)).then(function(){n.resolve()}).fail(function(e){console.warn("animation error"+e)}).done(),t.resolve(),n.promise},w.prototype.explodeNodes=function(){var e=a.defer(),t=[];u.each(this.visNodeMap,function(e){t.push(e.getExplodeStepFunc())});var n=setInterval(function(){var r=[];u.each(t,function(e){e()&&r.push(e)});if(!r.length){clearInterval(n),e.resolve();return}t=r},.025);return e.promise},w.prototype.animateAllFromAttrToAttr=function(e,t,n){var r=function(r){var i=r.getID();if(u.include(n,i))return;if(!e[i]||!t[i])return;r.animateFromAttrToAttr(e[i],t[i])};this.visBranchCollection.each(r),this.visEdgeCollection.each(r),u.each(this.visNodeMap,r)},w.prototype.genSnapshot=function(){this.fullCalc();var e={};return u.each(this.visNodeMap,function(t){e[t.get("id")]=t.getAttributes()},this),this.visBranchCollection.each(function(t){e[t.getID()]=t.getAttributes()},this),this.visEdgeCollection.each(function(t){e[t.getID()]=t.getAttributes()},this),e},w.prototype.refreshTree=function(e){if(!this.gitReady||!this.gitEngine.rootCommit)return;this.fullCalc(),this.animateAll(e)},w.prototype.refreshTreeHarsh=function(){this.fullCalc(),this.animateAll(0)},w.prototype.animateAll=function(e){this.zIndexReflow(),this.animateEdges(e),this.animateNodePositions(e),this.animateRefs(e)},w.prototype.fullCalc=function(){this.calcTreeCoords(),this.calcGraphicsCoords()},w.prototype.calcTreeCoords=function(){if(!this.rootCommit)throw new Error("grr, no root commit!");this.calcUpstreamSets(),this.calcBranchStacks(),this.calcDepth(),this.calcWidth()},w.prototype.calcGraphicsCoords=function(){this.visBranchCollection.each(function(e){e.updateName()})},w.prototype.calcUpstreamSets=function(){this.upstreamBranchSet=this.gitEngine.getUpstreamBranchSet(),this.upstreamHeadSet=this.gitEngine.getUpstreamHeadSet()},w.prototype.getCommitUpstreamBranches=function(e){return this.branchStackMap[e.get("id")]},w.prototype.getBlendedHuesForCommit=function(e){var t=this.upstreamBranchSet[e.get("id")];if(!t)throw new Error("that commit doesnt have upstream branches!");return this.blendHuesFromBranchStack(t)},w.prototype.blendHuesFromBranchStack=function(e){var t=[];return u.each(e,function(e){var n=e.obj.get("visBranch").get("fill");if(n.slice(0,3)!=="hsb"){var r=Raphael.color(n);n="hsb("+String(r.h)+","+String(r.l),n=n+","+String(r.s)+")"}t.push(n)}),E(t)},w.prototype.getCommitUpstreamStatus=function(e){if(!this.upstreamBranchSet)throw new Error("Can't calculate this yet!");var t=e.get("id"),n=this.upstreamBranchSet,r=this.upstreamHeadSet;return n[t]?"branch":r[t]?"head":"none"},w.prototype.calcBranchStacks=function(){var e=this.gitEngine.getBranches(),t={};u.each(e,function(e){var n=e.target.get("id");t[n]=t[n]||[],t[n].push(e),t[n].sort(function(e,t){var n=e.obj.get("id"),r=t.obj.get("id");return n=="master"||r=="master"?n=="master"?-1:1:n.localeCompare(r)})}),this.branchStackMap=t},w.prototype.calcWidth=function(){this.maxWidthRecursive(this.rootCommit);var e=this.getPosBoundaries();this.assignBoundsRecursive(this.rootCommit,e.min,e.max)},w.prototype.maxWidthRecursive=function(e){var t=0;u.each(e.get("children"),function(n){if(n.isMainParent(e)){var r=this.maxWidthRecursive(n);t+=r}},this);var n=Math.max(1,t);return e.get("visNode").set("maxWidth",n),n},w.prototype.assignBoundsRecursive=function(e,t,n){var r=(n+t)/2;e.get("visNode").get("pos").x=r;if(e.get("children").length===0)return;var i=n-t,s=0,o=e.get("children");u.each(o,function(t){t.isMainParent(e)&&(s+=t.get("visNode").getMaxWidthScaled())},this);var a=t;u.each(o,function(t,n){if(!t.isMainParent(e))return;var r=t.get("visNode").getMaxWidthScaled(),o=r/s*i,u=a,f=u+o;this.assignBoundsRecursive(t,u,f),a=u+o},this)},w.prototype.calcDepth=function(){var e=this.calcDepthRecursive(this.rootCommit,0);e>15&&console.warn("graphics are degrading from too many layers");var t=this.getDepthIncrement(e);u.each(this.visNodeMap,function(e){e.setDepthBasedOn(t,this.getHeaderOffset())},this)},w.prototype.animateNodePositions=function(e){u.each(this.visNodeMap,function(t){t.animateUpdatedPosition(e)},this)},w.prototype.addBranchFromEvent=function(e,t,n){var r=u.bind(function(){this.addBranch(e)},this);!this.gitEngine||!this.gitReady?this.defer(r):r()},w.prototype.addBranch=function(e){var t=new m({branch:e,gitVisuals:this,gitEngine:this.gitEngine});this.visBranchCollection.add(t),this.gitReady?t.genGraphics(this.paper):this.defer(u.bind(function(){t.genGraphics(this.paper)},this))},w.prototype.removeVisBranch=function(e){this.visBranchCollection.remove(e)},w.prototype.removeVisNode=function(e){delete this.visNodeMap[e.getID()]},w.prototype.removeVisEdge=function(e){this.visEdgeCollection.remove(e)},w.prototype.animateRefs=function(e){this.visBranchCollection.each(function(t){t.animateUpdatedPos(e)},this)},w.prototype.animateEdges=function(e){this.visEdgeCollection.each(function(t){t.animateUpdatedPath(e)},this)},w.prototype.getMinLayers=function(){return this.options.smallCanvas?2:7},w.prototype.getDepthIncrement=function(e){e=Math.max(e,this.getMinLayers());var t=1-this.getHeaderOffset(),n=t/e;return n},w.prototype.shouldHaveHeader=function(){return this.gitEngine.isOrigin()||this.gitEngine.hasOrigin()},w.prototype.getHeaderOffset=function(){return this.shouldHaveHeader()?.05:0},w.prototype.calcDepthRecursive=function(e,t){e.get("visNode").setDepth(t);var n=e.get("children"),r=t;return u.each(n,function(e){var n=this.calcDepthRecursive(e,t+1);r=Math.max(n,r)},this),r},w.prototype.canvasResize=function(e,t){this.resizeFunc||this.genResizeFunc(),this.resizeFunc(e,t)},w.prototype.genResizeFunc=function(){this.resizeFunc=u.debounce(u.bind(function(t,n){this.refreshTree()},this),200,!0)},w.prototype.addNode=function(e,t){this.commitMap[e]=t,t.get("rootCommit")&&(this.rootCommit=t);var n=new v({id:e,commit:t,gitVisuals:this,gitEngine:this.gitEngine});return this.visNodeMap[e]=n,this.gitReady&&n.genGraphics(this.paper),n},w.prototype.addEdge=function(e,t){var n=this.visNodeMap[e],r=this.visNodeMap[t];if(!n||!r)throw new Error("one of the ids in ("+e+", "+t+") does not exist");var i=new y({tail:n,head:r,gitVisuals:this,gitEngine:this.gitEngine});this.visEdgeCollection.add(i),this.gitReady&&i.genGraphics(this.paper)},w.prototype.zIndexReflow=function(){this.visNodesFront(),this.visBranchesFront()},w.prototype.visNodesFront=function(){u.each(this.visNodeMap,function(e){e.toFront()})},w.prototype.visBranchesFront=function(){this.visBranchCollection.each(function(e){e.nonTextToFront(),e.textToFront()}),this.visBranchCollection.each(function(e){e.textToFrontIfInStack()})},w.prototype.drawTreeFromReload=function(){this.gitReady=!0,this.deferFlush(),this.calcTreeCoords()},w.prototype.drawTreeFirstTime=function(){this.gitReady=!0,this.calcTreeCoords(),u.each(this.visNodeMap,function(e){e.genGraphics(this.paper)},this),this.visEdgeCollection.each(function(e){e.genGraphics(this.paper)},this),this.visBranchCollection.each(function(e){e.genGraphics(this.paper)},this),this.zIndexReflow()},n.GitVisuals=w}),e.define("/src/js/visuals/visNode.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=e("../util/constants").GRAPHICS,l=e("../visuals/visBase").VisBase,c=l.extend({defaults:{depth:undefined,maxWidth:null,outgoingEdges:null,circle:null,text:null,id:null,pos:null,radius:null,commit:null,animationSpeed:f.defaultAnimationTime,animationEasing:f.defaultEasing,fill:f.defaultNodeFill,"stroke-width":f.defaultNodeStrokeWidth,stroke:f.defaultNodeStroke},getID:function(){return this.get("id")},validateAtInit:function(){if(!this.get("id"))throw new Error("need id for mapping");if(!this.get("commit"))throw new Error("need commit for linking");this.get("pos")||this.set("pos",{x:Math.random(),y:Math.random()})},initialize:function(){this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),this.set("outgoingEdges",[])},setDepth:function(e){this.set("depth",Math.max(this.get("depth")||0,e))},setDepthBasedOn:function(e,t){if(this.get("depth")===undefined)throw new Error("no depth yet!");var n=this.get("pos");n.y=this.get("depth")*e+t},getMaxWidthScaled:function(){var e=this.gitVisuals.getCommitUpstreamStatus(this.get("commit")),t={branch:1,head:.3,none:.1};if(t[e]===undefined)throw new Error("bad stat");return t[e]*this.get("maxWidth")},toFront:function(){this.get("circle").toFront(),this.get("text").toFront()},getOpacity:function(){var e={branch:1,head:f.upstreamHeadOpacity,none:f.upstreamNoneOpacity},t=this.gitVisuals.getCommitUpstreamStatus(this.get("commit"));if(e[t]===undefined)throw new Error("invalid status");return e[t]},getTextScreenCoords:function(){return this.getScreenCoords()},getAttributes:function(){var e=this.getScreenCoords(),t=this.getTextScreenCoords(),n=this.getOpacity(),r=this.getIsInOrigin()?f.originDash:"";return{circle:{cx:e.x,cy:e.y,opacity:n,r:this.getRadius(),fill:this.getFill(),"stroke-width":this.get("stroke-width"),"stroke-dasharray":r,stroke:this.get("stroke")},text:{x:t.x,y:t.y,opacity:n}}},animatePositionTo:function(e,t,n){var r=this.getAttributes(),i=e.getAttributes();r.circle=i.circle,r.text=i.text,this.animateToAttr(r,t,n)},highlightTo:function(e,t,n){var r=e.get("fill"),i={circle:{fill:r,stroke:r,"stroke-dasharray":"","stroke-width":this.get("stroke-width")*5},text:{}};this.animateToAttr(i,t,n)},animateUpdatedPosition:function(e,t){var n=this.getAttributes();this.animateToAttr(n,e,t)},animateFromAttrToAttr:function(e,t,n,r){this.animateToAttr(e,0),this.animateToAttr(t,n,r)},animateToSnapshot:function(e,t,n){if(!e[this.getID()])return;this.animateToAttr(e[this.getID()],t,n)},setAttr:function(e,t,n,r){var i=["text","circle"];this.setAttrBase(i,e,t,n,r)},animateToAttr:function(e,t,n){l.prototype.animateToAttr.apply(this,arguments);var r=t!==undefined?t:this.get("animationSpeed"),i=n||this.get("animationEasing");n=="bounce"&&e.circle&&e.circle.cx!==undefined&&e.text&&e.text.x!==undefined&&(this.get("circle").animate(e.circle.cx,r,"easeInOut"),this.get("text").animate(e.text.x,r,"easeInOut"))},getScreenCoords:function(){var e=this.get("pos");return this.gitVisuals.toScreenCoords(e)},getRadius:function(){return this.get("radius")||f.nodeRadius},getParentScreenCoords:function(){return this.get("commit").get("parents")[0].get("visNode").getScreenCoords()},setBirthPosition:function(){var e=this.getParentScreenCoords();this.get("circle").attr({cx:e.x,cy:e.y,opacity:0,r:0}),this.get("text").attr({x:e.x,y:e.y,opacity:0})},setBirthFromSnapshot:function(e){var t=this.get("commit").get("parents")[0].get("visNode").getID(),n=e[t];this.get("circle").attr({opacity:0,r:0,cx:n.circle.cx,cy:n.circle.cy}),this.get("text").attr({opacity:0,x:n.text.x,y:n.text.y});var r={x:n.circle.cx,y:n.circle.cy};this.setOutgoingEdgesBirthPosition(r)},setBirth:function(){this.setBirthPosition(),this.setOutgoingEdgesBirthPosition(this.getParentScreenCoords())},setOutgoingEdgesOpacity:function(e){u.each(this.get("outgoingEdges"),function(t){t.setOpacity(e)})},animateOutgoingEdgesToAttr:function(e,t,n){u.each(this.get("outgoingEdges"),function(t){var n=e[t.getID()];t.animateToAttr(n)},this)},animateOutgoingEdges:function(e,t){u.each(this.get("outgoingEdges"),function(n){n.animateUpdatedPath(e,t)},this)},animateOutgoingEdgesFromSnapshot:function(e,t,n){u.each(this.get("outgoingEdges"),function(r){var i=e[r.getID()];r.animateToAttr(i,t,n)},this)},setOutgoingEdgesBirthPosition:function(e){u.each(this.get("outgoingEdges"),function(t){var n=t.get("head").getScreenCoords(),r=t.genSmoothBezierPathStringFromCoords(e,n);t.get("path").stop(),t.get("path").attr({path:r,opacity:0})},this)},parentInFront:function(){this.get("commit").get("parents")[0].get("visNode").toFront()},getFontSize:function(e){return e.length<3?12:e.length<5?10:8},getFill:function(){var e=this.gitVisuals.getCommitUpstreamStatus(this.get("commit"));return e=="head"?f.headRectFill:e=="none"?f.orphanNodeFill:this.gitVisuals.getBlendedHuesForCommit(this.get("commit"))},attachClickHandlers:function(){if(this.get("gitVisuals").options.noClick)return;var t="git checkout "+this.get("commit").get("id"),n=e("../app");u.each([this.get("circle"),this.get("text")],function(e){e.click(function(){n.getEventBaton().trigger("commandSubmitted",t)}),$(e.node).css("cursor","pointer")})},setOpacity:function(e){e=e===undefined?1:e;var t=["circle","text"];u.each(t,function(t){this.get(t).attr({opacity:e})},this)},remove:function(){this.removeKeys(["circle"],["text"]);var e=this.get("text");e&&e.remove(),this.gitVisuals.removeVisNode(this)},removeAll:function(){this.remove(),this.removeAllEdges()},removeAllEdges:function(){u.each(this.get("outgoingEdges"),function(e){e.remove()},this)},getExplodeStepFunc:function(){var e=this.get("circle"),t=20,n=Math.PI+Math.random()*1*Math.PI,r=.2,i=.01,s=t*Math.cos(n),o=t*Math.sin(n),u=e.attr("cx"),a=e.attr("cy"),f=this.gitVisuals.paper.width,l=this.gitVisuals.paper.height,c=.8,h=1,p=function(){o+=r*h-i*o,s-=i*s,u+=s*h,a+=o*h;if(u<0||u>f)s=c*-s,u=u<0?0:f;if(a<0||a>l)o=c*-o,a=a<0?0:l;return e.attr({cx:u,cy:a}),s*s+o*o<.01&&Math.abs(a-l)===0?!1:!0};return p},makeCircle:function(e){var t=this.getScreenCoords();return e.circle(t.x,t.y,this.getRadius()).attr(this.getAttributes().circle)},makeText:function(e){var t=this.getTextScreenCoords();return e.text(t.x,t.y,String(this.get("id")))},genGraphics:function(){var e=this.gitVisuals.paper,t=this.makeCircle(e),n=this.makeText(e);n.attr({"font-size":this.getFontSize(this.get("id")),"font-weight":"bold","font-family":"Monaco, Courier, font-monospace",opacity:this.getOpacity()}),this.set("circle",t),this.set("text",n),this.attachClickHandlers()}});n.VisNode=c}),e.define("/src/js/visuals/visBase.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=a.Model.extend({removeKeys:function(e){u.each(e,function(e){this.get(e)&&this.get(e).remove()},this)},getNonAnimateKeys:function(){return["stroke-dasharray"]},getIsInOrigin:function(){return this.get("gitEngine")?this.get("gitEngine").isOrigin():!1},animateToAttr:function(e,t,n){if(t===0){this.setAttr(e,!0);return}var r=t!==undefined?t:this.get("animationSpeed"),i=n||this.get("animationEasing");this.setAttr(e,!1,r,i)},setAttrBase:function(e,t,n,r,i){u.each(e,function(e){n?this.get(e).attr(t[e]):(this.get(e).stop(),this.get(e).animate(t[e],r,i),u.forEach(this.getNonAnimateKeys(),function(n){t[e]&&t[e][n]!==undefined&&this.get(e).attr(n,t[e][n])},this)),t.css&&$(this.get(e).node).css(t.css)},this)},animateAttrKeys:function(e,t,n,r){e=u.extend({},{include:["circle","arrow","rect","path","text"],exclude:[]},e||{});var i=this.getAttributes();u.each(e.include,function(e){i[e]=u.extend({},i[e],t)}),u.each(e.exclude,function(e){delete i[e]}),this.animateToAttr(i,n,r)}});n.VisBase=f}),e.define("/src/js/visuals/visBranch.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=e("../util/constants").GRAPHICS,l=e("../visuals/visBase").VisBase,c=e("../git/treeCompare").TreeCompare,h=function(){var e=Math.random(),t="hsb("+String(e)+",0.7,1)";return t},p=l.extend({defaults:{pos:null,text:null,rect:null,arrow:null,isHead:!1,flip:1,fill:f.rectFill,stroke:f.rectStroke,"stroke-width":f.rectStrokeWidth,offsetX:f.nodeRadius*4.75,offsetY:0,arrowHeight:14,arrowInnerSkew:0,arrowEdgeHeight:6,arrowLength:14,arrowOffsetFromCircleX:10,vPad:5,hPad:5,animationSpeed:f.defaultAnimationTime,animationEasing:f.defaultEasing},validateAtInit:function(){if(!this.get("branch"))throw new Error("need a branch!")},getID:function(){return this.get("branch").get("id")},initialize:function(){this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine");if(!this.gitEngine)throw new Error("asd wtf");this.get("branch").set("visBranch",this);var e=this.get("branch").get("id");e=="HEAD"?(this.set("isHead",!0),this.set("flip",-1),this.refreshOffset(),this.set("fill",f.headRectFill)):e!=="master"&&this.set("fill",h())},getCommitPosition:function(){var e=this.gitEngine.getCommitFromRef(this.get("branch")),t=e.get("visNode");return this.set("flip",this.getFlipValue(e,t)),this.refreshOffset(),t.getScreenCoords()},getDashArray:function(){return this.get("gitVisuals").getIsGoalVis()?this.getIsLevelBranchCompared()?"":"--":""},getIsGoalAndNotCompared:function(){return this.get("gitVisuals").getIsGoalVis()?!this.getIsLevelBranchCompared():!1},getIsLevelBranchCompared:function(){if(this.getIsMaster())return!0;var e=this.get("gitVisuals").getLevelBlob();return!c.onlyMasterCompared(e)},getIsMaster:function(){return this.get("branch").get("id")=="master"},getFlipValue:function(e,t){var n=this.get("gitVisuals").getFlipPos(),r=t.get("pos").x>n;return e.get("id")==="C0"?-1:this.get("isHead")?r?this.isBranchStackEmpty()?-1:1:this.isBranchStackEmpty()?1:-1:r?-1:1},refreshOffset:function(){var e=f.nodeRadius*4.75,t=33,n=10;this.get("flip")===1?(this.set("offsetY",-t),this.set("offsetX",e-n)):(this.set("offsetY",t),this.set("offsetX",e-n))},getArrowTransform:function(){return this.get("flip")===1?"t-2,-20R-35":"t2,20R-35"},getBranchStackIndex:function(){if(this.get("isHead"))return 0;var e=this.getBranchStackArray(),t=-1;return u.each(e,function(e,n){e.obj==this.get("branch")&&(t=n)},this),t},getBranchStackLength:function(){return this.get("isHead")?1:this.getBranchStackArray().length},isBranchStackEmpty:function(){var e=this.gitVisuals.branchStackMap[this.getCommitID()];return e?e.length===0:!0},getCommitID:function(){var e=this.get("branch").get("target");return e.get("type")==="branch"&&(e=e.get("target")),e.get("id")},getBranchStackArray:function(){var e=this.gitVisuals.branchStackMap[this.getCommitID()];return e===undefined?(this.gitVisuals.calcBranchStacks(),this.getBranchStackArray()):e},getTextPosition:function(){var e=this.getCommitPosition(),t=this.getBranchStackIndex();return{x:e.x+this.get("flip")*this.get("offsetX"),y:e.y+t*f.multiBranchY+this.get("offsetY")}},getRectPosition:function(){var e=this.getTextPosition(),t=this.get("flip"),n=this.getTextSize();return{x:e.x-.5*n.w-this.get("hPad"),y:e.y-.5*n.h-this.get("vPad")}},getArrowPath:function(){var e=function(e,t,n){return{x:e.x+t,y:e.y+n}},t=function(e){return String(Math.round(e.x))+","+String(Math.round(e.y))},n=this.get("flip"),r=e(this.getCommitPosition(),n*this.get("arrowOffsetFromCircleX"),0),i=e(r,n*this.get("arrowLength"),-this.get("arrowHeight")),s=e(r,n*this.get("arrowLength"),this.get("arrowHeight")),o=e(i,n*this.get("arrowInnerSkew"),this.get("arrowEdgeHeight")),a=e(s,n*this.get("arrowInnerSkew"),-this.get("arrowEdgeHeight")),f=49,l=e(o,n*f,0),c=e(a,n*f,0),h="";h+="M"+t(l)+" ";var p=[o,i,r,s,a,c];return u.each(p,function(e){h+="L"+t(e)+" "},this),h+="z",h},getTextSize:function(){var e=function(e){var t=e.get("text")?e.get("text").node:null;return t===null?0:t.clientWidth},t=function(e){return e.w||(e.w=75),e.h||(e.h=20),e},n=this.get("text").node;if(this.get("isHead"))return t({w:n.clientWidth,h:n.clientHeight});var r=0;return u.each(this.getBranchStackArray(),function(t){r=Math.max(r,e(t.obj.get("visBranch")))}),t({w:r,h:n.clientHeight})},getSingleRectSize:function(){var e=this.getTextSize(),t=this.get("vPad"),n=this.get("hPad");return{w:e.w+t*2,h:e.h+n*2}},getRectSize:function(){var e=this.getTextSize(),t=this.get("vPad"),n=this.get("hPad"),r=this.getBranchStackLength();return{w:e.w+t*2,h:e.h*r*1.1+n*2}},getIsRemote:function(){return this.get("branch").getIsRemote()},getName:function(){var e=this.get("branch").getName(),t=this.get("branch")===this.gitEngine.HEAD.get("target"),n=this.getIsRemote(),r=this.gitEngine.getIsHg();e==="HEAD"&&r&&(e=".");var i=t&&!this.getIsInOrigin()&&!n?"*":"";return e+i},nonTextToFront:function(){this.get("arrow").toFront(),this.get("rect").toFront()},textToFront:function(){this.get("text").toFront()},textToFrontIfInStack:function(){this.getBranchStackIndex()!==0&&this.get("text").toFront()},getFill:function(){return this.get("isHead")||this.getBranchStackLength()==1||this.getBranchStackIndex()!==0?this.get("fill"):this.gitVisuals.blendHuesFromBranchStack(this.getBranchStackArray())},remove:function(){this.removeKeys(["text","arrow","rect"]),this.gitVisuals.removeVisBranch(this)},handleModeChange:function(){},genGraphics:function(e){var t=this.getTextPosition(),n=this.getName(),r=e.text(t.x,t.y,String(n));r.attr({"font-size":14,"font-family":"Monaco, Courier, font-monospace",opacity:this.getTextOpacity()}),this.set("text",r);var i=this.getAttributes(),s=this.getRectPosition(),o=this.getRectSize(),a=e.rect(s.x,s.y,o.w,o.h,8).attr(i.rect);this.set("rect",a);var f=this.getArrowPath(),l=e.path(f).attr(i.arrow);this.set("arrow",l);var c=["text","rect","arrow"];u.each(c,function(e){$(this.get(e).node).css(i.css)},this),this.attachClickHandlers(),a.toFront(),r.toFront()},attachClickHandlers:function(){if(this.get("gitVisuals").options.noClick)return;var e=[this.get("rect"),this.get("text"),this.get("arrow")];u.each(e,function(e){e.click(u.bind(this.onClick,this))},this)},shouldDisableClick:function(){return this.get("isHead")&&!this.gitEngine.getDetachedHead()},onClick:function(){if(this.shouldDisableClick())return;var t="git checkout "+this.get("branch").get("id"),n=e("../app");n.getEventBaton().trigger("commandSubmitted",t)},updateName:function(){this.get("text").attr({text:this.getName()})},getNonTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:this.getBranchStackIndex()!==0?0:1},getTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:this.getIsGoalAndNotCompared()?this.getBranchStackIndex()===0?.7:.3:1},getStrokeWidth:function(){return this.getIsGoalAndNotCompared()?this.get("stroke-width")/5:this.get("stroke-width")},getAttributes:function(){var e=this.getTextOpacity();this.updateName();var t=this.getTextPosition(),n=this.getRectPosition(),r=this.getRectSize(),i=this.getArrowPath(),s=this.getDashArray(),o=this.shouldDisableClick()?"auto":"pointer";return{css:{cursor:o},text:{x:t.x,y:t.y,opacity:e},rect:{x:n.x,y:n.y,width:r.w,height:r.h,opacity:this.getNonTextOpacity(),fill:this.getFill(),stroke:this.get("stroke"),"stroke-dasharray":s,"stroke-width":this.getStrokeWidth()},arrow:{path:i,opacity:this.getNonTextOpacity(),fill:this.getFill(),stroke:this.get("stroke"),transform:this.getArrowTransform(),"stroke-dasharray":s,"stroke-width":this.getStrokeWidth()}}},animateUpdatedPos:function(e,t){var n=this.getAttributes();this.animateToAttr(n,e,t)},animateFromAttrToAttr:function(e,t,n,r){this.animateToAttr(e,0),this.animateToAttr(t,n,r)},setAttr:function(e,t,n,r){var i=["text","rect","arrow"];this.setAttrBase(i,e,t,n,r)}}),d=a.Collection.extend({model:p});n.VisBranchCollection=d,n.VisBranch=p,n.randomHueString=h}),e.define("/src/js/visuals/visEdge.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=e("../util/constants").GRAPHICS,l=e("../visuals/visBase").VisBase,c=l.extend({defaults:{tail:null,head:null,animationSpeed:f.defaultAnimationTime,animationEasing:f.defaultEasing},validateAtInit:function(){var e=["tail","head"];u.each(e,function(e){if(!this.get(e))throw new Error(e+" is required!")},this)},getID:function(){return this.get("tail").get("id")+"."+this.get("head").get("id")},initialize:function(){this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),this.get("tail").get("outgoingEdges").push(this)},remove:function(){this.removeKeys(["path"]),this.gitVisuals.removeVisEdge(this)},genSmoothBezierPathString:function(e,t){var n=e.getScreenCoords(),r=t.getScreenCoords();return this.genSmoothBezierPathStringFromCoords(n,r)},genSmoothBezierPathStringFromCoords:function(e,t){var n=function(e){return String(Math.round(e.x))+","+String(Math.round(e.y))},r=function(e,t,n){return n=n||f.curveControlPointOffset,{x:e.x,y:e.y+n*t}},i=function(e,t,n){return{x:e.x+t,y:e.y+n}};e=r(e,-1,this.get("tail").getRadius()),t=r(t,1,this.get("head").getRadius());var s="";s+="M"+n(e)+" ",s+="C",s+=n(r(e,-1))+" ",s+=n(r(t,1))+" ",s+=n(t);var o=f.arrowHeadSize||10;return s+=" L"+n(i(t,-o,o)),s+=" L"+n(i(t,o,o)),s+=" L"+n(t),s+="C",s+=n(r(t,1))+" ",s+=n(r(e,-1))+" ",s+=n(e),s},getBezierCurve:function(){return this.genSmoothBezierPathString(this.get("tail"),this.get("head"))},getStrokeColor:function(){return f.visBranchStrokeColorNone},setOpacity:function(e){e=e===undefined?1:e,this.get("path").attr({opacity:e})},genGraphics:function(e){var t=this.getBezierCurve(),n=e.path(t).attr({"stroke-width":f.visBranchStrokeWidth,stroke:this.getStrokeColor(),"stroke-linecap":"round","stroke-linejoin":"round",fill:this.getStrokeColor()});n.toBack(),this.set("path",n)},getOpacity:function(){var e=this.gitVisuals.getCommitUpstreamStatus(this.get("tail")),t={branch:1,head:f.edgeUpstreamHeadOpacity,none:f.edgeUpstreamNoneOpacity};if(t[e]===undefined)throw new Error("bad stat");return t[e]},getAttributes:function(){var e=this.getBezierCurve(),t=this.getOpacity();return{path:{path:e,opacity:t}}},animateUpdatedPath:function(e,t){var n=this.getAttributes();this.animateToAttr(n,e,t)},animateFromAttrToAttr:function(e,t,n,r){this.animateToAttr(e,0),this.animateToAttr(t,n,r)},animateToAttr:function(e,t,n){if(t===0){this.get("path").attr(e.path);return}this.get("path").toBack(),this.get("path").stop(),this.get("path").animate(e.path,t!==undefined?t:this.get("animationSpeed"),n||this.get("animationEasing"))}}),h=a.Collection.extend({model:c});n.VisEdgeCollection=h,n.VisEdge=c}),e.define("/src/js/util/mock.js",function(e,t,n,r,i,s,o){n.mock=function(e){var t={},n=function(){};for(var r in e.prototype)t[r]=n;return t}}),e.define("/src/js/views/builderViews.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?window.Backbone:e("backbone"),l=e("../util"),c=e("../intl"),h=e("../util/keyboard").KeyboardListener,p=e("../views"),d=p.ModalTerminal,v=p.ContainedBase,m=v.extend({tagName:"div",className:"textGrabber box vertical",template:u.template($("#text-grabber").html()),initialize:function(e){e=e||{},this.JSON={helperText:e.helperText||"Enter some text"},this.container=e.container||new d({title:"Enter some text"}),this.render(),e.initialText&&this.setText(e.initialText),e.wait||this.show()},getText:function(){return this.$("textarea").val()},setText:function(e){this.$("textarea").val(e)}}),g=v.extend({tagName:"div",className:"markdownGrabber box horizontal",template:u.template($("#markdown-grabber-view").html()),events:{"keyup textarea":"keyup"},initialize:function(e){e=e||{},this.deferred=e.deferred||a.defer(),e.fromObj&&(e.fillerText=e.fromObj.options.markdowns.join("\n")),this.JSON={previewText:e.previewText||"Preview",fillerText:e.fillerText||"## Enter some markdown!\n\n\n"},this.container=e.container||new d({title:e.title||"Enter some markdown"}),this.render();if(!e.withoutButton){var t=a.defer();t.promise.then(u.bind(this.confirmed,this)).fail(u.bind(this.cancelled,this)).done();var n=new p.ConfirmCancelView({deferred:t,destination:this.getDestination()})}this.updatePreview(),e.wait||this.show()},confirmed:function(){this.die(),this.deferred.resolve(this.getRawText())},cancelled:function(){this.die(),this.deferred.resolve()},keyup:function(){this.throttledPreview||(this.throttledPreview=u.throttle(u.bind(this.updatePreview,this),500)),this.throttledPreview()},getRawText:function(){return this.$("textarea").val()},exportToArray:function(){return this.getRawText().split("\n")},getExportObj:function(){return{markdowns:this.exportToArray()}},updatePreview:function(){var t=this.getRawText(),n=e("markdown").markdown.toHTML(t);this.$("div.insidePreview").html(n)}}),y=v.extend({tagName:"div",className:"markdownPresenter box vertical",template:u.template($("#markdown-presenter").html()),initialize:function(e){e=e||{},this.deferred=e.deferred||a.defer(),this.JSON={previewText:e.previewText||"Here is something for you",fillerText:e.fillerText||"# Yay"},this.container=new d({title:"Check this out..."}),this.render();if(!e.noConfirmCancel){var t=new p.ConfirmCancelView({destination:this.getDestination()});t.deferred.promise.then(u.bind(function(){this.deferred.resolve(this.grabText())},this)).fail(u.bind(function(){this.deferred.reject()},this)).done(u.bind(this.die,this))}this.show()},grabText:function(){return this.$("textarea").val()}}),b=v.extend({tagName:"div",className:"demonstrationBuilder box vertical",template:u.template($("#demonstration-builder").html()),events:{"click div.testButton":"testView"},initialize:function(e){e=e||{},this.deferred=e.deferred||a.defer();if(e.fromObj){var t=e.fromObj.options;e=u.extend({},e,t,{beforeMarkdown:t.beforeMarkdowns.join("\n"),afterMarkdown:t.afterMarkdowns.join("\n")})}this.JSON={},this.container=new d({title:"Demonstration Builder"}),this.render(),this.beforeMarkdownView=new g({container:this,withoutButton:!0,fillerText:e.beforeMarkdown,previewText:"Before demonstration Markdown"}),this.beforeCommandView=new m({container:this,helperText:"The git command(s) to set up the demonstration view (before it is displayed)",initialText:e.beforeCommand||"git checkout -b bugFix"}),this.commandView=new m({container:this,helperText:"The git command(s) to demonstrate to the reader",initialText:e.command||"git commit"}),this.afterMarkdownView=new g({container:this,withoutButton:!0,fillerText:e.afterMarkdown,previewText:"After demonstration Markdown"});var n=a.defer(),r=new p.ConfirmCancelView({deferred:n,destination:this.getDestination()});n.promise.then(u.bind(this.confirmed,this)).fail(u.bind(this.cancelled,this)).done()},testView:function(){var t=e("../views/multiView").MultiView;new t({childViews:[{type:"GitDemonstrationView",options:this.getExportObj()}]})},getExportObj:function(){return{beforeMarkdowns:this.beforeMarkdownView.exportToArray(),afterMarkdowns:this.afterMarkdownView.exportToArray(),command:this.commandView.getText(),beforeCommand:this.beforeCommandView.getText()}},confirmed:function(){this.die(),this.deferred.resolve(this.getExportObj())},cancelled:function(){this.die(),this.deferred.resolve()},getInsideElement:function(){return this.$(".insideBuilder")[0]}}),w=v.extend({tagName:"div",className:"multiViewBuilder box vertical",template:u.template($("#multi-view-builder").html()),typeToConstructor:{ModalAlert:g,GitDemonstrationView:b},events:{"click div.deleteButton":"deleteOneView","click div.testButton":"testOneView","click div.editButton":"editOneView","click div.testEntireView":"testEntireView","click div.addView":"addView","click div.saveView":"saveView","click div.cancelView":"cancel"},initialize:function(e){e=e||{},this.deferred=e.deferred||a.defer(),this.multiViewJSON=e.multiViewJSON||{},this.JSON={views:this.getChildViews(),supportedViews:u.keys(this.typeToConstructor)},this.container=new d({title:"Build a MultiView!"}),this.render(),this.show()},saveView:function(){this.hide(),this.deferred.resolve(this.multiViewJSON)},cancel:function(){this.hide(),this.deferred.resolve()},addView:function(e){var t=e.target,n=$(t).attr("data-type"),r=a.defer(),i=this.typeToConstructor[n],s=new i({deferred:r});r.promise.then(u.bind(function(){var e={type:n,options:s.getExportObj()};this.addChildViewObj(e)},this)).fail(function(){}).done()},testOneView:function(t){var n=t.target,r=$(n).attr("data-index"),i=this.getChildViews()[r],s=e("../views/multiView").MultiView;new s({childViews:[i]})},testEntireView:function(){var t=e("../views/multiView").MultiView;new t({childViews:this.getChildViews()})},editOneView:function(e){var t=e.target,n=$(t).attr("data-index"),r=$(t).attr("data-type"),i=a.defer(),s=new this.typeToConstructor[r]({deferred:i,fromObj:this.getChildViews()[n]});i.promise.then(u.bind(function(){var e={type:r,options:s.getExportObj()},t=this.getChildViews();t[n]=e,this.setChildViews(t)},this)).fail(function(){}).done()},deleteOneView:function(e){var t=e.target,n=$(t).attr("data-index"),r=this.getChildViews(),i=r.slice(0,n).concat(r.slice(n+1));this.setChildViews(i),this.update()},addChildViewObj:function(e,t){var n=this.getChildViews();n.push(e),this.setChildViews(n),this.update()},setChildViews:function(e){this.multiViewJSON.childViews=e},getChildViews:function(){return this.multiViewJSON.childViews||[]},update:function(){this.JSON.views=this.getChildViews(),this.renderAgain()}});n.MarkdownGrabber=g,n.DemonstrationBuilder=b,n.TextGrabber=m,n.MultiViewBuilder=w,n.MarkdownPresenter=y}),e.define("/src/js/dialogs/levelBuilder.js",function(e,t,n,r,i,s,o){n.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Welcome to the level builder!","","Here are the main steps:","","  * Set up the initial environment with git commands","  * Define the starting tree with ```define start```","  * Enter the series of git commands that compose the (optimal) solution","  * Define the goal tree with ```define goal```. Defining the goal also defines the solution","  * Optionally define a hint with ```define hint```","  * Edit the name with ```define name```","  * Optionally define a nice start dialog with ```edit dialog```","  * Enter the command ```finish``` to output your level JSON!"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 欢迎使用关卡生成器！","","主要步骤如下：","","  * 使用 git 命令布置好初始环境","  * 使用 ```define start``` 命令定义起始树","  * 输入一系列 git 命令，编好答案","  * 使用 ```define goal``` 命令定义目标树。定义目标的同时定义答案","  * 还可以用 ```define hint``` 命令定义一个提示","  * 用 ```define name``` 修改名称","  * 还可以用 ```edit dialog``` 定义一个漂亮的开始对话框","  * 输入 ```finish``` 就可以输出你的关卡数据（JSON）了！"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Bienvenue dans l'éditeur niveaux !","","Voici les étapes principales :","","  * Mettez en place l'environnement initial avec des commandes git","  * Définissez l'arbre de départ avec ```define start```","  * Saisissez la série de commandes git qui composent la solution (optimale)","  * Définissez l'arbre cible avec ```define goal```. Cela définit aussi la solution","  * Optionnellement, définissez un indice avec ```define hint```","  * Changez le nom avec ```define name```","  * Optionellement, definissez un joli dialogue de départ avec ```edit dialog```","  * Entrez la commande ```finish``` pour délivrer votre niveau JSON!"]}}]}}),e.define("/src/js/level/disabledMap.js",function(e,t,n,r,i,s,o){function h(e){e=e||{},this.disabledMap=e.disabledMap||{"git cherry-pick":!0,"git rebase":!0}}var u=e("underscore"),a=e("../intl"),f=e("../commands"),l=e("../util/errors"),c=l.GitError;h.prototype.getInstantCommands=function(){var e=[],t=function(){throw new c({msg:a.str("command-disabled")})};return u.each(this.disabledMap,function(n,r){var i="git";r=r.slice(i.length+1);var s=f.commands.getRegexMap()[i][r];if(!s)throw new Error("wuttttt this disbaled command"+r+" has no regex matching");e.push([s,t])}),e},n.DisabledMap=h}),e.define("/src/js/dialogs/confirmShowSolution.js",function(e,t,n,r,i,s,o){n.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Are you sure you want to see the solution?","","I believe in you! You can do it"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 确定要看答案吗？","","哥相信你！你可以的"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Êtes-vous sûr de vouloir voir la solution ?","","Je crois en vous ! Vous pouvez le faire"]}}]}}),e.define("/src/js/level/arbiter.js",function(e,t,n,r,i,s,o){function h(){this.levelMap={},this.levelSequences=f,this.sequences=[],this.init();var e;try{e=JSON.parse(localStorage.getItem("solvedMap")||"{}")}catch(t){console.warn("local storage failed",t)}this.solvedMap=e||{},c.getEvents().on("levelSolved",this.levelSolved,this)}var u=e("underscore"),a=e("backbone"),f=e("../../levels").levelSequences,l=e("../../levels").sequenceInfo,c=e("../app");h.prototype.init=function(){var e;u.each(this.levelSequences,function(e,t){this.sequences.push(t);if(!e||!e.length)throw new Error("no empty sequences allowed");u.each(e,function(e,n){this.validateLevel(e);var r=t+String(n+1),i=u.extend({},e,{index:n,id:r,sequenceName:t});this.levelMap[r]=i,this.levelSequences[t][n]=i},this)},this)},h.prototype.isLevelSolved=function(e){if(!this.levelMap[e])throw new Error("that level doesnt exist!");return Boolean(this.solvedMap[e])},h.prototype.levelSolved=function(e){if(!e)return;this.solvedMap[e]=!0,this.syncToStorage()},h.prototype.resetSolvedMap=function(){this.solvedMap={},this.syncToStorage(),c.getEvents().trigger("levelSolved")},h.prototype.syncToStorage=function(){try{localStorage.setItem("solvedMap",JSON.stringify(this.solvedMap))}catch(e){console.warn("local storage fialed on set",e)}},h.prototype.validateLevel=function(e){e=e||{};var t=["name","goalTreeString","solutionCommand"],n=["hint","disabledMap","startTree"];u.each(t,function(t){if(e[t]===undefined)throw console.log(e),new Error("I need this field for a level: "+t)})},h.prototype.getSequenceToLevels=function(){return this.levelSequences},h.prototype.getSequences=function(){return u.keys(this.levelSequences)},h.prototype.getLevelsInSequence=function(e){if(!this.levelSequences[e])throw new Error("that sequecne name "+e+"does not exist");return this.levelSequences[e]},h.prototype.getSequenceInfo=function(e){return l[e]},h.prototype.getLevel=function(e){return this.levelMap[e]},h.prototype.getNextLevel=function(e){if(!this.levelMap[e])return console.warn("that level doesnt exist!!!"),null;var t=this.levelMap[e],n=t.sequenceName,r=this.levelSequences[n],i=t.index+1;if(i<r.length)return r[i];var s=this.sequences.indexOf(n)+1;if(s<this.sequences.length){var o=this.sequences[s];return this.levelSequences[o][0]}return null},n.LevelArbiter=h}),e.define("/src/levels/index.js",function(e,t,n,r,i,s,o){n.levelSequences={intro:[e("../../levels/intro/commits").level,e("../../levels/intro/branching").level,e("../../levels/intro/merging").level,e("../../levels/intro/rebasing").level],rampup:[e("../../levels/rampup/detachedHead").level,e("../../levels/rampup/relativeRefs").level,e("../../levels/rampup/relativeRefs2").level,e("../../levels/rampup/reversingChanges").level],move:[e("../../levels/rampup/cherryPick").level,e("../../levels/rampup/interactiveRebase").level],mixed:[e("../../levels/mixed/grabbingOneCommit").level,e("../../levels/mixed/jugglingCommits").level,e("../../levels/mixed/jugglingCommits2").level],advanced:[e("../../levels/rebase/manyRebases").level,e("../../levels/advanced/multipleParents").level,e("../../levels/rebase/selectiveRebase").level]},typeof window!="undefined"&&window.location&&window.location.href.indexOf("showRemote")!==-1&&(n.levelSequences.remote=[e("../../levels/remote/clone").level]),n.sequenceInfo={intro:{displayName:{en_US:"Introduction Sequence",ja:"まずはここから",fr_FR:"Séquence d'introduction",zh_CN:"基础篇",ko:"기본 명령어"},about:{en_US:"A nicely paced introduction to the majority of git commands",ja:"gitの基本的なコマンド群をほどよいペースで学ぶ",fr_FR:"Une introduction en douceur à la majorité des commandes git",zh_CN:"循序渐进介绍git主要命令",ko:"브랜치 관련 주요 git 명령어를 깔끔하게 알려드립니다"}},rampup:{displayName:{en_US:"Ramping Up",ja:"次のレベルに進もう",fr_FR:"Montée en puissance",zh_CN:"进阶篇"},about:{en_US:"The next serving of 100% git awesomes-ness. Hope you're hungry",ja:"更にgitの素晴らしさを堪能しよう",fr_FR:"Le prochain service git 100% excellence. J'espère que vous êtes affamés",zh_CN:"接下来是git的超赞特性。迫不及待了吧！"}},remote:{displayName:{en_US:"Push & Pull -- Git Remotes!"},about:{en_US:"Time to share your 1's and 0's kids; coding just got social"}},move:{displayName:{en_US:"Moving Work Around",ja:"Rebaseをモノにする",fr_FR:"Maîtrise Rebase, Luke!",zh_CN:"精通Rebase！",ko:"리베이스 완전정복!"},about:{en_US:"Get comfortable with modifying the source tree",ja:"話題のrebaseってどんなものだろう？って人にオススメ",fr_FR:"Qu'est-ce que ce rebase dont tout le monde parle ? Découvrez-le !",ko:"그 좋다고들 말하는 rebase에 대해 알아봅시다!",zh_CN:"大家都在说的rebase究竟是神马？看看吧！"}},mixed:{displayName:{en_US:"A Mixed Bag",ja:"様々なtips",fr_FR:"Un assortiment",ko:"종합선물세트",zh_CN:"大杂烩？"},about:{en_US:"A mixed bag of Git techniques, tricks, and tips",ja:"gitを使う上での様々なtipsやテクニックなど",fr_FR:"Un assortiment de techniques et astuces pour utiliser Git",ko:"Git을 다루는 다양한 팁과 테크닉을 다양하게 알아봅니다",zh_CN:"Git技术，技巧与贴士杂烩"}},advanced:{displayName:{en_US:"Advanced Topics",fr_FR:"Sujets Avancés",zh_CN:"高级主题"},about:{en_US:"For the truly brave!",fr_FR:"Pour les plus courageux !",zh_CN:"只为真正的勇士！"}}}}),e.define("/levels/intro/commits.js",function(e,t,n,r,i,s,o){n.level={name:{en_US:"Introduction to Git Commits",fr_FR:"Introduction aux commits avec Git",ja:"Gitのコミット",ko:"Git 커밋 소개",zh_CN:"Git Commits简介"},goalTreeString:'{"branches":{"master":{"target":"C3","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git commit;git commit",startTree:'{"branches":{"master":{"target":"C1","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',hint:{en_US:"Just type in 'git commit' twice to finish!",fr_FR:"Il suffit de saisir 'git commit' deux fois pour réussir !",zh_CN:"敲两次 'git commit' 就好啦！",ja:"'git commit'コマンドを2回打てば完成!",ko:"'git commit'이라고 두 번 치세요!"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","A commit in a git repository records a snapshot of all the files in your directory. It's like a giant copy and paste, but even better!","","Git wants to keep commits as lightweight as possible though, so it doesn't just copy the entire directory every time you commit. It actually stores each commit as a set of changes, or a \"delta\", from one version of the repository to the next. That's why most commits have a parent commit above them -- you'll see this later in our visualizations.","",'In order to clone a repository, you have to unpack or "resolve" all these deltas. That\'s why you might see the command line output:',"","`resolving deltas`","","when cloning a repo.","","It's a lot to take in, but for now you can think of commits as snapshots of the project. Commits are very light and switching between them is wicked fast!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see what this looks like in practice. On the right we have a visualization of a (small) git repository. There are two commits right now -- the first initial commit, `C0`, and one commit after that `C1` that might have some meaningful changes.","","Hit the button below to make a new commit"],afterMarkdowns:["There we go! Awesome. We just made changes to the repository and saved them as a commit. The commit we just made has a parent, `C1`, which references which commit it was based off of."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Go ahead and try it out on your own! After this window closes, make two commits to complete the level"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitのコミット","コミットによって、ディレクトリ中の全てのファイルのスナップショットを記録します。巨大なコピー＆ペーストのようなものですが、実はそれよりずっと良いものです。","","Gitではコミットを可能な限り軽量に保つために、コミット毎にフォルダ全体をコピーしません。実際にはGitは、コミットを直前のバージョンから一つ先のバージョンへの「変更の固まり」あるいは「差分」として記録します。後で出てきますが、ほとんどのコミットが親を持っているのはそういう理由からです。","","リポジトリをcloneする時には、内部動作としてはコミットの差分をたどって全ての変更を取得しています。cloneした時に以下のような表示が出るのは：","","`resolving deltas`（訳：差分を解決中）","","このためです。","","もっと説明したいところですが、しばらくはコミットをスナップショットのようなものだと考えてください。コミットは非常に軽量であり、コミット間の移動も非常に高速です。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["これがどういうことか、動きを見ていきましょう。図には（小さな）gitリポジトリが描かれています。コミットが2つあります ― `C0`という名前の初回のコミットがあり、`C1`という名前の次のコミットが続きます。これは何か意味のある変更かもしれません。","","下のボタンを押下して新しいコミットを作ってみましょう。"],afterMarkdowns:["できました! 良いですね。いまリポジトリに新しい変更が加えられ、1つのコミットとして保存されました。作成したコミットには親がいて、このコミットの出発点となった`C1`を指しています。"],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["実際に手を動かしてみましょう。このウィンドウを閉じたら、試しに2回コミットをしてみましょう。"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits Git","Un commit dans un dépôt (repository) git enregistre une image (snapshot) de tous les fichiers du repertoire. Comme un Copier-Coller géant, mais en bien mieux !","","Git fait en sorte que les commits soient aussi légers que possible donc il ne recopie pas tous le répertoire à chaque commit. En fait, git n'enregistre que l'ensemble des changments (\"delta\") depuis la version précédante du dépôt. C'est pour cette raison que la plupart des commits ont un commit parent -- ainsi que nous le verrons plus tard.","",'Pour cloner un dépôt, il faut décompresser ("résoudre") tous ces deltas. C\'est la raison pour laquelle la commande écrit :',"","`resolving deltas`","","lorsque l'on clone un dépôt.","","C'est beaucoup à absorber, mais pour l'instant vous pouvez considérer les commits comme des snapshots du projet. Les commits sont très légers et passer de l'un à l'autre est très rapide !"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons à quoi cela ressemble en pratique. Sur la droite, on peut visualiser un (petit) dépôt git. Il y a pour l'instant deux commits -- le premier commit initial, `C0`, et un commit suivant `C1` qui aurait des changements significatifs.","","Appuyez sur le bouton ci-dessous pour faire un nouveau commit"],afterMarkdowns:["C'est parti ! Super. Nous venons de faire des modifications sur le dépôt et de saugevarder celles-ci dans un commit. Ce commit que nous venons de faire a un parent, `C1`, qui référence le commit sur lequel il est basé."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Allez-y et essayez par vous-même ! Après la fermeture de cettefenêtre, faites deux commits pour terminer ce niveau."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 커밋","커밋은 Git 저장소에 여러분의 디렉토리에 있는 모든 파일에 대한 스냅샷을 기록하는 것입니다. 디렉토리 전체에 대한 복사해 붙이기와 비슷하지만 훨씬 유용합니다!","",'Git은 커밋을 가능한한 가볍게 유지하고자 해서, 커밋할 때마다 디렉토리 전체를 복사하는 일은 하지 않습니다. 각 커밋은 저장소의 이전 버전과 다음 버전의 변경내역("delta"라고도 함)을 저장합니다. 그래서 대부분의 커밋이 그 커밋 위에 부모 커밋을 가리키고 있게 되는 것입니다. -- 곧 그림으로 된 화면에서 살펴보게 될 것입니다.',"","저장소를 복제(clone)하려면, 그 모든 변경분(delta)를 풀어내야하는데, 그 때문에 명령행 결과로 아래와 같이 보게됩니다. ","","`resolving deltas`","","알아야할 것이 꽤 많습니다만, 일단은 커밋을 프로젝트의 각각의 스냅샷들로 생각하시는 걸로 충분합니다. 커밋은 매우 가볍고 커밋 사이의 전환도 매우 빠르다는 것을 기억해주세요!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["연습할 때 어떻게 보이는지 확인해보죠. 오른쪽 화면에 git 저장소를 그림으로 표현해 놓았습니다. 현재 두번 커밋한 상태입니다 -- 첫번째 커밋으로 `C0`, 그 다음으로 `C1`이라는 어떤 의미있는 변화가 있는 커밋이 있습니다.","","아래 버튼을 눌러 새로운 커밋을 만들어보세요"],afterMarkdowns:["이렇게 보입니다! 멋지죠. 우리는 방금 저장소 내용을 변경해서 한번의 커밋으로 저장했습니다. 방금 만든 커밋은 부모는 `C1`이고, 어떤 커밋을 기반으로 변경된 것인지를 가리킵니다."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["계속해서 직접 한번 해보세요! 이 창을 닫고, 커밋을 두 번 하면 다음 레벨로 넘어갑니다"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","git仓库中的一次提交（commit）记录目录下所有文件的快照。感觉像是大量的复制和粘贴，但 git 做的不只这么简单！","",'Git 希望提交记录尽可能地轻量，所以每次进行提交时，它不会简单地复制整个目录。实际上它把每次提交记录保存为从代码库的一个版本到下一个版本的变化集，或者说一个"增量（delta）"。所以，大部分提交记录都有一个父提交（parent commit）-- 我们会很快演示这一点。',"","克隆（clone）代码库时，需要解包（unpack）或者“解析（resolve）”所有的差异。所以在克隆代码库时，可能会看见如下命令行输出：","","`resolving deltas`","","要学的东西有很多，但现在你可以把提交记录看作是项目的快照。提交记录非常轻量且可以快速切换！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在实践中学习commit。右边是一个（小）git代码库的图示。当前有两个提交记录—— 初始提交`C0`和其后可能包含有用修改的提交`C1`。","","点击下面的按钮生成新的提交记录。"],command:"git commit",afterMarkdowns:["看！好玩吧！我们修改了代码，并保存为一次提交记录。刚刚做的提交`C2`有一个父提交（parent）`C1`，代表此次修改的基础。"],beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["接下来你可以随便测试。当前窗口关闭后，完成两次提交就可以过关！"]}}]}}}}),e.define("/levels/intro/branching.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master"},"bugFix":{"target":"C1","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',solutionCommand:"git branch bugFix;git checkout bugFix",name:{en_US:"Branching in Git",ja:"Gitのブランチ",ko:"Git에서 브랜치 쓰기",fr_FR:"Gérer les branches avec Git",zh_CN:"建立Git分支"},hint:{en_US:'Make a new branch with "git branch [name]" and check it out with "git checkout [name]"',ja:'ブランチの作成（"git branch [ブランチ名]"）と、チェックアウト（"git checkout [ブランチ名]"）',fr_FR:'Faites une nouvelle branche avec "git branch [nom]" positionnez-vous dans celle-ci avec "git checkout [nom]"',zh_CN:"用 'git branch [分支名]' 来创建分支，用 'git checkout [分支名]' 切换到分支",ko:'"git branch [브랜치명]"으로 새 브랜치를 만들고, "git checkout [브랜치명]"로 그 브랜치로 이동하세요'},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Branches","","Branches in Git are incredibly lightweight as well. They are simply references to a specific commit -- nothing more. This is why many Git enthusiasts chant the mantra:","","```","branch early, and branch often","```","","Because there is no storage / memory overhead with making many branches, it's easier to logically divide up your work than have big beefy branches.","",'When we start mixing branches and commits, we will see how these two features combine. For now though, just remember that a branch essentially says "I want to include the work of this commit and all parent commits."']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see what branches look like in practice.","","Here we will create a new branch named `newImage`"],afterMarkdowns:["There, that's all there is to branching! The branch `newImage` now refers to commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's try to put some work on this new branch. Hit the button below"],afterMarkdowns:["Oh no! The `master` branch moved but the `newImage` branch didn't! That's because we weren't \"on\" the new branch, which is why the asterisk (*) was on `master`"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's tell git we want to checkout the branch with","","```","git checkout [name]","```","","This will put us on the new branch before committing our changes"],afterMarkdowns:["There we go! Our changes were recorded on the new branch"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ok! You are all ready to get branching. Once this window closes,","make a new branch named `bugFix` and switch to that branch"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitのブランチ","","Gitではコミットだけでなく、ブランチもまた信じられないほど軽量です。ブランチとは単に特定のコミットを指示したポインタにしか過ぎません。Gitの達人は決まってこう言うのは、そのためです：","","```","早めに、かつ頻繁にブランチを切りなさい","```","","どれほど多くのブランチを作ってもストレージやメモリを全然使わないので、ブランチを肥大化させるよりも論理的に分割していく方が簡単なのです。","","ブランチとコミットをあわせて使い始めると、これら2つのフィーチャがどのように連動して機能するかがわかるでしょう。ここではとりあえず、ブランチは基本的には「あるコミットとその親のコミットたちを含めた全てのコミット」のことを呼ぶと覚えておいてください。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["では実際にブランチがどのようなものかを見ていきましょう。","","`newImage`という名前の新しいブランチを切ってみることにします。"],afterMarkdowns:["以上。必要な手順はこれだけです。いま作成された`newImage`ブランチは`C1`コミットを指しています。"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["この新しいブランチに何か変更を加えてみましょう。次のボタンを押してください。"],afterMarkdowns:["あれ？`newImage`ではなくて`master`ブランチが移動してしまいました。これは、私たちが`newImage`のブランチ上で作業していなかったためです。どのブランチで作業しているかは、アスタリスク(*)がついてるかどうかで分かります。"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["今度は作業したいブランチ名をgitに伝えてみましょう。","","```","git checkout [ブランチ名]","```","","このようにして、コミットする前に新しいブランチへと作業ブランチを移動することができます。"],afterMarkdowns:["できましたね。今度は新しいブランチに対して変更を記録することができました。"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["OK! もうどんなブランチでも切れますね。このウィンドウを閉じて、","`bugFix`という名前のブランチを作成し、そのブランチをチェックアウトしてみましょう。"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches Git","","Les branches sous Git sont incroyablement légères aussi. Elles sont simplment des références un commit spécifique -- rien de plus. C'est pourquoi beaucoup d'enthousiastes répètent en cœur :","","```","n'attendez pas pour faire des branches, et faites souvent des branches","```","","Parce qu'il n'y a pas de surcoût (stockage/mémoire) associés aux branches, il est facile de diviser son travail en de nombreuses branches plutôt que d'avoir quelques grosses branches.","","Nous verrons comment les banches et les commits interagissent quand nous les utiliserons ensemble. Pour l'instant, souvenez-vous qu'une branche est un moyen d'exprimer \"Je veux inclure le contenu de ce commit et de tous les commits parents.\""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Regardons à quoi ressemblent les branches en pratique.","","Nous allons nous positionner (checkout) dans une nouvelle branche appellée `newImage`"],afterMarkdowns:["Et voilà, c'est tout ! La branche `newImage` se réfère désormais au commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Travaillons mainenant dans cette branche. Appuyez sur le bouton ci-dessous."],afterMarkdowns:["Oh non! La branche `master` a bougé mais pas la branche `newImage` ! C'est parce aue nous n'étions pas  \"sur\" la nouvelle branche, comme indiqué par l'asterisque (*) sur `master`"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Indiquons à git que nous voulons nous positionner sur la branche avec ","","```","git checkout [nom]","```","","Ceci nous positionne sur la nouvelle branche avant de faire un commit avec nos modifications"],afterMarkdowns:["C'est parti ! Nos modifications ont été enregistrées sur la nouvelle branche"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ok! Vous êtes fin prêt pour faire des branches. Après la fermeture de cette fenêtre,","faites une nouvelle branche nommée `bugFix` et positionnez-vous sur cette branche"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Branches",""," Git 的分支非常轻量。它们只是简单地指向某个提交纪录——仅此而已。所以许多Git爱好者会念叨：","","```","早点建分支！经常建分支！","```","","创建分支没有储存或内存上的开销，所以按逻辑分解工作比维护单一的代码树要简单。","","同时使用分支和提交时，我们会看到两者如何配合。现在，只要记住使用分支其实就是在说：“我想包含本次提交及所有的父提交记录。”"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["举个例子看看分支究竟是什么。","","这里，我们切换到到名为`newImage`的新分支。"],command:"git branch newImage",afterMarkdowns:["看，这就是建立分支所需的操作啦！`newImage`分支现在指向提交记录`C1`。"],beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在让我们修改一下新分支。点击下面的按钮。"],command:"git commit",afterMarkdowns:["啊摔！`master`分支前进了，但`newImage`分支没有哇！这是因为我们没有“在”这个新分支上，这也是为什么星号（*）只在 `master` 上。"],beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用如下命令告诉git我们想要切换到新的分支","","```","git checkout [name]","```","","这可以让我们在提交修改之前切换到新的分支。"],command:"git checkout newImage; git commit",afterMarkdowns:["好的嘞！新的分支已经记录了我们的修改。"],beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["好啦，你已经准备好使用分支了。当前窗口关闭后，","创建一个叫 `bugFix` 的新分支，然后切换过去。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 브랜치","","깃의 브랜치도 놀랍도록 가볍습니다. 브랜치는 특정 커밋에 대한 참조(reference)에 지나지 않습니다. 이런 사실 때문에 수많은 Git 애찬론자들이 자주 이렇게 말하곤 합니다:","","```","브랜치를 서둘러서, 그리고 자주 만드세요","```","","브랜치를 많이 만들어도 메모리나 디스크 공간에 부담이 되지 않기 때문에, 여러분의 작업을 커다른 브랜치로 만들기 보다, 작은 단위로 잘게 나누는 것이 좋습니다.","",'브랜치와 커밋을 같이 쓸 때, 어떻게 두 기능이 조화를 이루는지 알아보겠습니다. 하지만 우선은, 단순히 브랜치를 "하나의 커밋과 그 부모 커밋들을 포함하는 작업 내역"이라고 기억하시면 됩니다.']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["브랜치가 어떤 것인지 연습해보죠.","","`newImage`라는 브랜치를 살펴보겠습니다."],afterMarkdowns:["저 그림에 브랜치의 모든 것이 담겨있습니다! 브랜치 `newImage`가 커밋 `C1`를 가리킵니다"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["이 새로운 브랜치에 약간의 작업을 더해봅시다. 아래 버튼을 눌러주세요"],afterMarkdowns:["앗! `master` 브랜치가 움직이고, `newImage` 브랜치는 이동하지 않았네요! 그건 우리가 새 브랜치 위에 있지 않았었기 때문입니다. 별표(*)가 `master`에 있었던 것이죠."],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["아래의 명령으로 새 브랜치로 이동해 봅시다.","","```","git checkout [브랜치명]","```","","이렇게 하면 변경분을 커밋하기 전에 새 브랜치로 이동하게 됩니다."],afterMarkdowns:["이거죠! 이제 우리의 변경이 새 브랜치에 기록되었습니다!"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["좋아요! 이제 직접 브랜치 작업을 연습해봅시다. 이 창을 닫고,","`bugFix`라는 새 브랜치를 만드시고, 그 브랜치로 이동해보세요"]}}]}}}}),e.define("/levels/intro/merging.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C4","id":"master"},"bugFix":{"target":"C2","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3","C2"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git checkout -b bugFix;git commit;git checkout master;git commit;git merge bugFix",name:{en_US:"Merging in Git",fr_FR:"Faire des 'merge' (fusions de branches) avec Git",ko:"Git에서 브랜치 합치기(Merge)",ja:"ブランチとマージ",zh_CN:"分支与合并"},hint:{en_US:"Remember to commit in the order specified (bugFix before master)",ja:"指示された順番でコミットすること（masterの前にbugFixで）",fr_FR:"Pensez à faire des commits dans l'ordre indiqué (bugFix avant master)",zh_CN:"记住按指定的顺序提交（bugFix先于master）",ko:"말씀드린 순서대로 커밋해주세요 (bugFix에 먼저 커밋하고 master에 커밋)"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches and Merging","","Great! We now know how to commit and branch. Now we need to learn some kind of way of combining the work from two different branches together. This will allow us to branch off, develop a new feature, and then combine it back in.","",'The first method to combine work that we will examine is `git merge`. Merging in Git creates a special commit that has two unique parents. A commit with two parents essentially means "I want to include all the work from this parent over here and this one over here, *and* the set of all their parents."',"","It's easier with visuals, let's check it out in the next view"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches; each has one commit that's unique. This means that neither branch includes the entire set of \"work\" in the repository that we have done. Let's fix that with merge.","","We will `merge` the branch `bugFix` into `master`"],afterMarkdowns:["Woah! See that? First of all, `master` now points to a commit that has two parents. If you follow the arrows upstream from `master`, you will hit every commit along the way to the root. This means that `master` contains all the work in the repository now.","","Also, see how the colors of the commits changed? To help with learning, I have included some color coordination. Each branch has a unique color. Each commit turns a color that is the blended combination of all the branches that contain that commit.","","So here we see that the `master` branch color is blended into all the commits, but the `bugFix` color is not. Let's fix that..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's merge `master` into `bugFix`:"],afterMarkdowns:["Since `bugFix` was downstream of `master`, git didn't have to do any work; it simply just moved `bugFix` to the same commit `master` was attached to.","","Now all the commits are the same color, which means each branch contains all the work in the repository! Woohoo!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["To complete this level, do the following steps:","","* Make a new branch called `bugFix`","* Checkout the `bugFix` branch with `git checkout bugFix`","* Commit once","* Go back to `master` with `git checkout`","* Commit another time","* Merge the branch `bugFix` into `master` with `git merge`","",'*Remember, you can always re-display this dialog with "help level"!*']}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ブランチとマージ","","いい調子ですね。これまでにコミットとブランチについて学びました。そろそろ2つのブランチを1つにまとめるやり方について見ていきましょう。これができれば新しいフィーチャの開発のために新しいブランチを切って、開発が終わったら変更を元のブランチへ統合することができるようになります。","","はじめに紹介するのは、`git merge`を使ったマージのやり方です。mergeコマンドによって、2つの独立した親を持つ特別なコミットを作ることができます。2つの親を持つコミットが持つ意味とは、「全く別々の場所にいるこの親とその親（*かつ*、それらの親の祖先全て）が持つ全ての変更を含んでいますよ」ということです。","","見てみた方が早いので、次の画面で確認してみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["それぞれ別のコミットを指している2つのブランチがあります。変更が別々のブランチに分散していて統合されていないケースです。これをマージで1つにまとめてみましょう。","","`bugFix`ブランチを`master`ブランチにマージしてみます。"],afterMarkdowns:["わあ。見ましたか？まず初めに、`master`ブランチが2つのコミットを親に持つ新しいコミットを指してますね。`master`から親をたどっていくと、最も古いコミットにたどり着くまでに全てのコミットを含んでいる様が確認できます。これで、全ての変更を含む`master`が完成しました。","","色がどう変わったかにも注目して下さい。学習を助けるために、ブランチ毎に色をつけています。それぞれのブランチは自分の色を持っていて、どのブランチから派生して出てくるか次第でコミットごとの色が決まります。","","今回のコミットには`master`ブランチの色が使われました。しかし`bugFix`ブランチの色がまだ変わってないようなので、これを変えてみましょう。"],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`master`ブランチを`bugFix`ブランチにマージしてみます。"],afterMarkdowns:["`bugFix`ブランチは`master`ブランチの派生元だったので、gitは実際大したことはしていません：`bugFix`ブランチを指していたポインタを`master`が指していたコミットへと移動させただけです。","","これで全てのコミットが同じ色になりました。つまり、リポジトリの中の全ての変更をそれぞれのブランチが持ったことになります。やったね！"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["以下の作業で理解度の確認をしてみましょう。 steps:","","* `bugFix`という名前で新しいブランチを切る","* `git checkout bugFix`コマンドで`bugFix`ブランチをチェックアウトする","* 一回だけコミット","* `git checkout`で`master`へ戻る","* もう1回コミットする","* `git merge`コマンドを使って、`bugFix`ブランチを`master`ブランチへとマージする","",'*注："help level"コマンドでこのヘルプにいつでも戻ってこれます*']}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches et Merges","","Super! Nous savons désormais comment faire des commits et de branches. Maintenant nous devons apprendre comment combiner ensemble les contenus de deux branches différentes. Ceci nous permettra de créer une nouvelle branche, développer une nouvelle fonctionnalité sur cette dernière, puis intégrer cette fonctionnalité en combinant le contenu de cette branche de développement à la branche d'origine(master par exemple).","","La première méthode que nous alons voir pour combiner le conenu de deux branches est `git merge`. Faire un 'merge' en git Git crée un commit spécial qui a deux parents. Un commit avec deux parents indique en susbtance \"Je veux inclure le contenu de ce parent et le conenu de cet autre parent, *et* l'ensemble de leurs parents.\"","","C'est plus facile en visualisant, regardons dans la vue suivante"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches; each has one commit that's unique. This means that neither branch includes the entire set of \"work\" in the repository that we have done. Let's fix that with merge.","","We will `merge` the branch `bugFix` into `master`"],afterMarkdowns:["Woah! See that? First of all, `master` now points to a commit that has two parents. If you follow the arrows upstream from `master`, you will hit every commit along the way to the root. This means that `master` contains all the work in the repository now.","","Also, see how the colors of the commits changed? To help with learning, I have included some color coordination. Each branch has a unique color. Each commit turns a color that is the blended combination of all the branches that contain that commit.","","So here we see that the `master` branch color is blended into all the commits, but the `bugFix` color is not. Let's fix that..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Faisons un merge  de `master` dans `bugFix`:"],afterMarkdowns:["Puisque `bugFix` était un descendant de `master`, git n'avait aucun travail à effectuer; il a simplement déplacé `bugFix` au même commit auquel `master` est attaché.","","Maintenant tous les commits sont de la même couleur, ce qui indique que chaque branche contient tout le contenu du dépôt ! Woohoo!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Pour accomplir ce niveau, effectuez les opérations suivantes :","","* Faites une nouvelle branche appelée `bugFix`","* Positionnez-vous sur la branche `bugFix` avec `git checkout bugFix`","* Faites un commit","* Retournez sur la branche `master` (commande `git checkout`)","* Faites un nouveau commit","* Fusionnez la branche `bugFix` dans `master` avec `git merge`","",'*Rappelez-vous que vous pouvez à tout moment réafficher ces indications avec "help level"!*']}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches and Merging","","Great! 我们已经知道怎么提交和使用分支了。接下来要学的一招是如何合并两个不同分支的工作。这让我们可以新建一个分支，在其上开发新功能，然后合并回主线。","","`git merge`是我们要学习的合并工作的第一个方法。合并产生一个特殊的提交记录，它包含两个唯一父提交。有两个父提交的提交记录本质上是：“我想把这两个父提交本身及它们的父提交集合都包含进来。”","","有图有真相，看看下面的图示就明白了。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["当前有两个分支：各有一个唯一的提交。这意味着没有一个分支包含我们对代码库的所有修改。让我们合并这两个分支来解决这个问题。","","我们要把 `bugFix` 合并到 `master` "],command:"git merge bugFix",afterMarkdowns:["哇！看见木有？首先，`master` 现在指向一个拥有两个父提交的提交记录。假如从 `master` 开始沿着箭头向上游走，在到达起点的路上会经过所有的提交记录。这说明有 `master` 包含了对代码库的所有修改。","","还有，看见各个提交记录的颜色变化了吗？为了帮助学习，我使用了颜色混合。每个分支都有特定的颜色。每个提交记录都变成了含有此提交的所有分支的混合色。","","所以，`master` 分支的颜色被混入到所有的提交记录，但 `bugFix` 没有。接下来就改一下这里吧。"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["让我们把 `master` 分支合并到 `bugFix` 吧。"],command:"git checkout bugFix; git merge master",afterMarkdowns:["因为 `bugFix` 分支在 `master` 分支的下游，git什么都不用做，只是简单地把`bugfix`分支移动到`master`指向的提交记录。","","现在所有的提交记录的颜色都是一样的啦，这表明每一个分支都包含了代码库的所有修改！继续！"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["想完成此关，执行收下操作：","","* 创建新分支 `bugFix` ","* 用 `git checkout bugFix` 切换到 `bugFix`分支","* 提交一次","* 用 `git checkout` 切换回 `master` ","* 再提交一次","* 用 `git merge` 合并 `bugFix`分支进 `master`","",'*记住，总是可以用 "help level" 命令来重新显示这个对话框！*']}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 브랜치와 합치기(Merge)","","좋습니다! 지금까지 커밋하고 브랜치를 만드는 방법을 알아봤습니다. 이제 두 별도의 브랜치를 합치는 몇가지 방법을 알아볼 차례입니다. 이제부터 배우는 방법으로 브랜치를 따고, 새 기능을 개발 한 다음 합칠 수 있게 될 것입니다.","",'처음으로 살펴볼 방법은 `git merge`입니다. Git의 합치기(merge)는 두 개의 부모(parent)를 가리키는 특별한 커밋을 만들어 냅니다. 두개의 부모가 있는 커밋이라는 것은 "한 부모의 모든 작업내역과 나머지 부모의 모든 작업, *그리고* 그 두 부모의 모든 부모들의 작업내역을 포함한다"라는 의미가 있습니다. ',"","그림으로 보는게 이해하기 쉬워요. 다음 화면을 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기에 브랜치가 두 개 있습니다. 각 브랜치에 독립된 커밋이 하나씩 있구요. 그 말은 이 저장소에 지금까지 작업한 내역이 나뉘어 담겨 있다는 얘기입니다. 두 브랜치를 합쳐서(merge) 이 문제를 해결해 볼까요?","","`bugFix` 브랜치를 `master` 브랜치에 합쳐(merge) 보겠습니다."],afterMarkdowns:["보셨어요? 우선, `master`가 두 부모가 있는 커밋을 가리키고 있습니다. ","","또, 커밋들의 색이 바뀐 것을 눈치 채셨나요? 이해를 돕기위해 색상으로 구분해 표현했습니다. 각 브랜치는 그 브랜치만의 색상으로 그렸습니다. 브랜치가 합쳐지는 커밋의 경우에는, 그 브랜치들의 색을 조합한 색상으로 표시 했습니다.","","그런식으로 여기에 `bugFix`브랜치 쪽을 제외한 나머지 커밋만 `master` 브랜치의 색으로 칠해져 있습니다. 이걸 고쳐보죠..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["이제 `master` 브랜치에 `bugFix`를 합쳐(merge) 봅시다:"],afterMarkdowns:["`bugFix`가 `master`의 부모쪽에 있었기 때문에, git이 별다른 일을 할 필요가 없었습니다; 간단히 `bugFix`를 `master`가 붙어 있는 커밋으로 이동시켰을 뿐입니다.","","짜잔! 이제 모든 커밋의 색이 같아졌고, 이는 두 브랜치가 모두 저장소의 모든 작업 내역을 포함하고 있다는 뜻입니다."],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["아래 작업을 해서 이 레벨을 통과하세요:","","* `bugFix`라는 새 브랜치를 만듭니다","* `git checkout bugFix`를 입력해 `bugFix` 브랜치로 이동(checkout)합니다.","* 커밋 한 번 하세요","* `git checkout` 명령어를 이용해 `master`브랜치로 돌아갑니다","* 커밋 또 하세요","* `git merge` 명령어로 `bugFix`브랜치를 `master`에 합쳐 넣습니다.","",'*아 그리고, "help level" 명령어로 이 안내창을 다시 볼 수 있다는 것을 기억해 두세요!*']}}]}}}}),e.define("/levels/intro/rebasing.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22bugFix%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C2%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22bugFix%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout -b bugFix;git commit;git checkout master;git commit;git checkout bugFix;git rebase master",name:{en_US:"Rebase Introduction",ja:"Rebaseの解説",fr_FR:"Introduction à rebase",ko:"리베이스(rebase)의 기본",zh_CN:"Rebase简介"},hint:{en_US:"Make sure you commit from bugFix first",ja:"初めにbugFixを指した状態でコミットする",fr_FR:"Assurez-vous de bien faire votre en premier votre commit sur bugFix",ko:"bugFix 브랜치에서 먼저 커밋하세요",zh_CN:"确保你先在 bugFix 分支进行提交"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'The second way of combining work between branches is *rebasing.* Rebasing essentially takes a set of commits, "copies" them, and plops them down somewhere else.',"","While this sounds confusing, the advantage of rebasing is that it can be used to make a nice linear sequence of commits. The commit log / history of the repository will be a lot cleaner if only rebasing is allowed.","","Let's see it in action..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches yet again; note that the bugFix branch is currently selected (note the asterisk)","","We would like to move our work from bugFix directly onto the work from master. That way it would look like these two features were developed sequentially, when in reality they were developed in parallel.","","Let's do that with the `git rebase` command"],afterMarkdowns:["Awesome! Now the work from our bugFix branch is right on top of master and we have a nice linear sequence of commits.","",'Note that the commit C3 still exists somewhere (it has a faded appearance in the tree), and C3\' is the "copy" that we rebased onto master.',"","The only problem is that master hasn't been updated either, let's do that now..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now we are checked out on the `master` branch. Let's go ahead and rebase onto `bugFix`..."],afterMarkdowns:["There! Since `master` was downstream of `bugFix`, git simply moved the `master` branch reference forward in history."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["To complete this level, do the following","","* Checkout a new branch named `bugFix`","* Commit once","* Go back to master and commit again","* Check out bugFix again and rebase onto master","","Good luck!"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","","ブランチを一つにまとめる方法として前回はマージを紹介しましたが、今回紹介するリベースを使うこともできます。リベースの動作は、マージするコミットのコピーをとって、どこかにストンと落とすというイメージです。","","ピンと来ないかもしれませんが、リベースのメリットは一本の連続したシーケンシャルなコミットに整形できることです。リベースだけ使っていると、コミットのログや履歴が非常にクリーンな状態に保たれます。","","早速実際にどう動くのかを見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["前回と同様の2つのブランチを考えます：仮にいまbugFixブランチをチェックアウトしているとします。（アスタリスクつきのもの）","","bugFixに入ってる作業内容をそのまま直接masterブランチ上の内容に移動したいとします。こうすることで、実際には並行して開発された2つの別々のブランチ上のフィーチャを、あたかも1本のブランチ上でシーケンシャルに開発されていたかのように見せることができます。","","`git rebase`コマンドでそれをやってみましょう。"],afterMarkdowns:["できた！これでbugFixブランチの作業内容はmasterブランチのすぐ先に移動したので、見た目が一本になってスッキリしました。","","気を付けてほしいのは、C3コミットはどこかに残ってるということ（ツリーの中で半透明にしてあります）、そしてC3'は（C3との接続が切れているC3の）コピーがmasterブランチ上に作られているということです。","","一つ問題が残ってて、masterブランチがまだ最新化されていませんね。ちょっと直してみましょう。。"],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["masterブランチはチェックアウトしてあります。この状態からmasterブランチを`bugFix`へとリベースしてみましょう。"],afterMarkdowns:["できた！`master`は`bugFix`の直前のコミットだったので、gitは単純に`master`ブランチのポインタを前に進めただけでした。"],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["以下の作業で理解度の確認をしてみましょう。","","* `bugFix`という名前の新しいブランチをチェックアウトする","* 一回だけコミット","* masterブランチに戻ってもう1回コミット","* bugFixをもう1回チェックアウトして、master上にリベース","","幸運を祈る！"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'La seconde façon de combiner les contenus de deux branches est *rebase*. Rebase prend un enselble de commits, les "recopie", et les ajoute en bout de chaine à un autre endroit.',"","Bien que cela puisse sembler compliqué, l'avantage de rebase est de permettre d'obtenir une simple séquence linéeire de commits. Les logs/l'historique du dépôt seront bien plus propres si seul rebase est autorisé (plutôt que merge).","","Voyons rebase en action…"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ici nous avons encore une fois deux branches; notez que nous sommes sur la branche bugFix (cf. l'asterisque)","","Nous voudrions transferer notre travail sur la branche 'bugFix' directement sur le travail dans 'master'. Ainsi on aurait l'impression que ces deux travaux ont été développés séquentiellement alors qu'en réalité ils ont été réalisés en parallèle.","","Faisons cela avec la commande `git rebase`"],afterMarkdowns:["Super! Désormais, le travail de la branche 'bugFix' est juste en haut de la branche 'master' et non avons une belle séquence linéaire de commits.","","Notez que le commit C3 existe toujours quelquepart (il est en grisé sur l'arbre), et C3' est la  \"copie\" que nous avons créée sur master avec rebase.","","Le seul problème est que master n'a pas été mis à jour, faisons cela maintenant…"],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nous sommes désormais positionnés sur la branche `master`. Continuons en faisant le rebase sur `bugFix`…","Et voilà ! Puisque `master` était un ascendant de `bugFix`, git a simplement déplacé la référence de la branche `master` en avant dans le temps."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Pour acomplir ce niveau, faites les opérations suivantes","","* Positionnez-vous (checkout) sur une nouvelle branche nommée `bugFix`","* Faites un commit","* Retournez sur master et faites un nouveau commit","* Positionnez-vous à nouveau sur bugFix et faites un rebase sur master","","Bonne chance !"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'*rebasing*是在分支之间合并工作的第二种方法。Rebasing就是取出一系列的提交记录，"复制"它们，然后把在别的某个地方放下来。',"","虽然听上去难以理解，rebasing 的优势是可以创造更线性的提交历史。假如只允许使用rebasing，代码库的提交日志/历史会更好看。","","让我们亲身体会下……"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这里，还是有两个分支；注意当前分支是 bugFix（看那颗星）","","我们想要把 bugfix 里面的工作直接移到 master 分支上。使用这个方法，两个分支的功能看起来像是按顺序开发，实际上它们是平行开发的。","","用 `git rebase`实现此目标"],command:"git rebase master",afterMarkdowns:["好完吧，现在 bugFix 分支上的工作在 master 的最前端，同时我们也得到了一个更线性的提交序列。","","注意，提交记录 C3 仍然存在（阴影的那货就是你了，还看什么看），而我们已经将 C3 复制到了master。","","现在唯一的问题是 master 分支还没有更新……下面就来更新它吧"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在，切换到 `master` 分支。接下来就把它 rebase 到 `bugFix` 吧……"],command:"git rebase bugFix",afterMarkdowns:["完成！因为 `master` 是 `bugFix` 的下游，所以 git 只把 `master` 分支的记录前移到 `bugFix` 上。"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["想完成此关，执行以下操作：","","* 新建`bugFix`分支","* 提交一次","* 切换回 master 分支再提交一次","* 再次切换到 bugFix 分支，rebase 到 master 上","","祝你好运啦！"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 리베이스(Rebase)","","브랜치끼리의 작업을 접목하는 두번째 방법은 *리베이스(rebase)*입니다. 리베이스는 기본적으로 커밋들을 모아서 복사한 뒤, 다른 곳에 떨궈 놓는 것입니다.","","조금 어려게 느껴질 수 있지만, 리베이스를 하면 커밋들의 흐름을 보기 좋게 한 줄로 만들 수 있다는 장점이 있습니다. 리베이스를 쓰면 저장소의 커밋 로그와 이력이 한결 깨끗해집니다.","","어떻게 동작하는지 살펴볼까요..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기 또 브랜치 두 개가 있습니다; bugFix브랜치가 현재 선택됐다는 점 눈여겨 보세요 (별표 표시)","","bugFix 브랜치에서의 작업을 master 브랜치 위로 직접 옮겨 놓으려고 합니다. 그렇게 하면, 실제로는 두 기능을 따로따로 개발했지만, 마치 순서대로 개발한 것처럼 보이게 됩니다.","","`git rebase` 명령어로 함께 해보죠."],afterMarkdowns:["오! 이제 bugFix 브랜치의 작업 내용이 master의 바로 위에 깔끔한 한 줄의 커밋으로 보이게 됐습니다.","","C3 커밋은 어딘가에 아직 남아있고(그림에서 흐려짐), C3'는 master 위에 올려 놓은 복사본입니다.","","master가 아직 그대로라는 문제가 남아있는데요, 바로 해결해보죠..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["우리는 지금 `master` 브랜치를 선택한 상태입니다. `bugFix` 브랜치쪽으로 리베이스 해보겠습니다..."],afterMarkdowns:["보세요! `master`가 `bugFix`의 부모쪽에 있었기 때문에, 단순히 그 브랜치를 더 앞쪽의 커밋을 가리키게 이동하는 것이 전부입니다."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["이하 작업을 하면 이번 레벨을 통과합니다","","* `bugFix`라는 새 브랜치를 만들어 선택하세요","* 커밋 한 번 합니다","* master로 돌아가서 또 커밋합니다","* bugFix를 다시 선택하고 master에 리베이스 하세요","","화이팅!"]}}]}}}}),e.define("/levels/rampup/detachedHead.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"C4","id":"HEAD"}}',solutionCommand:"git checkout C4",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Detach yo' HEAD",zh_CN:"分离HEAD"},hint:{en_US:"Use the label (hash) on the commit for help!",zh_CN:"使用提交记录上的标签(hash)来求助！"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moving around in Git","","Before we get to some of the more advanced features of Git, it's important to understand different ways to move through the commit tree that represents your project.","","Once you're comfortable moving around, your powers with other git commands will be amplified!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","","First we have to talk about \"HEAD\". HEAD is the symbolic name for the currently checked out commit -- it's essentially what commit you're working on top of.","","HEAD always points to the most recent commit which is reflected in the working tree. Most git commands which make changes to the working tree will start by changing HEAD.","","Normally HEAD points to a branch name (like bugFix). When you commit, the status of bugFix is altered and this change is visible through HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see this in action. Here we will reveal HEAD before and after a commit."],afterMarkdowns:["See! HEAD was hiding underneath our `master` branch all along."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Detaching HEAD","","Detaching HEAD just means attaching it to a commit instead of a branch. This is what it looks like beforehand:","","HEAD -> master -> C1",""],afterMarkdowns:["And now it's","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["To complete this level, let's detach HEAD from `bugFix` and attach it to the commit instead.","","Specify this commit by its hash. The hash for each commit is displayed on the circle that represents the commit."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 在Git中前后移动","","在接触Git的更多高级主题之前，我们先学习用不同的方法在代表你的项目的提交记录树上前后移动。","","一旦能够熟练地在Git中前进后退，你使用其他git命令的威力也会被放大！","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'我们首先看一下"HEAD". HEAD是当前提交记录的符号名称 -- 其实就是你正在其基础进行工作的提交记录。',"","HEAD总是指向最近一次提交记录，表现为当前工作树。大多数修改工作树的git命令都开始于改变HEAD指向。","","HEAD通常指向分支名（比如bugFix）。你提交时，改变了bugFix的状态，这一变化通过HEAD变得可见。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在实例中看一下。我们将会观察提交前后HEAD的位置。"],afterMarkdowns:["看! HEAD一直藏在`master`分支后面。"],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### 分离 HEAD","","分离HEAD就是让其指向一个提交记录而不是分支名。这是命令执行之前的样子： ","","HEAD -> master -> C1",""],afterMarkdowns:["现在变成了","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["想完成此关，从`bugFix`分离出HEAD并让其指向一个提交记录。","","通过hash值指定提交记录。每个提交记录的hash值显示在代表提交记录的圆圈中。"]}}]}}}}),e.define("/levels/rampup/relativeRefs.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"C3","id":"HEAD"}}',solutionCommand:"git checkout bugFix^",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Relative Refs (^)",zh_CN:"相对引用(^)"},hint:{en_US:"Remember the Caret (^) operator!",zh_CN:"记住插入(^)操作符!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Relative Refs","","Moving around in Git by specifying commit hashes can get a bit tedious. In the real world you won't have a nice commit tree visualization next to your terminal, so you'll have to use `git log` to see hashes.","","Furthermore, hashes are usually a lot longer in the real Git world as well. For instance, the hash of the commit that introduced the previous level is `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Doesn't exactly roll off the tongue...","","The upside is that Git is smart about hashes. It only requires you to specify enough characters of the hash until it uniquely identifies the commit. So I can type `fed2` instead of the long string above."]}},{type:"ModalAlert",options:{markdowns:["Like I said, specifying commits by their hash isn't the most convenient thing ever, which is why Git has relative refs. They are awesome!","","With relative refs, you can start somewhere memorable (like the branch `bugFix` or `HEAD`) and work from there.","","Relative commits are powerful, but we will introduce two simple ones here:","","* Moving upwards one commit at a time with `^`","* Moving upwards a number of times with `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's look at the Caret (^) operator first. Each time you append that to a ref name, you are telling Git to find the parent of the specified commit.","",'So saying `master^` is equivalent to "the first parent of `master`".',"","`master^^` is the grandparent (second-generation ancestor) of `master`","","Let's check out the commit above master here"],afterMarkdowns:["Boom! Done. Way easier than typing the commit hash"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["You can also reference `HEAD` as a relative ref. Let's use that a couple of times to move upwards in the commit tree"],afterMarkdowns:["Easy! We can travel backwards in time with `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["To complete this level, check out the parent commit of `bugFix`. This will detach `HEAD`.","","You can specify the hash if you want, but try using relative refs instead!"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 相对引用","","用指定提交记录hash值的方式在Git中移动会变得比较乏味。在现实中，你不会有漂亮的可视化的提交记录树放在终端旁边，所以你不得不用`git log`来查看hasn值。","","另外，hash值在真实的Git环境中也会更长。举个例子，前一关的介绍中的提交记录的hash值是`fed2da64c0efc5293610bdd892f82a58e8cbc5d8`。不要把舌头闪了...","","好的一面是，Git对hash的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。所以，我可以仅输入`fed2`而不是上面的一长串字符。"]}},{type:"ModalAlert",options:{markdowns:["我说过，通过hash指定提交记录不是很方便，所以Git引入了相对引用。这个就很牛掰了!","","使用相对引用，你可以从一个易于记忆的地方（比如分支名`bugFix`或`HEAD`）开始工作。","","相对引用非常给力，这里我介绍两个简单的用法：","","* 使用`^`向上移动1个提交记录","* 使用`~<num>`向上移动多个提交记录"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["首先看看插入(^)操作符。把插入符跟在引用名后面，表示让Git寻找指定提交记录的父提交。","",'所以`master^`相当于"`master`的父提交"。',"","`master^^`是`master`的父父提交（上上代祖先）","","切换到master的父提交"],afterMarkdowns:["唰！搞定。这种方式比输入提交记录的hash值简单多了！"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["你也可以`HEAD`把用作相对引用。以下命令使用`HEAD`在提交树中向上移动几次。"],afterMarkdowns:["简单！我们可以一直使用`HEAD^`向上移动。"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成此关，切换到`bugFix`的父提交。这会分离出`HEAD`.","","如果你愿意的话，使用hash值也可以过关，但为何不试试使用相对引用呢？"]}}]}}}}),e.define("/levels/rampup/relativeRefs2.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master"},"bugFix":{"target":"C0","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"C1","id":"HEAD"}}',solutionCommand:"git branch -f master C6;git checkout HEAD~1;git branch -f bugFix HEAD~1",startTree:'{"branches":{"master":{"target":"C4","id":"master"},"bugFix":{"target":"C5","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"C2","id":"HEAD"}}',hint:{en_US:"You'll need to use at least one direct reference (hash) to complete this level",zh_CN:"这一关至少要用到一次直接引用(hash)"},name:{en_US:"Relative Refs #2 (~)",zh_CN:"相对引用2(~)"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:['### The "~" operator',"","Say you want to move a lot of levels up in the commit tree. It might be tedious to type `^` several times, so Git also has the tilde (~) operator.","","","The tilde operator (optionally) takes in a trailing number that specifies the number of parents you would like to ascend. Let's see it in action"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's specify a number of commits back with `~`."],afterMarkdowns:["Boom! So concise -- relative refs are great."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Branch forcing","","You're an expert on relative refs now, so let's actually *use* them for something.","","One of the most common ways I use relative refs is to move branches around. You can directly reassign a branch to a commit with the `-f` option. So something like:","","`git branch -f master HEAD~3`","","Moves (by force) the master branch to three parents behind HEAD."]}},{type:"ModalAlert",options:{markdowns:["To complete this level, move `HEAD`, `master`, and `bugFix` to their goal destinations shown."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:['### The "~" operator',"","假设需要在提交树中向上移动很多步。使用多个`^`非常无聊，所以Git也引入了波浪(~)操作符。","","","波浪操作符后面可以（可选地）跟一个数字，指定向上移动多少次。看个例子"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用`~`一次后退多步."],afterMarkdowns:["唰！如此简洁--相对引用就是好啊！"],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Branch forcing","","你现在是相对引用的高手了，现在*用*他来实际做点事情。","","我使用相对引用最多的就是移动分支。你可以使用`-f`选项把直接让分支指向另一个提交。举个例子:","","`git branch -f master HEAD~3`","","（强制）移动master指向HEAD的第3级父提交。"]}},{type:"ModalAlert",options:{markdowns:["要完成此关，移动`HEAD`，`master`和`bugFix`到目标所示的位置。"]}}]}}}}),e.define("/levels/rampup/reversingChanges.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%7D%2C%22pushed%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22pushed%22%7D%2C%22local%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22local%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C2%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22pushed%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git reset HEAD~1;git checkout pushed;git revert HEAD",compareOnlyBranches:!0,startTree:'{"branches":{"master":{"target":"C1","id":"master"},"pushed":{"target":"C2","id":"pushed"},"local":{"target":"C3","id":"local"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"local","id":"HEAD"}}',name:{en_US:"Reversing Changes in Git",ja:"変更を元に戻す",fr_FR:"Annuler des changements avec Git",ko:"Git에서 작업 되돌리기",zh_CN:"在Git中撤销更改"},hint:{en_US:"Notice that revert and reset take different arguments.",fr_FR:"",zh_CN:"注意revert和reset使用不同的参数。",ko:"",ja:""},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Reversing Changes in Git","","There are many ways to reverse changes in Git. And just like committing, reversing changes in Git has both a low-level component (staging individual files or chunks) and a high-level component (how the changes are actually reversed). Our application will focus on the latter.","","There are two primary ways to undo changes in Git -- one is using `git reset` and the other is using `git revert`. We will look at each of these in the next dialog",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` reverts changes by moving a branch reference backwards in time to an older commit. In this sense you can think of it as "rewriting history;" `git reset` will move a branch backwards as if the commit had never been made in the first place.',"","Let's see what that looks like:"],afterMarkdowns:["Nice! Git simply moved the master branch reference back to `C1`; now our local repository is in a state as if `C2` had never happened"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'While reseting works great for local branches on your own machine, its method of "rewriting history" doesn\'t work for remote branches that others are using.',"","In order to reverse changes and *share* those reversed changes with others, we need to use `git revert`. Let's see it in action"],afterMarkdowns:["Weird, a new commit plopped down below the commit we wanted to reverse. That's because this new commit `C2'` introduces *changes* -- it just happens to introduce changes that exactly reverses the commit of `C2`.","","With reverting, you can push out your changes to share with others."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["To complete this level, reverse the two most recent commits on both `local` and `pushed`.","","Keep in mind that `pushed` is a remote branch and `local` is a local branch -- that should help you choose your methods."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## 変更を元に戻す","","Gitでは変更を元に戻す方法がたくさんあります。コミットと同じように、低レベルな動作（ファイル別だったりファイルの中の一部だったり）も高レベルな動作（変更のまとまりのキャンセル）もできます。このアプリケーションでは後者の方法について紹介します。","","基本的なアンドゥの方法が2つあります - 一つは`git reset`を使う方法で、もう1つは`git revert`を使う方法です。次のダイアログで一つ一つを見ていきます。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","","`git reset`はブランチのポインタを後方に移動することで変更のキャンセルを実現します。履歴を上書きするような動作だと思うと良いでしょうか：`git reset`はそもそも前のコミットなんかなかったかのように、ブランチのポインタを元に戻してくれます。","","どういう感じか見てみましょう。"],afterMarkdowns:["いいですね！Gitは単純にmasterブランチへのポインタを`C1`へ戻しました。これでこのローカルリポジトリにはまるで`C2`なんて無かったかのように変更をキャンセルできました。"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","自分のマシン上のブランチではさっきの`git reset`でうまくいきましたが、この「履歴を上書きする」手段は、他の人も使っているリモートにあるリポジトリに対しては使うことができません。","","変更を巻き戻して他の人とそれを共有するためには、`git revert`を使う必要があります。今度はこれを見てみましょう。"],afterMarkdowns:["あれ、おかしいな。巻き戻したいと思ってたコミットの下に新しいコミットが出来上がってしまったみたいです。なぜか。これは、この新しい`C2'`コミットは`C2`へ戻すのに必要な内容を確かに変更して巻き戻していたのです。","","こんな風にして、巻き戻した内容を他人と共有するためにはrevertを使います。"],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["この章の仕上げに、`local`と`pushed`の両方の直近のコミットを巻き戻してみましょう。","","`pushed`はリモートのブランチで、`local`はローカルであることに注意。正しくコマンドを使い分けましょう。"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Annuler des changements avec Git","","Il y a de nombreuses façons d'annuler des changement avec Git. De même que pour les commits, annuler des changements avec Git a à la fois un aspect bas-niveau (gestion dans le 'staging' des fichiers et morceaux de fichiers) et un aspect de plus haut niveau 9comment les changements sont effectivement annulés). Nous allons nous intéresser à ce dernier point.","","Il y a principalement deux façons d'annuler des changements avec Git -- l'une est `git reset` et l'autre est `git revert`. Nous allons maintenant voir chacune de ces façons",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","","`git reset` annule des changements en déplaçant la référence en arrière dans le temps sur un commit plus ancien. En ce sens, on peut considérer cela comme une façon de \"réécrire l'histoire\"; `git reset` fait remonter une branche en arrière comme si le(s) commit(s) n'avait jamais eu lieu.","","Regardons à quoi cela ressemble :"],afterMarkdowns:["Bravo ! Git a simplement déplacé la référence de la branche master en la faisant revenir sur `C1`; désormais notre dépôt est dans le même état que si `C2` n'avait jamais eu lieu"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","Bien que le reset marche parfaitement pour les branches locales sur notre propre machine, cette façon de \"réécrire l'histoire\" ne marche pas avec les banches distantes (remote) que d'autres personnes utilisent.","","Pour pouvoir annuler des changements et *partager* ces annulations avec d'autres, nous devons utiliser `git revert`. Regardons comment cela fonctionne"],afterMarkdowns:["Étrangement, un nouveau commit est appaaru en bas sous le commit que nous voulions annuler. C'est parce que ce nouveau commit `C2'` introduit des *modifications* -- celles qui correspondent justement à l'annulation de celles du commit `C2`.","","Avec revert, vous pouvez diffuser (push) vos modifications et les partager avec tout le monde."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Pour accomplir ce niveau, annulez les deux derniers commits à la fois sur `local` et sur `pushed`.","","Ayez à l'esprit que `pushed` est une branche distante et `local` est une branche locale -- cela devrait vous guider dans le choix de la méthode à employer."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 撤销 Git 里面的变动","","在 Git 里撤销修改的方法很多。和 commit 一样，在 Git 里撤销变动同时具有底层部分（暂存一些独立的文件或者片段）和高层部分（具体到变动是究竟怎么被撤销的）。我们这个应用主要关注后者。","","在 Git 里主要用两种方法来撤销变动 —— 一种是 `git reset`，另外一种是 `git revert`。让我们在下一个窗口逐一了解它们。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset`把分支记录回退到上一个提交记录来实现撤销改动。你可以认为这是在"重写历史"。`git reset`往回移动分支，原来指向的提交记录好像重来没有提交过一样。',"","让我们看看具体的操作："],command:"git reset HEAD~1",afterMarkdowns:["Nice!Git把master分支的指向简单地移回到`C1`；现在我们的本地代码库处于没有提交过`C2`的状态了。"],beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","虽然在你的本地分支中使用`git reset`很方便，但是这种“改写历史”的方法对别人的远端分支是无效的哦！","","为了撤销更改并*传播*给别人，我们需要使用`git revert`。举个例子"],command:"git revert HEAD",afterMarkdowns:["怪哉！在我们要撤销的提交记录后面居然多了一个新提交！这是因为新提交记录`C2'`引入了*更改*——刚好是用来撤销 `C2` 这个提交的。","","借助 revert，现在可以把你的更改传递给别人啦。"],beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["要完成此关，分别撤销`local`分支和`pushed`分支上的最近一次提交。","","记住 `pushed` 是一个远程分支，`local` 是一个本地分支 —— 有了这么明显的提示应该知道用哪种方法了吧？"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git에서 작업 되돌리기","","Git에는 작업한 것을 되돌리는 여러가지 방법이 있습니다. 변경내역을 되돌리는 것도 커밋과 마찬가지로 낮은 수준의 일(개별 파일이나 묶음을 스테이징 하는 것)과 높은 수준의 일(실제 변경이 복구되는 방법)이 있는데요, 여기서는 후자에 집중해 알려드릴게요.","","Git에서 변경한 내용을 되돌리는 방법은 크게 두가지가 있습니다 -- 하나는 `git reset`을 쓰는거고, 다른 하나는 `git revert`를 사용하는 것입니다. 다음 화면에서 하나씩 알아보겠습니다.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git 리셋(reset)","",'`git reset`은 브랜치로 하여금 예전의 커밋을 가리키도록 이동시키는 방식으로 변경 내용을 되돌립니다. 이런 관점에서 "히스토리를 고쳐쓴다"라고 말할 수 있습니다. 즉, `git reset`은 마치 애초에 커밋하지 않은 것처럼 예전 커밋으로 브랜치를 옮기는 것입니다.',"","어떤 그림인지 한번 보죠:"],afterMarkdowns:["그림에서처럼 master 브랜치가 가리키던 커밋을 `C1`로 다시 옮겼습니다; 이러면 로컬 저장소에는 마치 `C2`커밋이 아예 없었던 것과 마찬가지 상태가 됩니다."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git 리버트(revert)","",'각자의 컴퓨터에서 작업하는 로컬 브랜치의 경우 리셋(reset)을 잘 쓸 수 있습니다만, "히스토리를 고쳐쓴다"는 점 때문에 다른 사람이 작업하는 리모트 브랜치에는 쓸 수 없습니다.',"","변경분을 되돌리고, 이 되돌린 내용을 다른 사람들과 *공유하기* 위해서는, `git revert`를 써야합니다. 예제로 살펴볼게요."],afterMarkdowns:["어색하게도, 우리가 되돌리려고한 커밋의 아래에 새로운 커밋이 생겼습니다. `C2`라는 새로운 커밋에 *변경내용*이 기록되는데요, 이 변경내역이 정확히 `C2` 커밋 내용의 반대되는 내용입니다.","","리버트를 하면 다른 사람들에게도 변경 내역을 밀어(push) 보낼 수 있습니다."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["이 레벨을 통과하려면, `local` 브랜치와 `pushed` 브랜치에 있는 최근 두 번의 커밋을 되돌려 보세요.","","`pushed`는 리모트 브랜치이고, `local`은 로컬 브랜치임을 신경쓰셔서 작업하세요 -- 어떤 방법을 선택하실지 떠오르시죠?"]}}]}}}}),e.define("/levels/rampup/cherryPick.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22bugFix%22%7D%2C%22side%22%3A%7B%22target%22%3A%22C5%22%2C%22id%22%3A%22side%22%7D%2C%22another%22%3A%7B%22target%22%3A%22C7%22%2C%22id%22%3A%22another%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C6%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git cherry-pick C3 C4 C7",compareOnlyMasterHashAgnostic:!0,disabledMap:{"git rebase":!0},startTree:'{"branches":{"master":{"target":"C1","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"side":{"target":"C5","id":"side"},"another":{"target":"C7","id":"another"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C1"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{fr_FR:"Introduction à cherry-pick",en_US:"Cherry-pick Intro",de_DE:"Einführung Cherry-picking",ja:"cherry-pick入門",es_AR:"Introducción a cherry-pick",pt_BR:"Introdução ao cherry-pick",zh_CN:"介绍 Cherry-pick",zh_TW:"介紹 cherry-pick",ru_RU:"Введение в Cherry-pick",ko:"Cherry-pick 소개",uk:"Знайомство з cherry-pick"},hint:{fr_FR:"git cherry-pick suivis par les noms de commits",en_US:"git cherry-pick followed by commit names!",de_DE:"git cherry-pick gefolgt von Commit-Namen.",ja:"git cherry-pickの後にコミット名を追加",es_AR:"git cherry-pick seguido de los nombres de los commits",pt_BR:"git cherry-pick seguido dos nomes dos commits",zh_CN:"git cherry-pick 后面跟着 commit 的名字",zh_TW:"git cherry-pick 後面要接著 commit 的名稱",ru_RU:"git cherry-pick основывается на именах коммитов!",ko:"커밋의 이름들로 git cherry-pick 하세요!",uk:"git cherry-pick базується на іменах комітів!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moving Work Around","","So far we've covered the basics of git -- committing, branching, and moving around in the source tree. Just these concepts are enough to leverage 90% of the power of git repositories and cover the main needs of developers.","",'That remaining 10%, however, can be quite useful during complex workflows (or when you\'ve gotten yourself into a bind). The next concept we\'re going to cover is "moving work around" -- in other words, it\'s a way for developers to say "I want this work here and that work there" in precise, eloquent, flexible ways.',"","This may seem like a lot, but it's a simple concept."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","The first command in this series is called `git cherry-pick`. It takes on the following form:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","It's a very straightforward way of saying that you would like to copy a series of commits below your current location (`HEAD`). I personally love `cherry-pick` because there is very little magic involved and it's easy to understand.","","Let's see a demo!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here's a repository where we have some work in branch `side` that we want to copy to `master`. This could be accomplished through a rebase (which we have already learned), but let's see how cherry-pick performs."],afterMarkdowns:["That's it! We wanted commits `C2` and `C4` and git plopped them down right below us. Simple as that!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["To complete this level, simply copy some work from the three branches shown into master. You can see which commits we want by looking at the goal visualization.",""]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Déplacer votre travail","","Nous avons maintenant pratiqué les bases de git -- commits, branches, et déplacements dans l'arbre des commits. Ces seuls concepts sont suffisants pour utiliser 90% du pouvoir des dépôt git et satisfaire les principaux besoins des développeurs.","",'Les 10% restants, cependant, peuvent être assez utiles pour systèmes assez complexes (ou quand vous vous êtes mis tout seul dans le pétrin). Le prochain concept que nous allons aborder est "le déplacement de travail" (moving work around) -- en d\'autres termes, c\'est une façon des développeurs de dire  "Je veux ce travail ici et cet autre là.".',"","Cela peut sembler compliqué, mais c'est un concept simple."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","La première commande de cette série est `git cherry-pick`. Elle a le prototype suivant :","","* `git cherry-pick <Commit1> <Commit2> <...>`","","C'est une manière simple de dire qu'on voudrait copier une série de commits en-dessous de notre emplacement actuel (`HEAD`). Personnellement, j'adore `cherry-pick` parce qu'il y a un petit peu de magie dedans, et parce que c'est facile à comprendre.","","Faisons une démonstration !",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ici le dépôt que nous avons contient du travail dans la branche `side`, que nous voulons copier dans `master`. Cela pourrait être fait avec un rebase (que nous avons déjà appris), mais voyons comment cherry-pick fonctionne."],afterMarkdowns:["Voilà ! Nous voulions les commits `C2` et `C4` et git les a fait apparaître juste sous nos jambes. Aussi simple que ça !"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, copiez simplement le travail désigné dans la branche master. Vous pouvez voir les commits que nous souhaitons avoir en regardant dans la fenêtre d'objectif.",""]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moviendo el trabajo por ahí","","Hasta ahora cubrimos lo básico de git -- commitear, branchear, y movernos por el árbol de commits. Estos conceptos alcanzan para aprovechar el 90% del poder de los repositorios de git y cubrir las necesidades principales de los desarrolladores.","",'El 10% restante, sin embargo, puede ser bastante útil en flujos de trabajo complejos (o cuando te metiste en algún problema complicado). El próximo concepto que vamos a cubrir es el de "mover el trabajo por ahí" -- en otras palabras, una forma que tienen los desarrolladores de decir "Quiero este trabajo allá y este otro allá" de una manera precisa, elocuente y flexible.',"","Puede parecer un montón, pero es un concepto bastante simple."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","El primer comando en esta serie se llama `git cherry-pick`. Tiene la siguiente forma:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Es una manera bastante directa de decir que querés copiar una serie de commits sobre tu ubicación actual (`HEAD`). Personalmente amo `cherry-pick` porque hay muy poca magia involucrada y es bastante simple de entender.","","¡Veamos una demo!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Acá tenemos un repositorio con algo de trabajo en la rama `side` que queremos copiar a `master`. Podríamos lograrlo con un rebase (y ya aprendimos cómo), pero veamos cómo se comporta cherry-pick."],afterMarkdowns:["¡Eso es todo! Queríamos los commits `C2` y `C4` y git los aplicó justo donde estábamos. ¡Tan simple como eso!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente copiá algo de trabajo desde otras tres ramas a master. Podés ver qué commits queremos en la visualización del objetivo.",""]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Movendo trabalho por aí","","Por enquanto nós abordamos o básico do Git -- commitar, criar ramos, e mover-se pela árvore. Apenas esses conceitos já são suficientes para utilizar 90% do poder dos repositórios Git, e cobrem as principais necessidades dos desenvolvedores.","",'Os 10% restantes, entretanto, podem ser extremamente úteis em fluxos de trabalho complexos (ou quando você estiver em uma enrascada). O próximo conceito que vamos abordar é "movendo trabalho por aí" -- em outras palavras, veremos as formas como o desenvolvedor pode dizer "eu quero este trabalho aqui, e aquele ali" de formas precisas, eloquentes e flexíveis.',"","Isso pode parecer muito, mas os conceitos são simples."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","O primeiro comando desta série é o `git cherry-pick`. Ele é chamado da seguinte forma:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Trata-se de uma forma bastante direta de dizer que você gostaria de copiar uma série de commits abaixo do seu local atual (`HEAD`). Eu pessoalmente amo o  `cherry-pick` porque há muito pouca mágica envolvida e é fácil de entender o funcionamento.","","Vejamos uma demonstração!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aqui está um repositório onde temos algum trabalho no ramo `side` que desejamos copiar para o `master`. Isso poderia ser obtido por meio de um rebase (que já aprendemos), mas vamos ver como o cherry-pick se sai."],afterMarkdowns:["É isso! Queríamos os commits `C2` e `C4` e o git os inseriu logo abaixo de nós. Simples assim!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, simplesmente copie algum trabalho dos outros três ramos para o master. Você pode ver quais commits queremos copiar na visualização do objetivo.",""]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["移動 commit","","目前為止我們已經講了 git 的基礎，這些基礎包括 commit、branch 以及在 commit tree 中移動，只要有這些概念你就能發揮 git 90% 的功力，而且對於程式設計師來說，這樣就很夠了。","",'而剩下的 10%，在很複雜的專案上面，是非常有用的（或者當你陷入困惑時），我們下一個要講的概念是 "移動 commit"，換句話說，當你會這個非常有彈性的招數之後，你就可以說"我想要把這個 commit 放這裡，而那個 commit 放在那裡"。',"","這看起來很複雜，但其實它很簡單。"]}},{type:"ModalAlert",options:{markdowns:["## git cherry-pick","","我們要講的第一個指令叫作 `git cherry-pick`，它的用法如下：","","* `git cherry-pick <Commit1> <Commit2> <...>`","","當你想要複製幾個 commit 並且接在你目前的位置（`HEAD`）下面的時候，這會是一個非常直接的方式。我個人非常喜歡用 `cherry-pick`，因為它並不複雜，很容易就可以了解。","","讓我們來看一個例子！",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["這裡有一個 repo，在 `side` branch 中，我們有一些 commit 想要複製到 `master` branch 上，這可以透過一個 rebase 來完成（我們之前已經學到了），但是讓我們看看 `git cherry-pick` 怎麼做。"],afterMarkdowns:["就是那樣！我們複製了 `C2` 以及 `C4` 並且把它們放到我們的後面，很簡單吧！"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["要完成這個關卡，只需要從三個 branch 複製幾個 commit 到 `master` 下面，你可以從視覺化的目標看到我們需要哪些 commit。",""]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 转移提交(commits)","","到现在我们已经学习了 Git 的基础命令 -- commit, branch, checkout. 这些概念实现了 Git 90% 的功能, 同样也满足了开发者的主要需求 ","","然而, 剩余的 10% 可能在处理复杂的工作流时(或者当你陷入困惑时), 非常的重要. 我们会在下一个概念中涉及'转移工作区', 换句话说, 这是开发者表达'我想要把这个工作放这里, 那个工作也放这里', 精确地说, 这是很灵活的方式    ","","看起来内容很多, 其实概念相当简单"]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","本系列的第一个命令是 `git cherry-pick`, 命令形式为: ","","* `git cherry-pick <Commit1> <Commit2> <...>`","","这是一种很直接的推进方式 -- 如果你想将一些提交复制到你当前的位置 `HEAD` 下面, 我个人喜欢 `cherry-pick` 的原因是, 其概念非常简单 ",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在有一个仓库, 我们想将 `side` 分支下的工作复制到 `master` 分支, 我们可以通过 `rebase` 完成这一点(已经学过了哈), 但是这里我们想通过 `cherry-pick` 来完成."],afterMarkdowns:["这是它啦, 我们需要的是提交对象`C2` 和 `C4` ,所以 Git 将被它们抓取到当前分支下了. 就是这么简单!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["完成这节测试, 只需要简单的将分支的工作复制到 master.  如果想看我们所需要的提交对象, 你可以打开虚拟目标窗口 (`show goal`)",""]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Inhalte verschieben","","Bis jetzt haben wir uns die Grundlagen von Git angeschaut -- comitten, verzweigen und sich im Commit-Baum bewegen. Nur damit lässt sich schon 90% der Macht von Git-Repositories nutzen und die meisten Anforderungen von Entwicklern erfüllen.","",'Die übrigen 10% jedoch können in komplexeren Abläufen sehr hilfreich sein (oder wenn man sich in eine schwierige Lage manövriert hat). Das nächste was wir uns anschauen, ist, Inhalte durch den Commit-Baum zu schieben. Es gibt dem Entwickler die Möglichkeit in präziser, eloquenter Manier zu sagen "Ich will diese Inhalte hier und diese dort haben".',"","Das klingt vielleicht nach einer Menge, aber es ist sehr einfach."]}},{type:"ModalAlert",options:{markdowns:["## git cherry-pick","","Der erste Befehl in dieser Serie ist `git cherry-pick`. Er sieht so aus:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Er ist eine einfache Möglichkeit um auszudrücken, dass du eine Folge von Commits unter deinen aktuellen Checkout (also `HEAD`) hängen möchtest. Ich persönlich liebe `cherry-pick`, weil es wenig Magic enthält und einfach zu verstehen ist.","","Schauen wir's uns mal an.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir ein Repository mit einigem Zeugs im Branch `side`, das wir in den Branch `master` kopieren wollen. Das könnten wir mit einem Rebase machen (wie bereits gesehen), aber schauen wir mal wie das mit `cherry-pick` geht."],afterMarkdowns:["Das war's! Wir wollten die commits `C2` und `C4` und Git hat die einfach unter unseren aktuellen Checkout kopiert. So einfach ist das."],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu schaffen musst du einfach nur einige Commits aus den drei gezeigten Branches in den `master` kopieren. Der Zielbaum zeigt dir, welche.",""]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## コードの移動","","今まででは、gitの基本をひたすら見てきました -- コミットしたりブランチを派生したり、そしてソースツリーの中の色々な場所に移動することなどです。これらの概念だけで、gitリポジトリの力を90%使いこなすことができ、開発者の主な需要を満たしています。","","しかし最後の10%はより複雑なワークフローやちょっとトラブった時にとても役にたちます。これから取り上げる次の課題は「作業内容の移動」 –- 詳しく言えば、「この作業はここに置き、その作業はそこに置きたい」と言う開発者のために、優しく具体的で正確にその方法をお教えしましょう。","","ちょっと複雑に聞こえるかもしれませんが、概念は簡単です。"]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","このシリーズの一つ目のコマンドは、`git cherry-pick`。このコマンドの使い方は、次の形になります:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","現在の位置(`HEAD`)の下に一連のコミットをコピーしたいという意を単純に表す方法です。分かりにくいところが少ないので、個人的に私がとても好きなコマンドです。","","デモを見ていきましょう!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["このリポジトリには、現在`side`ブランチから`master`にコピーしたいコードがあります。この前に学んだrebaseコマンドでも実現可能ですが、ここではcherry-pickの動作を見ていきましょう。"],afterMarkdowns:["これだけで終わりです！コミット`C2` と `C4`を取得したかったわけですが、gitが現在の位置の直下に落としてくれました。単純ですね！"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするには、３つのブランチからmasterにコードをコピーしてください。どのコミットを取得するかについてはゴールのツリーをみてください。",""]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Поперемещаем изменения","","Итак, мы уже освоили основы Git: коммиты, ветки, перемещение по дереву изменений. Уже этих знаний достаточно, чтобы овладеть 90% мощью Git-репозиториев и покрыть нужды разработчиков.","",'А оставшиеся 10% будут очень полезны при сложных workflow (или если ты попал в сложную ситуацию). Теперь речь пойдёт о перемещении изменений — возможности, позволяющей разработчику сказать "Хочу, чтобы эти изменения были вот тут, а вот эти — вон там" и получить точные, правильные результаты, не теряя при этом гибкости разработки.',"","На первый взгляд запутанно, но на самом деле всё просто."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","Первая из таких команд - это `git cherry-pick`. Она выглядит вот так:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Это очень простой и прямолинейный способ сказать, что ты хочешь копировать несколько коммитов на место, где сейчас находишься (`HEAD`). Мы обожаем `cherry-pick` за то, что в нём очень мало магии и его очень просто понять и применять.","","Посмотрим на демонстрацию.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Вот репозиторий, где есть некие изменения в ветке `side`, которые мы хотим применить и в ветку `master`. Мы можем сделать это при помощи команды rebase, которую мы уже прошли, но давай посмотрим, как cherry-pick справится с этой задачей."],afterMarkdowns:["Вуаля! Мы хотели перенести коммиты `C2` и `C4`, Git дал нам их там, где они нужны. Всё просто!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти этот уровень, просто скопируй изменения из этих трёх веток в мастер. Чтобы понять, какие коммиты копировать, посмотри на визуализацию уровня.",""]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 작업을 여기저기로 옮기기","","지금까지 우리는 git의 기초를 배웠습니다. -- 커밋을하고, 브랜치를 만들고, 소스 트리 여기저기를 돌아다녔습니다. 이런 개념들을 아는 것만으로도 git repository의 힘을 90%이상 사용하고 개발자들이 필요로하는 작업의 대부분을 할 수 있습니다.","",'그 나머지 10% 기능이, 복잡한 작업(또는 작업중 막혔을때)중에 꽤 유용할 수 있습니다. 이제 배워 볼 다음 개념은 "작업을 여기저로 올기기" 다시 말해, 개발자들의 언어로 "이 일은 여기에 저 일은 저기에 두고 싶어" 정확하고 우아하고 유연하게.',"","다소 과해 보일 수 있는데, 간단한 개념입니다."]}},{type:"ModalAlert",options:{markdowns:["## Git 체리-픽 (Cherry-pick)","","이 시리즈의 첫 명령어는 `git cherry-pick` 입니다. 다음 과 같은 형태로 사용합니다:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","현재 위치(`HEAD`) 아래에 있는 일련의 커밋들에대한 복사본을 만들겠다는 것을 간단히 줄인 말입니다. 개인적으로 저는 `cherry-pick`을 아주 좋아합니다 왜냐하면 조금의 마법이 첨가되있고 이해하기 쉽기 때문입니다.","","데모를 확인해봅시다",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기 repository가 있습니다. `master`와 master로 복사하고 싶은 작업이 있는 브랜치 `side`가 있습니다. 이것은 rebase를 통해서 할 수 있습니다(이미 배운), 하지만 체리-픽이 이 작업을 어떻게 수행하는지 확인해 봅시다."],afterMarkdowns:["됬습니다! 우리는 `C2`와 `C4` 커밋을 원했고 git이 우리가 원하는 곳 바로 밑에 톡 떨어뜨려 줬습니다. 아주 간단하죠!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["이 레벨을 통과하기 위해서는 몇개의 작업을 세개의 브랜치들에서 master로 복사해와야합니다. 어떤 커밋들이 필요한지는 goal을 보고 확인하면 됩니다.",""]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Переміщуємо зміни","","Поки що ми розглядали основи git -- як працювати з комітами та гілками й переміщення по дереву комітів. Цього вже достатньо щоб використовувати 90% фунцкій гіт та мати змогу ефективно працювати з гіт як розробник.","",'Решта 10%, тим не менш, можуть бути надзвичайно корисними при роботі зі складними робочими процесами (workflow), чи коли ти чи ще хтось щось зробили не так і ти хочеш це виправити. Наступна концепція з якою ми познайомимось це "перенесення змін" -- іншими словами, це можливість розробника переміщувати коміти між гілками в простий та зручний спосіб.',"","Це може видаватися складним, але насправді це дуже проста концепція."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","Перша команда в цій серії називається `git cherry-pick`. Вона має наступну форму:","","* `git cherry-pick <Коміт1> <Коміт2> <...>`","","Це надзвичайно простий спосіб вказати гіту що потрібно скопіювати серію комітів до поточного розташування (`HEAD`). Персонально я обожнюю `cherry-pick` за його прямолінійнсть, це дуже зрозуміла концепція що не використовує прихованої магії","","Давайте подивимось на практиці!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ми бачимо репозиторій де є певні зміни в гілці `side` які ми хочемо скопіювати в  `master`. Для цього можна використати rebase (який ми вже вивчили), але подивимось як з цим впорається cherry-pick."],afterMarkdowns:["Оба-на! Ми хотіли коміти `C2` та `C4` і git додав їх до поточного розташування. Просто й доступно!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Щоб пройти це рівень, просто скопіюй якісь зміни з трьох гілок показаних на діаграмі в master. В візуалізації видно які коміти потрібно скопіювати.",""]}}]}}}}),e.define("/levels/rampup/interactiveRebase.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22master%22%7D%2C%22overHere%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22overHere%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase -i overHere --solution-ordering C3,C5,C4",compareOnlyMasterHashAgnostic:!0,disabledMap:{"git cherry-pick":!0},startTree:'{"branches":{"master":{"target":"C5","id":"master"},"overHere":{"target":"C1","id":"overHere"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"}}',hint:{en_US:"you can use either branches or relative refs (HEAD~) to specify the rebase target",es_AR:"podés usar tanto ramas como referencias relativas (HEAD~) para especificar el objetivo del rebase",pt_BR:"Você pode usar ou ramos ou referências relativas (HEAD~) para especificar o alvo do rebase",de_DE:"Du kannst entweder Branches oder relative Ref-Angaben (z.B. HEAD~) benutzen, um das Ziel des Rebase anzugeben.",fr_FR:"Vous pouvez utiliser soit les branches, soit les références relatives (HEAD~) pour spéficier la cible à rebaser",zh_CN:"你可以使用 branch 或者是相对位置（HEAD~）來指定 rebase 的目标",zh_TW:"你可以指定 branch 或者是相對位置（HEAD~）來表示 rebase 的目標",ru_RU:"Можно использовать либо ветки, либо относительные ссылки (HEAD~), чтобы указать цель для Rebase",ja:"リベースする対象の指定には、ブランチ名や相対リファレンス(HEAD~)が使えます",ko:"리베이스할 타겟으로 브랜치나 상대 참조(HEAD~)를 사용할 수 있습니다",uk:"ти можеш використовувати гілки чи відносні посилання (HEAD~) щоб вказувати ціль для rebase"},name:{en_US:"Interactive Rebase Intro",es_AR:"Introducción al rebase interactivo",pt_BR:"Introdução ao rebase interativo",de_DE:"Einführung Interactive Rebase",ja:"インタラクティブrebase入門",fr_FR:"Introduction à rebase",zh_CN:"Rebase 交互命令介绍 ",zh_TW:"介紹互動式的 rebase",ru_RU:"Введение в интерактивный Rebase",ko:"인터랙티브 리베이스 소개",uk:"Знайомство з інтерактивним rebase"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","Git cherry-pick is great when you know which commits you want (_and_ you know their corresponding hashes) -- it's hard to beat the simplicity it provides.","","But what about the situation where you don't know what commits you want? Thankfully git has you covered there as well! We can use interactive rebasing for this -- it's the best way to review a series of commits you're about to rebase.","","Let's dive into the details..."]}},{type:"ModalAlert",options:{markdowns:["All interactive rebase means is using the `rebase` command with the `-i` option.","","If you include this option, git will open up a UI to show you which commits are about to be copied below the target of the rebase. It also shows their commit hashes and messages, which is great for getting a bearing on what's what.","",'For "real" git, the UI window means opening up a file in a text editor like `vim`. For our purposes, I\'ve built a small dialog window that behaves the same way.']}},{type:"ModalAlert",options:{markdowns:["When the interactive rebase dialog opens, you have the ability to do 3 things:","","* You can reorder commits simply by changing their order in the UI (in our window this means dragging and dropping with the mouse).","* You can choose to completely omit some commits. This is designated by `pick` -- toggling `pick` off means you want to drop the commit.","* Lastly, you can squash commits. Unfortunately our levels don't support this for a few logistical reasons, so I'll skip over the details of this. Long story short, though -- it allows you to combine commits.","","Great! Let's see an example."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["When you hit the button, an interactive rebase window will appear. Reorder some commits around (or feel free to unpick some) and see the result!"],afterMarkdowns:["Boom! Git copied down commits in the exact same way you specified through the UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["To finish this level, do an interactive rebase and achieve the order shown in the goal visualization. Remember you can always `undo` or `reset` to fix mistakes :D"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","Git cherry-pick est pratique quand vous savez exactement quels commits vous voulez (_et_ que vous connaissez leurs identifiants) -- il est difficile de battre la simplicité qu'il procure.","","Mais que faire quand vous ne connaissez pas les identifiants des commits ? Heureusement git a pensé à vous dans pour ce cas-là ! Nous pouvons utiliser un rebase interactif pour cela -- c'est la meilleure façon de reconsidérer une série de commits que vous vous apprêtez à rebaser.","","Allons un peu plus dans les détails ..."]}},{type:"ModalAlert",options:{markdowns:["Tout rebase interactif signifie utiliser la commande `rebase` avec l'option `-i`.","","Si vous mettez cette option, git va ouvrir une interface graphique pour vous montrer quels commits vont être copiés en dessous de la cible sur laquelle vous rebasez. Elle vous montre aussi les identifiants et commentaires des commits, ce qui est pratique pour s'orienter parmi les commits.","","Pour le \"vrai\" git, l'interface graphique correspond en fait à ouvrir un fichier dans un éditeur de texte comme `vim`. Pour notre exemple, j'ai construit une petite fenêtre de dialogue qui se comporte de la même façon."]}},{type:"ModalAlert",options:{markdowns:["Quand le rebase interactif s'ouvre, vous avez la possibilité de faire 3 choses :","","* Vous pouvez réarranger les commits simplement en changeant leur ordre dans l'interface graphique (dans notre fenêtre de dialogue, cela signifie déplacer les objets dedans avec la souris -- drag and drop).","* Vous pouvez omettre certains commits. Cela est désigné par `pick` : cliquer sur `pick` désélectionne/resélectionne le commit.","* Enfin, vous pouvez écraser des commits. Malheureusement notre niveau ne supporte pas cette option, nous allons donc sauter les détails concernant cette possibilité. Pour faire court, cela vous permet de mélanger des commits.","","Super ! Voyons un exemple."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Quand vous activez le bouton, une fenêtre de rebase interactif va s'ouvrir. Reordonnez quelques commits (ou supprimez-en certains) et regardez le résultat !"],afterMarkdowns:["Boum ! Git a copié les commits de la même manière que vous l'aviez spécifié."],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, faites un rebase interactif et atteignez l'ordre indiqué dans le fenêtre d'objectif. Souvenez-vous que vous pouvez toujours exécuter les commandes `undo` ou `reset` pour réparer vos erreurs :D"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git interactive rebase","","當你知道你要複製哪些 commit（而且你也知道他們所對應的 hash 值），那麼 `git cherry-pick`  很適合你。","","但是如果你不知道你要的是哪些 commit 呢？ 很幸運的是，git 也有考慮到這個問題喔！我們可以用互動式的 rebase 來做到，當你想要檢查你想要的 commit 的時候，這會是最好的方法。","","讓我們來看一下這些細節..."]}},{type:"ModalAlert",options:{markdowns:["互動式的 rebase 相當於使用 rebase 這個指令的時候，後面加上一個 `-i` 的選項。","","如果你有包含了這個選項，git 就會打開一個 UI，讓你知道說有哪些 commit 會被複製下來，它也會告訴你它們的 hash 值以及可以讓你知道它們是什麼的訊息。","",'在"實務上"，UI 會利用一個編輯器（例如 vim）打開一個檔案，對於我們來說，我已經設計了一個有同樣功能的對話視窗。']}},{type:"ModalAlert",options:{markdowns:["當互動式的 rebase 的對話視窗打開之後，你就可以做到三件事情：","","* 你可以藉由改變這些 commit 在 UI 的位置（在我們的視窗中，可以透過滑鼠去拖拉），來重新排序它們的順序。","* 你可以選擇完全忽略掉某些 commit，可以用滑鼠按一下，使它變暗，就表示你要忽略掉該 commit。","* 最後, 你可以把 commit 合併在一起，但基於某些理由，在我們的關卡裡面並沒有這個功能。","","太棒了！讓我們來看一個例子！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["當你按下按鈕的時候，一個互動式的 rebase 的視窗就會跳出來，重新排序一些 commit（大膽忽略掉某些 commit），然後看一下結果吧！"],afterMarkdowns:["看吧！ git 根據你所選擇的 commit，把它們複製了下來。"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成這個關卡，使用互動式的 rebase，並且完成視覺化目標所表示 commit 的順序，記住！你可以經常使用 `undo` 或者 `reset` 來修正你的一些錯誤:D"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 交互式的 Rebase","","如果你知道你所需要的提交对象(相应的 hash), 那用 Git cherry-pick 就非常方便了 -- 很难有简单的方式了","","但是如果你不清楚你想要的提交对象的 hash 呢? 幸好 Git 帮你想到了这一点, 我们可以利用交互 rebase -- 如果你想衍合一系列的提交, 这就是最方便的方法了","","让我们看看细节.."]}},{type:"ModalAlert",options:{markdowns:["交互式 rebase 指的是 rebase 后跟一个参数: `-i`","","如果你包含了这个选项, Git 会开启一个 UI 并 展示出将要被复制到目标的提交对象, 它也会显示它们的提交 hash 和信息","","真实的 Git, UI 窗口指的是在类似于 Vim 的文本编辑器中打开一个文件. 考虑到我们的目标, 我建立了一个小型的会话窗口以完成相同的事儿."]}},{type:"ModalAlert",options:{markdowns:["当 rebase 会话窗口打开时, 你能做3件事:","","* 你可以在 UI 中做 提交对象的排序(在我们的窗口中, 这意味着你可以拖放完成这点)","* 你可以忽略某些提交 -- pick 会变暗","* 最后, 你可以合并提交. 遗憾的是我们的课程不支持此功能.","","好! 看看例子"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["当你点这个按钮时, 一个交互式的 rebase 窗口就会出现. 对提交对象做个排序, 再看看结果"],afterMarkdowns:["按照你指定的方式, Git 克隆了这些提交"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成本节, 做一个交互式的 rebase , 实现虚拟目标窗口中提示的提交顺序. 记住,  你随时都可以用 `undo`, `reset` 修复你的错误"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## git rebase interactivo","","git cherry-pick es genial cuando sabés cuáles commits querés (_y_ sabés sus hashes) -- es dificil superar la simpleza que provee.","","Pero ¿qué pasa cuando no sabés qué commits querés? Por suerte ¡git te cubre en esta situación, también! Podemos usar el rebase interactivo para esto -- es la mejor manera de revisar una serie de commits que estás por rebasear.","","Entremos en los detalles..."]}},{type:"ModalAlert",options:{markdowns:["Todo rebase interactivo significa usar el comando `rebase` con la opción `-i`.","","Si incluís esta opción, git abrirá una UI para mostrarte qué commits están a punto de ser copiados sobre el objetivo del rebase. También muestra sus hashes y mensajes, que ayuda mucho para saber qué es cada commit.","",'Para el git "de verdad", la UI signfica abrir un archivo en un editor de textos como `vim`. Para nuestro propósito, hice una pequeña interfaz que se comporta de ese mismo modo.']}},{type:"ModalAlert",options:{markdowns:["Cuando el diálogo de rebase interactivo se abre, tenés la capacidad de hacer 3 cosas:","","* Podés reordenar los commits con solamente cambiar su orden en la UI (en nuestra ventana, eso significa hacer drag & drop con el mouse).","* Podés elegir ignorar completamente algunos commits. Esto se designa con `pick` -- no hacerle `pick` a algún commit significa que querés ignorarlo.","* Finalmente, podés _squashear_ commits. Desafortunadamente, nuestros niveles no soportan esto por cuestiones logísticas, por lo que voy a ahorrarte los detalles. Haciéndola corta, te permite combinar varios commits en uno solo.","","¡Genial! Veamos un ejemplo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Cuando apretes el botón, va a aparecer una ventana de rebase interactivo. Reordená los commits (sentite libre de ignorar alguno, también) ¡y mirá el resultado!"],afterMarkdowns:["¡Boom! Git copió los commits exactamente de la misma manera que lo especificaste en la UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar el nivel, hacé un rebase interactivo y alcanzá el orden que se muestra en la visualización objetivo. Acordate que siempre podés hacer `undo` y `reset` para arreglar errores :D"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Rebase Interativo do Git","","O cherry-pick é ótimo quando você sabe de antemão quais commits você quer (_e_ você sabe os hashes correspondentes) -- é difícil bater a simplicidade que ele oferece.","","Mas e quando você não sabe quais commits você quer? Felizmente o git pode te ajudar nesta situação também! Podemos usar o rebase interativo para isso -- trata-se da melhor forma de rever uma série de commits sobre os quais você está prestes a fazer um rebase.","","Mergulhemos nos detalhes..."]}},{type:"ModalAlert",options:{markdowns:["O rebase interativo é simplesmente o comando `rebase` com a opção `-i`.","","Se você incluir essa opção, o git abrirá uma interface para mostrar quais commits estão prestes a serem copiados abaixo do alvo do rebase. Ele também mostra os hashes e as mensagens dos commits, o que é ótimo para ter noção do que é o que.","",'No git "de verdade", a interface nada mais é que um arquivo aberto em um editor de texto (por exemplo o `vim`). Para os nossos propósitos, eu montei uma pequena janela que se comporta da mesma forma.']}},{type:"ModalAlert",options:{markdowns:["Quando a janela de rebase interativo abrir, você pode fazer 3 coisas diferentes:","","* Você pode reordenar os commits simplesmente mudando sua ordem na interface (na nossa janela isso significa arrastar e soltar com o mouse).","* Você pode escolher simplesmente omitir alguns commits. Para isso, clique no botão `pick` -- deixar o `pick` desligado significa que você quer descartar o commit.",'* Por fim, você pode "esmagar" (fazer squash) nos commits. Infelizmente, nosso tutorial não será capaz de cobrir essa funcionalidade por alguns motivos logísticos, então vamos pular os detalhes disto. Em resumo, no entanto, o squash permite que você combine commits.',"","Ótimo! Vejamos um exemplo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Quando você clicar o botão, uma janela de rebase interativo se abrirá. Reordene alguns commits da forma como você preferir (ou sinta-se livre para desmarcar o `pick` de alguns) e veja o resultado!"],afterMarkdowns:["Boom! O Git copiou alguns commits exatamente da mesma forma que você os especificou na janela"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para finalizar este nível, faça um rebase interativo e obtenha a ordem mostrada na visualização do objetivo. Lembre-se que você pode usar os comandos `undo` ou `reset` para corrigir erros :D"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Interaktiver Rebase","","Cherry-pick ist großartig wenn du genau weißt, welche Commits du willst (_und_ ihre jeweiligen Hashes kennst) -- es ist dann schwer an Einfachheit zu überbieten.","","Aber wie sieht es aus, wenn du die Commits nicht genau kennst, die du brauchst? Zum Glück bietet Git auch dafür eine Lösung an. Das können wir mit interaktivem Rebase machen -- die beste Art sich eine Serie von Commits in einem Rebase genau anzusehen.","","Schauen wir uns die Details an ..."]}},{type:"ModalAlert",options:{markdowns:["Interaktives Rebase bedeutet einfach nur, dass man dem `rebase` Befehl die Option `-i` hinzufügt.","","Wenn du das machst, zeigt Git dir jeden einzelnen Commit, der durch den Rebase kopiert werden würde. Es zeigt dir die Hashes und Kommentare, was gut ist um einen Überblick zu bekommen.","","In echtem Git besteht dieser Dialog daraus, die Commits in einem Text-Editor angezeigt zu bekommen. Für unsere Zwecke hab ich ein kleines Dialog-Fenster gebaut, dass sich ähnlich verhält."]}},{type:"ModalAlert",options:{markdowns:["Wenn sich der Dialog für den interaktiven Rebase öffnet, kannst du drei Dinge tun:","","* Du kannst die Reihenfolge der Commits durch Ziehen und Ablegen ändern.","* Du kannst Git sagen, einen Commit beim Rebase zu ignorieren -- im Dialog durch die Schaltfläche `pick` dargestellt.","* Außerdem kannst du Commit zusammenfassen (squash). Leider wird das hier nicht unterstützt, aber in echtem Git fasst es Commits zu einem zusammen.","","Super! Schauen wir uns ein Beispiel an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wenn du die Schaltfläche anklickst wird sich der Rebase-Dialog öffnen. Veränder die Reihenfolge der Commits oder klick bei einigen auf `pick` und schau dir das Ergebnis an."],afterMarkdowns:["Bämm! Git hat die Commits genau so kopiert, wie du es ausgewählt hast."],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level zu schaffen mach einen interaktiven Rebase, um genau die Reihenfolge zu erzeugen die im Ziel-Baum angezeigt wird. Denk daran, dass du jederzeit mit `undo` oder `reset` Fehler rückgängig machen kannst. :D"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git インタラクティブrebase","","どのコミットを操りたいか（そしてそれを指定するハッシュ）がわかる時に`git cherry-pick`はとても便利で、その簡単さはとてもありがたいです。 ","","しかし、どのコミットを操りたいかがわからない時はどうでしょう？ありがたいことに、そんな時にぴったりのコマンドがgitに備わっています。このためにgitのインタラクティブrebaseを使えます。rebaseしたい一連のコミットを一括で見るベストな方法です。","","具体的に見てみましょう..."]}},{type:"ModalAlert",options:{markdowns:["インタラクティブrebaseとは単に、`rebase`コマンドに`-i`オプションを合わせて使うことです。","","このオプションをつければ、gitがインタフェースを開き、どのコミットがrebase対象の下にコピーされるかを確認できます。それらのコミットのハッシュやメッセージも表示され、rebaseの概要を一眼で見るのに便利です。","",'"ホンモノ"のgitでは、その「インターフェース」とは`vim`などのテキストエディタの中でファイルが開くだけです。ここでコンセプトを見せるために同じような動作をする小さなダイアログウィンドウを作りました。']}},{type:"ModalAlert",options:{markdowns:["インタラクティブrebaseダイアログが開くと、３つの操作から選べます:","","* UIウィンドウのなかで順番を調整するだけでコミットの順番を変えられます（こちらのダイアログでは、マウスでドラッグアンドドロップで操作します）。","* 特定のコミットを丸ごと除くこともできます。除きたいコミットを指定するには`pick`をオフにします。","* 最後に、コミットを組み合わせられます。技術的に制限があり再現できないのでその詳細な説明を省きますが、短く言いますと、複数のコミットを一つにまとめることができる機能です。","","さて、例を見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["ボタンを押せば、インタラクティブrebaseウィンドウが現れます。コミットの順番を変更したり、`pick`を外したりしてみて、その結果を見てみましょう！"],afterMarkdowns:["よっしゃー。gitがUIで指定されたようにコミットをコピーしました！"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするにはインタラクティブrebaseを実行し、ゴールのビジュアライズに表示されている順番を実現しましょう。ミスがあれば`undo`や`reset`で修正できるのをお忘れなく。"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","Git cherry-pick прекрасен, когда точно известно, какие коммиты нужны (и известны их точные хеши)","","Но как быть в случае, когда точно не известно какие коммиты нужны? К счастью, Git позаботился о таких ситуациях! Можно использовать интерактивный rebase для этого - лучший способ отобрать набор коммитов для rebase.","","Углубимся в детали."]}},{type:"ModalAlert",options:{markdowns:["Всё, что нужно для интерактивного rebase - это опция `-i`","","Если добавить эту опцию, Git откроет интерфейс просмотра того, какие коммиты готовы к копированию на цель rebase (target). Также показываются хеши коммитов и комментарии к ним, так что можно легко понять что к чему.","",'Для "реального" Git, этот интерфейс означает просто открытие файла в редакторе типа vim. Для этой обучалки, я сделал небольшое диалоговое окно, которое по сути делает то же, что и редактор.']}},{type:"ModalAlert",options:{markdowns:["После открытия окна интерактивного rebase есть три варианта для каждого коммита:","","* Можно сменить положение коммита по порядку, переставив строчку с ним в редакторе (у нас в окошке строку с коммитом можно перенести просто мышкой).",'* Можно "выкинуть" коммит из ребейза. Для этого есть `pick` - переключение его означает, что нужно выкинуть коммит.',"* Наконец, можно соединить коммиты. В этом уровне игры у нас не реализована эта возможность, но, вкратце, при помощи этой функции можно объединять изменения двух коммитов.","","Ну что ж, посмотрим на примеры!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["После нажатия на эту кнопку появится окно интерактивного rebase. Переставь несколько коммитов (или удали кое-какие) и посмотри, что получится в итоге!"],afterMarkdowns:["Бах! Git скопировал коммиты в точности так, как было указано через интерфейс!"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти этот уровень, переставь коммиты при помощи интерактивного rebase в таком порядке, как указано на визуализации. На всякий случай, помни, что всегда можно исправить ошибку, вызвав команду undo или reset."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 인터렉티브 리베이스(Interactive Rebase)","","Git 체리-픽은 여러분이 원하는 커밋이 무엇인지 알때(각각의 해시값도) 아주 유용합니다 -- 체리-픽이 제공하는 간단함은 아주 매력적입니다.","","하지만 원하는 커밋을 모르는 상황에는 어쩌죠? 고맙게도 git은 이런상황에 대한 대안이 있습니다. 우리는 이럴 때 인터렉티브 리베이스를 사용하면됩니다 -- 리베이스할 일련의 커밋들을 검토할 수 있는 가장 좋은 방법입니다.","","자세히 알아보죠..."]}},{type:"ModalAlert",options:{markdowns:["인터렉티브 리베이스가 의미하는 뜻은 `rebase` 명령어를 사용할 때 `-i` 옵션을 같이 사용한다는 것입니다.","","이 옵션을 추가하면, git은 리베이스의 목적지가 되는 곳 아래에 복사될 커밋들을 보여주는 UI를 띄울것 입니다. 각 커밋을 구분할 수 있는 각각의 해시들과 메시지도 보여줍니다.","",'"실제"git 에서는 UI창을 띄우는것 대신에 `vim`과 같은 텍스트 편집기에서 파일을 엽니다. 저희는 배우는것이 목적이기에 같은 역할을 하는 작은 대화창을 만들어서 대신했습니다.']}},{type:"ModalAlert",options:{markdowns:["인터렉티브 리베이스 대화창이 열리면, 3가지를 할 수 있습니다:","","* 적용할 커밋들의 순서를 UI를 통해 바꿀수 있습니다(여기서는 마우스 드래그앤 드롭으로 가능합니다)","* 원하지 않는 커밋들을 뺄 수 있습니다. 이것은 `pick`을 이용해 지정할 수 있습니다(여기서는 `pick`토글 버튼을 끄는것으로 가능합니다)","* 마지막으로, 커밋을 스쿼시(squash)할 수 있습니다. 불행히도 저희 레벨은 몇개의 논리적 문제들 때문에 지원을 하지 않습니다. 이거에 대해서는 넘어가겠습니다. 요약하자면 커밋을 합칠 수 있습니다","","자! 예시를 확인해 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["버튼을 누르면 인터렉티브 리베이스 대화창이 뜰것 입니다. 커밋들의 순서를 바꿔보고(커밋을 빼 봐도 됩니다) 결과를 확인해봅시다!"],afterMarkdowns:["Boom! Git이 UI를 통해 명시한 그대로 커밋들을 복사했습니다."],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["이번 레벨을 통과하기 위해서 goal에 나타난 순서대로 만들기 위해 인터렉티브 리베이스를 사용해봅시다. `undo`와 `reset`을 통해 했던 실수들은 되돌릴 수 있습니다 :D"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Інтерактивний Rebase","","Git cherry-pick зручно користуватись коли ти знаєш які коміти тобі потрібні (_і_ ти знаєш їхні хеші) -- важко вигадати щось простіше.","","Але що робити в ситуації коли ти не знаєш які коміти потрібні? На щастя git може впоратись і з цим! Для цього випадку використовують інтерактивний rebase -- це найкращий спосіб перевірити серію комітів які потрібно заребейсити.","","Розглянемо це детальніше..."]}},{type:"ModalAlert",options:{markdowns:["Інтерактивний rebase це насправді команда  `rebase` з опцією `-i`.","","Якщо додати цю опцію, git відкриє діалог в якому покаже які коміти будуть скопійовані до кінцевого призначення. Він також покаже хеші комітів та їхні повідомлення, що допоможе розібратися що й до чого.","",'В "справжньому" git, замість UI вікна відкриється файл в сконфігурованому текстовому редакторі, можливо `vim`. Для цього туторіалу я створив невеличке діалогове вікно що поводиться приблизно так само.']}},{type:"ModalAlert",options:{markdowns:["Коли відкриється вікно інтерактивного rebase ти можеш зробити три речі:","","* Ти можеш переставити коміти між собою просто змінивши їх порядок в діалозі (в нашому вікні ти зможеш перетягнути їх мишкою).","* Ти можеш повністю пропустити якісь коміти. В туторіалі потрібно вимкнути опцію `pick`, але в справжньому гіт потрібно просто видалити відповідний рядок.","* Також можна розчавити (squash) якісь коміти. На жаль наш туторіал не підтримує цю фічу (так як ми не підтримуємо роботу з файлами), але це дуже зручна опція в справжньому гіт. За її допомогою можна декілька різніх комітів об’єднати в один","","Чудово! Давайте розберемо це на прикладі"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Коли ти натиснеш кнопку відкриється вікно інтерактивного rebase. Перестав якісь коміти (можеш пропустити якісь якщо хочеш) і подивись що вийде!"],afterMarkdowns:["Ка-бум! Git cкопіював коміти відповідно до того що було вказано в UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Щоб пройти цей рівень за допомогою інтерактивного rebase впорядкуй коміти як показано на візуалізації. Пам’ятай що ти завжди можеш використати `undo` чи `reset` щоб виправити помилку :D"]}}]}}}}),e.define("/levels/mixed/grabbingOneCommit.js",function(e,t,n,r,i,s,o){n.level={compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(e){return e.C4>e.C1}]},disabledMap:{"git revert":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22master%22%7D%2C%22debug%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22debug%22%7D%2C%22printf%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22printf%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22bugFix%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout master;git cherry-pick C4",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"debug":{"target":"C2","id":"debug"},"printf":{"target":"C3","id":"printf"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',name:{ko:"딱 한개의 커밋만 가져오기",en_US:"Grabbing Just 1 Commit",ja:"Grabbing Just 1 Commit",zh_CN:"只取一个提交"},hint:{en_US:"Remember, interactive rebase or cherry-pick is your friend here",ja:"このレベルではインタラクティブモードのrebaseやcherry-pickがクリアのカギです",ko:"대화식 리베이스(rebase -i)나 or 체리픽(cherry-pick)을 사용하세요",zh_CN:"记住，交互式 rebase 或者 cherry-pick 会很有帮助"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Locally stacked commits","","Here's a development situation that often happens: I'm trying to track down a bug but it is quite elusive. In order to aid in my detective work, I put in a few debug commands and a few print statements.","","All of these debugging / print statements are in their own branches. Finally I track down the bug, fix it, and rejoice!","","Only problem is that I now need to get my `bugFix` back into the `master` branch. If I simply fast-forwarded `master`, then `master` would get all my debug statements which is undesirable. There has to be another way..."]}},{type:"ModalAlert",options:{markdowns:["We need to tell git to copy only one of the commits over. This is just like the levels earlier on moving work around -- we can use the same commands:","","* `git rebase -i`","* `git cherry-pick`","","To achieve this goal."]}},{type:"ModalAlert",options:{markdowns:["This is a later level so we will leave it up to you to decide which command you want to use, but in order to complete the level, make sure `master` receives the commit that `bugFix` references."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ローカルに積み上がったコミット","","実際の開発ではこういうケースがよくあります：「バグの原因調査を試みているがバグの再現性がかなり低い。調査の補助のために、いくつかのデバッグ用の命令やprint文を差し込んでいる。」","","これらのデバッグ用のコードはバグ修正用のブランチにコミットされています。そしてついにバグの原因を突き止めて、修正した！やった！","","あとは`bugFix`ブランチを`master`ブランチに統合できればOK。そこで単純に`master`をfast-forwardすればよいかというと、それでは`master`ブランチの中にデバッグ用のコードも混入してしまいます。"]}},{type:"ModalAlert",options:{markdowns:["ここでGitの魔法が力を発揮します。解決のためにはいくつかの方法がありますが、最も素直な解決方法は2つあって：","","* `git rebase -i`","* `git cherry-pick`","","インタラクティブモードの（`-i`オプションつきの）rebaseによって、保持したいコミットと破棄したいコミットを選り分けることができます。コミットの順序を変更することも可能です。この方法は、一部の変更をどこかへやってしまいたい時に便利です。","","もう一方のcherry-pickを使うと、持っていきたいコミットを選んで`HEAD`の先にストンと落とすことができます。"]}},{type:"ModalAlert",options:{markdowns:["後半の章ですのでどう解決するかをもう自分で考えることができると思います。このレベルをクリアするためには、`bugFix`が持っているコミットを`master`ブランチが受け取る必要がある点には注意してください。"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 本地栈式提交 (Locally stacked commits)","","设想一下一个经常发生的场景：我在追踪一个有点棘手的 bug，为了更好地排查，我添加了一些调试命令和打印语句。","","所有的这些调试和打印语句都只在它们自己的分支里。最终我终于找到这个 bug，揪出来 fix 掉，然后撒花庆祝！","","现在唯一的问题就是要把我在 `bugFix` 分支里的工作合并回 `master` 分支。我可以简单地把 `master` 分支快进（fast-forward），但这样的话 `master` 分支就会包含我这些调试语句了。"]}},{type:"ModalAlert",options:{markdowns:["现在就是 Git 大显神通的时候啦。解决这个问题的方法不止一个，但最直接的两个方法是：","","* `git rebase -i`","* `git cherry-pick`","","交互（`-i`）衍合允许你选择哪些提交是要被保留，哪些要被舍弃。它允许你将提交重新排序。假如你要舍弃一些工作，这个会帮上很大的忙。","","Cherry-picking 能让你选择单独一个提交并且把它放到 `HEAD` 的最前端。"]}},{type:"ModalAlert",options:{markdowns:["本关是可选关卡，玩不玩随便你。但是如果你坚持要刷，确保 `master` 分支能拿到 `bugFix` 分支的相关提交（references）。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 로컬에 쌓인 커밋들","","개발중에 종종 이런 상황이 생깁니다: 잘 띄지 않는 버그를 찾아서 해결하려고, 어떤 부분의 문제인지를 찾기 위해 디버그용 코드와 화면에 정보를 프린트하는 코드 몇 줄 넣습니다. ","","디버깅용 코드나 프린트 명령은 그 브랜치에 들어있습니다. 마침내 버그를 찾아서 고쳤고, 원래 작업하는 브랜치에 합치면 됩니다!","","이제 `bugFix`브랜치의 내용을 `master`에 합쳐 넣으려 하지만, 한 가지 문제가 있습니다. 그냥 간단히 `master`브랜치를 최신 커밋으로 이동시킨다면(fast-forward) 그 불필요한 디버그용 코드들도 함께 들어가 버린다는 문제죠."]}},{type:"ModalAlert",options:{markdowns:["여기에서 Git의 마법이 드러납니다. 이 문제를 해결하는 여러가지 방법이 있습니다만, 가장 간단한 두가지 방법 아래와 같습니다:","","* `git rebase -i`","* `git cherry-pick`","","대화형 (-i 옵션) 리베이스(rebase)로는 어떤 커밋을 취하거나 버릴지를 선택할 수 있습니다. 또 커밋의 순서를 바꿀 수도 있습니다. 이 커맨드로 어떤 작업의 일부만 골라내기에 유용합니다.","","체리픽(cherry-pick)은 개별 커밋을 골라서 `HEAD`위에 떨어뜨릴 수 있습니다."]}},{type:"ModalAlert",options:{markdowns:["이번 레벨을 통과하기 위해 어떤 방법을 쓰시든 자유입니다만, `master`브랜치가 `bugFix` 브랜치의 커밋을 일부 가져오게 해주세요."]}}]}}}}),e.define("/levels/mixed/jugglingCommits.js",function(e,t,n,r,i,s,o){n.level={disabledMap:{"git cherry-pick":!0,"git revert":!0},compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(e){return e.C2>e.C3},function(e){return e.C2>e.C1}]},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%27%22%2C%22id%22%3A%22master%22%7D%2C%22newImage%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22newImage%22%7D%2C%22caption%22%3A%7B%22target%22%3A%22C3%27%27%22%2C%22id%22%3A%22caption%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%2C%22C2%27%27%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%27%27%22%7D%2C%22C3%27%27%22%3A%7B%22parents%22%3A%5B%22C2%27%27%27%22%5D%2C%22id%22%3A%22C3%27%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase -i HEAD~2;git commit --amend;git rebase -i HEAD~2;git rebase caption master",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"newImage":{"target":"C2","id":"newImage"},"caption":{"target":"C3","id":"caption"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"caption","id":"HEAD"}}',name:{ko:"커밋들 갖고 놀기",en_US:"Juggling Commits",ja:"Juggling Commits",zh_CN:"有趣的提交(commits)"},hint:{en_US:"The first command is git rebase -i HEAD~2",ja:"最初に打つコマンドはgit rebase -i HEAD~2",ko:"첫번째 명령은 git rebase -i HEAD~2 입니다",zh_CN:"第一个命令是 'git rebase -i HEAD~2'"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Juggling Commits","","Here's another situation that happens quite commonly. You have some changes (`newImage`) and another set of changes (`caption`) that are related, so they are stacked on top of each other in your repository (aka one after another).","","The tricky thing is that sometimes you need to make a small modification to an earlier commit. In this case, design wants us to change the dimensions of `newImage` slightly, even though that commit is way back in our history!!"]}},{type:"ModalAlert",options:{markdowns:["We will overcome this difficulty by doing the following:","","* We will re-order the commits so the one we want to change is on top with `git rebase -i`","* We will `commit --amend` to make the slight modification","* Then we will re-order the commits back to how they were previously with `git rebase -i`","* Finally, we will move master to this updated part of the tree to finish the level (via the method of your choosing)","","There are many ways to accomplish this overall goal (I see you eye-ing cherry-pick), and we will see more of them later, but for now let's focus on this technique."]}},{type:"ModalAlert",options:{markdowns:["Lastly, pay attention to the goal state here -- since we move the commits twice, they both get an apostrophe appended. One more apostrophe is added for the commit we amend, which gives us the final form of the tree ","","That being said, I can compare levels now based on structure and relative apostrophe differences. As long as your tree's `master` branch has the same structure and relative apostrophe differences, I'll give full credit"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commitsをやりくりする","","開発中に頻繁に起こるケースをもう1つ考えます。ある変更（`newImage`）とまた別の変更（`caption`）があって、それらに依存関係があるとします。この一連の変更が一列に積み重なっているとします。","","ここでトリッキーなのは、以前のコミットに対して微修正をかけなければならないケースがあるということです。今回の教材でも、過去のコミットであるにも関わらず`newImage`ブランチに僅かな修正を加えるような設計の修正が入ったとしましょう。"]}},{type:"ModalAlert",options:{markdowns:["この困難な状況を、以下の手順で克服することを考えます：","","* `git rebase -i`を使って順番を変更する。これで、変更をかけたいコミットを一番先頭に持ってくる。","* `commit --amend`コマンドで僅かな変更を行う","* `git rebase -i`コマンドを再度使って、先頭に持ってきていたコミットを元に戻す","* 最後に、レベルクリアのためにmasterブランチを先頭に持ってくる","","クリアのための方法はいくつもありますが（cherry-pickを使うこともできます）、別の回答はまた後程の章で見ることにんして、今回は上記の方法でやってみることにしましょう。"]}},{type:"ModalAlert",options:{markdowns:["最後に、ゴール時点での状態に気を付けてください。今回2回ほどコミットを動かしますから、コミットへのポインタにはアポストロフィ（'）が追加されます。commit --amendコマンドの実行でできたコミットには更にもう1つのアポストロフィが追加されます。 "]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 有趣的提交(commits)","","下面这种情况也是经常出现的。例如你之前已经在 `newImage` 分支上做了一些提交，然后又在 `caption` 分支上做了一些相关的提交，因此它们看起来是一个连一个的（stacked on top of each other in your repository）。","","有点棘手的就是有时候你又想往先前的提交里做些小改动。呐，现在就是设计师想要我们去轻微改变下 `newImage` 的内容（change the dimensions slightly），尽管那个提交是很久很久以前的了。"]}},{type:"ModalAlert",options:{markdowns:["为了实现他的愿望，我们可以按照下面的方法来做：","","* 先用 `git rebase -i` 将提交重新排序，然后把我们想要修改的提交挪到最前","* 然后用 `commit --amend` 来进行一些小修改","* 接着再用 `git rebase -i` 来将他们按最开始的顺序重新排好","* 最后我们把 master 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！","","当然还有许多方法可以完成这个任务（我知道你在看 cherry-pick 啦），之后我们会多点关注这些技巧啦，但现在暂时只专注上面这种方法。"]}},{type:"ModalAlert",options:{markdowns:["啊最后还要提醒你一下最终的形式 —— 因为我们把这个提交移动了两次，所以会分别产生一个省略提交（both get an apostrophe appended）。还有一个省略提交是因为我们为了实现最终效果去修改提交而添加的。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 커밋들 갖고 놀기","","이번에도 꽤 자주 발생하는 상황입니다. `newImage`와 `caption` 브랜치에 각각의 변경내역이 있고 서로 약간 관련이 있어서, 저장소에 차례로 쌓여있는 상황입니다.","","때로는 이전 커밋의 내용을 살짝 바꿔야하는 골치아픈 상황에 빠지게 됩니다. 이번에는 디자인 쪽에서 우리의 작업이력(history)에서는 이미 한참 전의 커밋 내용에 있는 `newImage`의 크기를 살짝 바꿔달라는 요청이 들어왔습니다."]}},{type:"ModalAlert",options:{markdowns:["이 문제를 다음과 같이 풀어봅시다:","","* `git rebase -i` 명령으로 우리가 바꿀 커밋을 가장 최근 순서로 바꾸어 놓습니다","* `commit --amend` 명령으로 커밋 내용을 정정합니다","* 다시 `git rebase -i` 명령으로 이 전의 커밋 순서대로 되돌려 놓습니다","* 마지막으로, master를 지금 트리가 변경된 부분으로 이동합니다. (편하신 방법으로 하세요)","","이 목표를 달성하기 위해서는 많은 방법이 있는데요(체리픽을 고민중이시죠?), 체리픽은 나중에 더 살펴보기로 하고, 우선은 위의 방법으로 해결해보세요."]}},{type:"ModalAlert",options:{markdowns:["최종적으로, 목표 결과를 눈여겨 보세요 -- 우리가 커밋을 두 번 옮겼기 때문에, 두 커밋 모두 따옴표 표시가 붙어있습니다. 정정한(amend) 커밋은 따옴표가 추가로 하나 더 붙어있습니다."]}}]}}}}),e.define("/levels/mixed/jugglingCommits2.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%7D%2C%22newImage%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22newImage%22%7D%2C%22caption%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22caption%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%27%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout master;git cherry-pick C2;git commit --amend;git cherry-pick C3",disabledMap:{"git revert":!0},startTree:'{"branches":{"master":{"target":"C1","id":"master"},"newImage":{"target":"C2","id":"newImage"},"caption":{"target":"C3","id":"caption"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"caption","id":"HEAD"}}',compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(e){return e.C2>e.C3},function(e){return e.C2>e.C1}]},name:{ko:"커밋 갖고 놀기 #2",en_US:"Juggling Commits #2",ja:"コミットをやりくりする その2",zh_CN:"有趣的提交(commits) #2"},hint:{en_US:"Don't forget to forward master to the updated changes!",ja:"masterのポインタを先に進めることを忘れずに！",ko:"master를 변경 완료한 커밋으로 이동(forward)시키는 것을 잊지 마세요!",zh_CN:"别忘记了将 master 快进到最新的更新上！"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Juggling Commits #2","","*If you haven't completed Juggling Commits #1 (the previous level), please do so before continuing*","","As you saw in the last level, we used `rebase -i` to reorder the commits. Once the commit we wanted to change was on top, we could easily --amend it and re-order back to our preferred order.","","The only issue here is that there is a lot of reordering going on, which can introduce rebase conflicts. Let's look at another method with `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Remember that git cherry-pick will plop down a commit from anywhere in the tree onto HEAD (as long as that commit isn't upstream).","","Here's a small refresher demo:"],afterMarkdowns:["Nice! Let's move on"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["So in this level, let's accomplish the same objective of amending `C2` once but avoid using `rebase -i`. I'll leave it up to you to figure it out! :D","","Remember, the exact number of apostrophe's (') on the commit are not important, only the relative differences. For example, I will give credit to a tree that matches the goal tree but has one extra apostrophe everywhere"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## コミットをやりくりする その2","","*注意 この一つ前のレベル「コミットをやりくりする」をクリアしていない人は、まずそちらの問題をクリアしてきてください*","","前回見てきたように、コミット順序の変更のために、私たちは`rebase -i`コマンドを利用しました。ツリーの先頭に変更対象のコミットがあれば、--amendオプションを使うことで容易に変更を書きかえて、元の順序に戻すことができます。","","この場合に心配なことが一つだけあって、それは複数回の順序の変更が行われるので、rebaseのコンフリクト（衝突）が起こりうることです。こういうケースへの対策として、`git cherry-pick`を使った別の解決法について考えてみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git cherry-pickを使うと、ツリーの中から複数のコミットを選んで、HEADの下に新しく作ることができましたね。","","簡単なデモを見てみましょう："],afterMarkdowns:["できました！次へ進みましょう"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルでは、`C2`をamendすることで前回と同じ目的を達成しましょう。但し`rebase -i`は使わずにクリアしてください。どんな方法で進めるかはあなたにおまかせします！:D"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 有趣的提交(commits) #2","","*假如你还没有完成有趣的提交(commits) #1（前一关），这关不让玩哦！*","","如你在上一关所见，我们使用 `rebase -i` 来重排那些提交。只要把我们想要的提交挪到最顶端，我们就可以很容易地改变它，然后把它们重新排成我们想要的顺序。","","但唯一的问题就是这样做就要排很多次，有可能造成衍合冲突（rebase conflicts）。下面就看看用另外一种方法 `git cherry-pick` 是怎么做的吧。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["要在心理牢记 cherry-pick 可以从提交树的任何地方拿一个提交来放在 HEAD 上（尽管那个提交不在上游）。","","下面是一个小小的演示："],command:"git cherry-pick C2",afterMarkdowns:["好滴咧，我们继续"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["那么这关呢，和上一关一样要改变提交 `C2`，但你要避免使用 `rebase -i`。自己想想要怎么解决吧，骚年！ :D"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 커밋 갖고 놀기 #2","","*만약 이전 레벨의 커밋 갖고 놀기 #1을 풀지 않으셨다면, 계속하기에 앞서서 꼭 풀어보세요*","","이전 레벨에서 보셨듯이 `rebase -i` 명령으로 커밋의 순서를 바꿀 수 있습니다. 정정할 커밋이 바로 직전(top)에 있으면 간단히 --amend로 수정할 수 있고, 그리고 나서 다시 원하는 순서로 되돌려 놓으면 됩니다.","","이번에 한가지 문제는 순서를 꽤 많이 바꿔야한다는 점인데요, 그러다가 리베이스중에 충돌이 날 수 있습니다. 이번에는 다른 방법인 `git cherry-pick`으로 해결해 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git cherry-pick으로 HEAD에다 어떤 커밋이든 떨어 뜨려 놓을 수 있다고 알려드린것 기억나세요? (단, 그 커밋이 현재 가리키고 있는 커밋이 아니어야합니다)","","간단한 데모로 다시 알려드리겠습니다:"],afterMarkdowns:["좋아요! 계속할게요"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["그럼 이번 레벨에서는 아까와 마찬가지로 `C2` 커밋의 내용을 정정하되, `rebase -i`를 쓰지 말고 해보세요. ^.~"]}}]}}}}),e.define("/levels/rebase/manyRebases.js",function(e,t,n,r,i,s,o){n.level={compareOnlyMasterHashAgnostic:!0,disabledMap:{"git revert":!0,"git cherry-pick":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22bugFix%22%7D%2C%22side%22%3A%7B%22target%22%3A%22C6%27%22%2C%22id%22%3A%22side%22%7D%2C%22another%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22another%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C6%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C6%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C6%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout bugFix;git rebase master;git checkout side;git rebase bugFix;git checkout another;git rebase side;git rebase another master",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"side":{"target":"C6","id":"side"},"another":{"target":"C7","id":"another"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C0"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C5"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Rebasing over 9000 times",ko:"9천번이 넘는 리베이스",ja:"Rebasing over 9000 times",zh_CN:"N次Rebase"},hint:{en_US:"Remember, the most efficient way might be to only update master at the end...",ja:"最も効率的なやり方はmasterを最後に更新するだけかもしれない・・・",ko:"아마도 master를 마지막에 업데이트하는 것이 가장 효율적인 방법일 것입니다...",zh_CN:"记住，最后更新master分支可能是最高效的方法。"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rebasing Multiple Branches","","Man, we have a lot of branches going on here! Let's rebase all the work from these branches onto master.","","Upper management is making this a bit trickier though -- they want the commits to all be in sequential order. So this means that our final tree should have `C7'` at the bottom, `C6'` above that, etc etc, etc all in order.","","If you mess up along the way, feel free to use `reset` to start over again. Be sure to check out our solution and see if you can do it in fewer commands!"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["### 複数のブランチをリベースする","","さあ、いくつものブランチが出てきます。このブランチたち全てをmasterブランチにリベースしましょう。","","おエライさん方が今回の仕事を少しトリッキーにしてくれました ― コミットはすべて一列のシーケンシャルな状態にしてほしいそうです。つまり私たちが作るリポジトリの最終的なツリーの状態は、`C7'`が最後に来て、`C6'`がその一つ上に来て、、と順に積み重なるイメージです。","","試行錯誤してツリーが汚くなってきたら、`reset`コマンドを使ってツリーの状態を初期化してください。模範解答をチェックして、それよりも簡単なコマンドで済ませられるかどうか、を考えるのも忘れずに！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 多分支衍合","","呐，现在我们有很多分支啦！让我们rebase这些分支的工作到 master 分支上吧。","","但是你的头头找了点麻烦 —— 他们希望得到有序的提交历史，也就是我们最终的结果是 `C7'` 在最底部，`C6'` 在它上面，以此类推。","","假如你搞砸了，没所谓的（虽然我不会告诉你用 `reset` 可以重新开始）。记得看看我们提供的答案，看你能否使用更少的命令完成任务！"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["### 여러 브랜치를 리베이스(rebase)하기 ","","음, 여기 꽤 여러개의 브랜치가 있습니다! 이 브랜치들의 모든 작업내역을 master에 리베이스 해볼까요?","","윗선에서 일을 복잡하게 만드네요 -- 그 분들이 이 모든 커밋들을 순서에 맞게 정렬하라고 합니다. 그럼 결국 우리의 최종 목표 트리는 제일 아래에 `C7'` 커밋, 그 위에 `C6'` 커밋, 또 그 위에 순서대로 보여합니다.","","만일 작업중에 내용이 꼬인다면, `reset`이라고 쳐서 처음부터 다시 시작할 수 있습니다. 모범 답안을 확인해 보시고, 혹시 더 적은 수의 커맨드로 해결할 수 있는지 알아보세요!"]}}]}}}}),e.define("/levels/advanced/multipleParents.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C7","id":"master"},"bugWork":{"target":"C2","id":"bugWork"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C4","C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git branch bugWork master^^2^",startTree:'{"branches":{"master":{"target":"C7","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C4","C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Multiple parents",zh_CN:"多个父提交记录"},hint:{en_US:"Use `git branch bugWork` with a target commit to create the missing reference.",zh_CN:"使用`git branch bugWork`加上一个目标提交记录来创建消失的引用。"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Specifying Parents","","Like the `~` modifier, the `^` modifier also accepts an optional number after it.","","Rather than specifying the number of generations to go back (what `~` takes), the modifier on `^` specifies which parent reference to follow from a merge commit. Remember that merge commits have multiple parents, so the path to choose is ambiguous.","",'Git will normally follow the "first" parent upwards from a merge commit, but specifying a number with `^` changes this default behavior.',"","Enough talking, let's see it in action.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have a merge commit. If we checkout `master^` without the modifier, we will follow the first parent after the merge commit. ","","(*In our visuals, the first parent is positioned directly above the merge commit.*)"],afterMarkdowns:["Easy -- this is what we are all used to."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now let's try specifying the second parent instead..."],afterMarkdowns:["See? We followed the other parent upwards."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["The `^` and `~` modifiers can make moving around a commit tree very powerful:"],afterMarkdowns:["Lightning fast!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Even crazier, these modifiers can be chained together! Check this out:"],afterMarkdowns:["The same movement as before, but all in one command."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Put it to practice","","To complete this level, create a new branch at the specified destination.","","Obviously it would be easy to specify the commit directly (with something like `C6`), but I challenge you to use the modifiers we talked about instead!"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 选择父提交","","和`~`修改符一样，`^`修改符之后也可以跟一个（可选的）数字。","","这不是用来指定向上返回几代（`~`的作用），`^`后的数字指定跟随合并提交记录的哪一个父提交。还记得一个合并提交有多个父提交吧，所有选择哪条路径不是那么清晰。","",'Git默认选择跟随合并提交的"第一个"父提交，使用`^`后跟一个数字来改变这一默认行为。',"","废话不多说，举个例子。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这里有一个合并提交。如果不加数字修改符直接切换到`master^`，会回到第一个父提交。","","(*在我们的图示中，第一个父提交是指合并提交正上方的那个父提交。*)"],afterMarkdowns:["OK--这恰好是我们想要的。"],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在来试试选择第二个父提交……"],afterMarkdowns:["看见了吧？我们回到了第二个父提交。"],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用`^`和`~`可以自由在在提交树中移动："],afterMarkdowns:["快若闪电！"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["再疯狂点，这些修改符支持链式操作！试一下这个："],afterMarkdowns:["和前面的结果一样，但只用了一条命令。"],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### 实践一下","","要完成此关，在指定的目标位置创建一个新的分支。","","很明显可以简单的直接使用提交记录的hash值（比如`C6`），但我要求你使用刚刚讲到的相对引用修饰符！"]}}]}}}}),e.define("/levels/rebase/selectiveRebase.js",function(e,t,n,r,i,s,o){n.level={compareAllBranchesHashAgnostic:!0,disabledMap:{"git revert":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C5%22%2C%22id%22%3A%22master%22%7D%2C%22one%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22one%22%7D%2C%22two%22%3A%7B%22target%22%3A%22C2%27%27%22%2C%22id%22%3A%22two%22%7D%2C%22three%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22three%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C4%27%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C4%27%27%22%7D%2C%22C3%27%27%22%3A%7B%22parents%22%3A%5B%22C4%27%27%22%5D%2C%22id%22%3A%22C3%27%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C3%27%27%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22two%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout one; git cherry-pick C4 C3 C2; git checkout two; git cherry-pick C5 C4 C3 C2; git branch -f three C2",startTree:'{"branches":{"master":{"target":"C5","id":"master"},"one":{"target":"C1","id":"one"},"two":{"target":"C1","id":"two"},"three":{"target":"C1","id":"three"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{ko:"브랜치 스파게티",en_US:"Branch Spaghetti",ja:"ブランチスパゲッティ",zh_CN:"分支浆糊"},hint:{en_US:"Make sure to do everything in the proper order! Branch one first, then two, then three",ja:"全て正しい順番で処理すること！oneが最初で、次がtwo、最後にthreeを片付ける。",ko:"이 문제를 해결하는 방법은 여러가지가 있습니다! 체리픽(cherry-pick)이 가장 쉽지만 오래걸리는 방법이고, 리베이스(rebase -i)가 빠른 방법입니다",zh_CN:"确保你是按照正确的顺序来操作！先操作分支 `one`, 然后 `two`, 最后才是 `three`"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch Spaghetti","","WOAHHHhhh Nelly! We have quite the goal to reach in this level.","","Here we have `master` that is a few commits ahead of branches `one` `two` and `three`. For whatever reason, we need to update these three other branches with modified versions of the last few commits on master.","","Branch `one` needs a re-ordering and a deletion of `C5`. `two` needs pure reordering, and `three` only needs one commit!","","We will let you figure out how to solve this one -- make sure to check out our solution afterwards with `show solution`. "]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ブランチスパゲッティ","","なんということでしょう。今回のレベルクリアのために、やることがたくさんあります。","","いま`master`が指しているコミットの数個前のコミットに、ブランチ`one`、`two`それから`three`があります。何か事情があって、これらの3つのブランチをmasterが指している最新の状態に更新したいケースを考えます。","","ブランチ`one`に対しては、順序の変更と`C5`の削除が必要です。`two`では順序の変更のみ、`three`に対しては1回だけコミットすればOKです。","","`show solution`コマンドで模範解答を確認できますから、こちらも利用してください。 "]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch Spaghetti","","哇塞大神！这关我们要来点不同的！","","现在我们的 `master` 分支是比 `one` `two` 和 `three` 要多几个提交。出于某种原因，我们需要把其他三个分支更新到 master 分支上新近的几个不同提交上。（update these three other brances with modified versions of the last few commits on master）","","分支 `one` 需要重新排序和撤销， `two` 需要完全重排，而 `three` 只需要提交一次。","","慢慢摸索会找到答案的 —— 你完事记得用 `show solution` 看看我们的答案哦。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 브랜치 스파게티","","음, 이번에는 만만치 않습니다!","","여기 `master` 브랜치의 몇 번 이전 커밋에 `one`, `two`,`three` 총 3개의 브랜치가 있습니다. 어떤 이유인지는 몰라도, master의 최근 커밋 몇 개를 나머지 세 개의 브랜치에 반영하려고 합니다.","","`one` 브랜치는 순서를 바꾸고 `C5`커밋을 삭제하고, `two`브랜치는 순서만 바꾸며, `three`브랜치는 하나의 커밋만 가져옵시다!","","자유롭게 이 문제를 풀어보시고 나서 `show solution`명령어로 모범 답안을 확인해보세요."]}}]}}}}),e.define("/levels/remote/clone.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master"},"o/master":{"target":"C1","id":"o/master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"remoteTrackingBranch":null,"remote":false,"target":"C1","id":"master","type":"branch"}},"commits":{"C0":{"type":"commit","parents":[],"author":"Peter Cottle","createTime":"Fri Jul 26 2013 15:56:22 GMT-0700 (PDT)","commitMessage":"Quick commit. Go Bears!","id":"C0","rootCommit":true},"C1":{"type":"commit","parents":["C0"],"author":"Peter Cottle","createTime":"Fri Jul 26 2013 15:56:22 GMT-0700 (PDT)","commitMessage":"Quick commit. Go Bears!","id":"C1"}},"HEAD":{"target":"master","id":"HEAD","type":"general ref"}}}',solutionCommand:"git clone",name:{en_US:"Clone Intro"},hint:{en_US:"Just git clone!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Remote repositories are copies of your project that are hosted elsewhere (typically on the internet). They do a bunch of great things for you:","","- First and foremost, they serve as a great backup! Git repositories obviously have the ability to restore files, but they rely on the filesystem working being in a valid state. Even if your entire laptop blows, your remote repositories will still work great.","","- They also make coding social! Now that a copy of your project is hosted elsewhere, your friends can contribute to your project (or pull in your latest changes) very easily.","","It's become very popular to use websites that visualize activity around remote repos (like [Github](https://github.com/) or [Phabricator](http://phabricator.org/)), but remote repositories _always_ serve as the underlying backbone for these tools. So it's important to understand them!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lets start slow and just look at what a remote repository looks like (in our visualization).","","`git clone` (in the real world) is the command you'll use to create _local_ copies of remote repositories (from github say), but we use it here to simply launch the visualization into a state where there's a remote and local copy.","","","",""],afterMarkdowns:["There it is! Now we have a remote repository of our project. It looks pretty similar except for some visual changes to make the distinction apparent"],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["To finish this level, simply `git clone` your existing repository. The real learning will come in following lessons"]}}]}}}}),e.define("/src/js/views/levelDropdownView.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?window.Backbone:e("backbone"),l=e("../util"),c=e("../intl"),h=e("../log"),p=e("../util/keyboard").KeyboardListener,d=e("../app"),v=e("../views").ModalTerminal,m=e("../views").ContainedBase,g=e("../views").BaseView,y=m.extend({tagName:"div",className:"levelDropdownView box vertical",template:u.template($("#level-dropdown-view").html()),initialize:function(e){e=e||{},this.JSON={},this.navEvents=u.clone(f.Events),this.navEvents.on("clickedID",u.debounce(u.bind(this.loadLevelID,this),300,!0)),this.navEvents.on("negative",this.negative,this),this.navEvents.on("positive",this.positive,this),this.navEvents.on("left",this.left,this),this.navEvents.on("right",this.right,this),this.navEvents.on("up",this.up,this),this.navEvents.on("down",this.down,this),this.keyboardListener=new p({events:this.navEvents,aliasMap:{esc:"negative",enter:"positive"},wait:!0}),this.sequences=d.getLevelArbiter().getSequences(),this.sequenceToLevels=d.getLevelArbiter().getSequenceToLevels(),this.container=new v({title:c.str("select-a-level")}),this.render(),d.getEvents().on("resetMapSolved",this.render,this),d.getEvents().on("localeChanged",this.render,this),e.wait||this.show()},render:function(){y.__super__.render.apply(this,arguments),this.buildSequences()},positive:function(){if(!this.selectedID)return;this.loadLevelID(this.selectedID)},left:function(){if(this.turnOnKeyboardSelection())return;this.leftOrRight(-1)},leftOrRight:function(e){this.deselectIconByID(this.selectedID),this.selectedIndex=this.wrapIndex(this.selectedIndex+e,this.getCurrentSequence()),this.selectedID=this.getSelectedID(),this.selectIconByID(this.selectedID)},right:function(){if(this.turnOnKeyboardSelection())return;this.leftOrRight(1)},up:function(){if(this.turnOnKeyboardSelection())return;this.selectedSequence=this.getPreviousSequence(),this.downOrUp()},down:function(){if(this.turnOnKeyboardSelection())return;this.selectedSequence=this.getNextSequence(),this.downOrUp()},downOrUp:function(){this.selectedIndex=this.boundIndex(this.selectedIndex,this.getCurrentSequence()),this.deselectIconByID(this.selectedID),this.selectedID=this.getSelectedID(),this.selectIconByID(this.selectedID)},turnOnKeyboardSelection:function(){return this.selectedID?!1:(this.selectFirst(),!0)},turnOffKeyboardSelection:function(){if(!this.selectedID)return;this.deselectIconByID(this.selectedID),this.selectedID=undefined,this.selectedIndex=undefined,this.selectedSequence=undefined},wrapIndex:function(e,t){return e=e>=t.length?0:e,e=e<0?t.length-1:e,e},boundIndex:function(e,t){return e=e>=t.length?t.length-1:e,e=e<0?0:e,e},getNextSequence:function(){var e=this.getSequenceIndex(this.selectedSequence),t=this.wrapIndex(e+1,this.sequences);return this.sequences[t]},getPreviousSequence:function(){var e=this.getSequenceIndex(this.selectedSequence),t=this.wrapIndex(e-1,this.sequences);return this.sequences[t]},getSequenceIndex:function(e){var t=this.sequences.indexOf(e);if(t<0)throw new Error("didnt find");return t},getIndexForID:function(e){return d.getLevelArbiter().getLevel(e).index},selectFirst:function(){var e=this.sequenceToLevels[this.sequences[0]][0].id;this.selectIconByID(e),this.selectedIndex=0,this.selectedSequence=this.sequences[0]},getCurrentSequence:function(){return this.sequenceToLevels[this.selectedSequence]},getSelectedID:function(){return this.sequenceToLevels[this.selectedSequence][this.selectedIndex].id},selectIconByID:function(e){this.toggleIconSelect(e,!0)},deselectIconByID:function(e){this.toggleIconSelect(e,!1)},toggleIconSelect:function(e,t){this.selectedID=e;var n="#levelIcon-"+e;$(n).toggleClass("selected",t)},negative:function(){this.hide()},testOption:function(e){return this.currentCommand&&(new RegExp("--"+e)).test(this.currentCommand.get("rawStr"))},show:function(e,t){this.currentCommand=t,this.updateSolvedStatus(),this.showDeferred=e,this.keyboardListener.listen(),y.__super__.show.apply(this)},hide:function(){this.showDeferred&&this.showDeferred.resolve(),this.showDeferred=undefined,this.keyboardListener.mute(),this.turnOffKeyboardSelection(),y.__super__.hide.apply(this)},loadLevelID:function(e){if(!this.testOption("noOutput")){d.getEventBaton().trigger("commandSubmitted","level "+e);var t=d.getLevelArbiter().getLevel(e),n=t.name.en_US;h.levelSelected(n)}this.hide()},updateSolvedStatus:function(){u.each(this.seriesViews,function(e){e.updateSolvedStatus()},this)},buildSequences:function(){this.seriesViews=[],u.each(this.sequences,function(e){this.seriesViews.push(new b({destination:this.$el,name:e,navEvents:this.navEvents}))},this)}}),b=g.extend({tagName:"div",className:"seriesView box flex1 vertical",template:u.template($("#series-view").html()),events:{"click div.levelIcon":"click","mouseenter div.levelIcon":"enterIcon","mouseleave div.levelIcon":"leaveIcon"},initialize:function(e){this.name=e.name||"intro",this.navEvents=e.navEvents,this.info=d.getLevelArbiter().getSequenceInfo(this.name),this.levels=d.getLevelArbiter().getLevelsInSequence(this.name),this.levelIDs=[],u.each(this.levels,function(e){this.levelIDs.push(e.id)},this),this.destination=e.destination,this.JSON={displayName:c.getIntlKey(this.info,"displayName"),about:c.getIntlKey(this.info,"about")||"&nbsp;",ids:this.levelIDs},this.render(),this.updateSolvedStatus()},updateSolvedStatus:function(){var e=this.$("div.levelIcon").each(function(e,t){var n=$(t).attr("data-id");$(t).toggleClass("solved",d.getLevelArbiter().isLevelSolved(n))})},getEventID:function(e){var t=e.target;return $(t).attr("data-id")},resetAbout:function(){this.$("p.about").text(c.getIntlKey(this.info,"about")).css("font-style","inherit")},setAbout:function(e){this.$("p.about").text(e).css("font-style","italic")},enterIcon:function(e){var t=this.getEventID(e),n=d.getLevelArbiter().getLevel(t);this.setAbout(c.getName(n))},leaveIcon:function(){this.resetAbout()},click:function(e){var t=this.getEventID(e);this.navEvents.trigger("clickedID",t)}});n.LevelDropdownView=y}),e.define("/src/js/views/commandViews.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../util").isBrowser()?a=window.Backbone:a=e("backbone"),f=e("../models/collections").CommandEntryCollection,l=e("../app"),c=e("../models/commandModel").Command,h=e("../models/commandModel").CommandEntry,p=e("../util/errors"),d=p.Warning,v=e("../util"),m=e("../log"),g=e("../util/keyboard"),y=a.View.extend({initialize:function(e){l.getEvents().on("commandSubmittedPassive",this.addToCommandHistory,this),this.commands=new f,this.commands.fetch({success:u.bind(function(){var e=[];this.commands.each(function(t){e.push(t)}),e.reverse(),this.commands.reset(),u.each(e,function(e){this.commands.add(e)},this)},this)}),this.index=-1,this.commandParagraph=this.$("#prompt p.command")[0],this.commandCursor=this.$("#prompt span.cursor")[0],this.focus(),l.getEvents().on("rollupCommands",this.rollupCommands,this),l.getEventBaton().stealBaton("keydown",this.onKeyDown,this),l.getEventBaton().stealBaton("keyup",this.onKeyUp,this)},events:{"blur #commandTextField":"hideCursor","focus #commandTextField":"showCursor"},blur:function(){this.hideCursor()},focus:function(){this.$("#commandTextField").focus(),this.showCursor()},hideCursor:function(){this.toggleCursor(!1)},showCursor:function(){this.toggleCursor(!0)},toggleCursor:function(e){$(this.commandCursor).toggleClass("shown",e)},onKeyDown:function(e){var t=e.target;this.updatePrompt(t)},onKeyUp:function(e){this.onKeyDown(e);var t={enter:u.bind(function(){this.submit()},this),up:u.bind(function(){this.commandSelectChange(1)},this),down:u.bind(function(){this.commandSelectChange(-1)},this)},n=g.mapKeycodeToKey(e.which||e.keyCode);t[n]!==undefined&&(e.preventDefault(),t[n](),this.onKeyDown(e))},badHtmlEncode:function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/</g,"&lt;").replace(/ /g,"&nbsp;").replace(/\n/g,"")},updatePrompt:function(e){e=e||{};var t=$("#commandTextField").val(),n=this.badHtmlEncode(t);this.commandParagraph.innerHTML=n,this.cursorUpdate(t.length,e.selectionStart,e.selectionEnd),l.getEvents().trigger("commandScrollDown")},cursorUpdate:function(t,n,r){if(n===undefined||r===undefined)n=Math.max(t-1,0),r=t;var i=e("../util/zoomLevel").detectZoom(),s=10*i,o=22*i,u=$(this.commandParagraph).width(),a=u/s,f=Math.min(Math.max(1,r-n),a),l=String(f*s)+"px",c=String(s*(n%a))+"px",h=String(Math.floor(n/a)*o)+"px";$(this.commandCursor).css({width:l,left:c,top:h})},commandSelectChange:function(e){this.index+=e;if(this.index>=this.commands.length||this.index<0){this.clear(),this.index=-1;return}var t=this.commands.toArray()[this.index].get("text");this.setTextField(t)},clearLocalStorage:function(){this.commands.each(function(e){a.sync("delete",e,function(){})},this)},setTextField:function(e){this.$("#commandTextField").val(e)},clear:function(){this.setTextField("")},submit:function(){var e=this.$("#commandTextField").val().replace("\n","");this.clear(),this.submitCommand(e),this.index=-1},rollupCommands:function(e){var t=this.commands.toArray().slice(1,Number(e)+1);t.reverse();var n="";u.each(t,function(e){n+=e.get("text")+";"},this);var r=new h({text:n});this.commands.unshift(r),a.sync("create",r,function(){})},addToCommandHistory:function(e){var t=e.length&&this.index===-1||e.length&&this.index!==-1&&this.commands.toArray()[this.index].get("text")!==e;if(!t)return;var n=new h({text:e});this.commands.unshift(n),a.sync("create",n,function(){}),this.commands.length>100&&this.clearLocalStorage(),m.commandEntered(e)},submitCommand:function(e){l.getEventBaton().trigger("commandSubmitted",e)}}),b=a.View.extend({tagName:"div",model:c,template:u.template($("#command-template").html()),events:{click:"clicked"},clicked:function(e){},initialize:function(){this.model.bind("change",this.wasChanged,this),this.model.bind("destroy",this.remove,this)},wasChanged:function(e,t){var n=t.changes,r=u.keys(n);u.difference(r,["status"]).length===0?this.updateStatus():this.render()},updateStatus:function(){var e=["inqueue","processing","finished"],t={};u.each(e,function(e){t[e]=!1}),t[this.model.get("status")]=!0;var n=this.$("p.commandLine");u.each(t,function(e,t){n.toggleClass(t,e)})},render:function(){var e=u.extend({resultType:"",result:"",formattedWarnings:this.model.getFormattedWarnings()},this.model.toJSON());return this.$el.html(this.template(e)),this},remove:function(){$(this.el).hide()}}),w=a.View.extend({initialize:function(e){this.collection=e.collection,this.collection.on("add",this.addOne,this),this.collection.on("reset",this.addAll,this),this.collection.on("all",this.render,this),this.collection.on("change",this.scrollDown,this),l.getEvents().on("commandScrollDown",this.scrollDown,this),l.getEvents().on("clearOldCommands",this.clearOldCommands,this)},addWarning:function(e){var t=new d({msg:e}),n=new c({error:t,rawStr:"Warning:"});this.collection.add(n)},clearOldCommands:function(){var e=[];this.collection.each(function(t){t.get("status")!=="inqueue"&&t.get("status")!=="processing"&&e.push(t)},this),u.each(e,function(e){e.destroy()},this),this.scrollDown()},scrollDown:function(){var e=$("#commandDisplay")[0],t=$("#terminal")[0],n=e.clientHeight>t.clientHeight||$(window).height()<e.clientHeight;$(t).toggleClass("scrolling",n),n&&(t.scrollTop=t.scrollHeight)},addOne:function(e){var t=new b({model:e});this.$("#commandDisplay").append(t.render().el),this.scrollDown()},addAll:function(){this.collection.each(this.addOne)}});n.CommandPromptView=y,n.CommandLineHistoryView=w}),e.define("/src/js/util/zoomLevel.js",function(e,t,n,r,i,s,o){function f(){return!window.outerWidth||!window.innerWidth?(a&&(console.warn("Can't detect zoom level correctly :-/"),a=!1),1):window.outerWidth/window.innerWidth}var u=e("underscore"),a=!0,l=!0,c=function(e,t){var n=0;setInterval(function(){var r=f();if(r!==n){if(l){l=!1;return}n=r,e.apply(t,[r])}else l=!0},500)};n.setupZoomPoll=c,n.detectZoom=f}),e.define("/src/js/dialogs/sandbox.js",function(e,t,n,r,i,s,o){n.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Welcome to LearnGitBranching!","","This application is designed to help beginners grasp ","the powerful concepts behind branching when working ","with git. We hope you enjoy this application and maybe ","even learn something!","","# Demo!","","If you have not seen the demo, please check it out here:","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","Annoyed at this dialog? Append `?NODEMO` to the url to get rid of it, linked below for convenience:","","[http://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Git commands","","You have a large variety of git commands available in sandbox mode. These include",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Sharing is caring!","","Share trees with your friends via `export tree` and `import tree`","","Have a great lesson to share? Try building a level with `build level` or try out a friend's level with `import level`","","To see the full range of commands, try `show commands`. There are some gems like `undo` and `reset`","","For now let's get you started on the `levels`..."]}}],ja:[{type:"ModalAlert",options:{markdowns:["## LearnGitBranchingへようこそ","","gitのパワフルなブランチ機能のコンセプトが ","学びやすくなるようにこのアプリケーションを作りました。 ","このアプリケーションを楽しんで使って頂いて、 ","何かを学習して頂けたなら嬉しいです。","","# とりあえず触ってみたい方へ：","","簡単なデモを用意してあるので、もしよければこちらもご覧ください：","","[http://remore.github.io/learnGitBranching-ja/?demo](http://remore.github.io/learnGitBranching-ja/?demo)","","このダイアログ自体を省略するには、以下のようにURLの末尾にクエリストリング`?NODEMO`を付加してアクセスしてください。","","[http://remore.github.io/learnGitBranching-ja/?NODEMO](http://remore.github.io/learnGitBranching-ja/?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## ここで学べるGitのオペレーション","","ここでは、下記の種類のgitコマンドを学ぶことができます。",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 学習した内容を共有できます","","画面左のコマンドプロンプトから`export tree`や`import tree`とタイプすることで、gitのツリー構造を友達に送ることができます","","何か教材になるようなケースはご存知ないでしょうか。`build level`で課題を作成したり、`import level`で他の人の課題に挑戦してみてください。","","それでは教材の選択画面に進んでみることにします。"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 欢迎来到GIT的世界","","本应用旨在帮助大家领会 git 分支背后的强大概念。","","希望各位能喜欢这个培训，并能够快速掌握GIT的基本命令！","","","### 不是有SVN了吗？","","那先来看看GIT与SVN有什么区别","","","",""]}},{type:"ModalAlert",options:{markdowns:["## GIT与SVN 有何不同",""," * GIT是分布式的，SVN不是",""," * GIT把内容按元数据方式存储，而SVN是按文件",""," * GIT分支和SVN的分支不同",""," * GIT没有一个全局的版本号，而SVN有",""," * GIT的内容完整性要优于SVN",""]}},{type:"ModalAlert",options:{markdowns:["## Git 命令","","这次培训仅仅使用的下面这些命令：",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 同时，有好多命令不支持，","","如下面这些命令。为什么不支持? 因为，我们主要是讲branch：",""," * clone 克隆一个项目"," * remote 添加remote"," * add 跟踪文件"," * fetch 获取远程数据"," * pull 从远程repo(sitory)中拉数据->合并"," * push 将数据推到远程的repo(sitory)中"," * branch -d 删除branch"," * push origin --delete 或者 push origin :<branchName>"," * tag 打tag"," * push origin :refs/tags/<tagname> 删除tag"]}},{type:"ModalAlert",options:{markdowns:["## Welcome to Git World!","言归正传，让我们先从 `levels` 开始……"]}}],ko:[{type:"ModalAlert",options:{markdowns:["## Git 브랜치 배우기를 시작합니다!","","이 애플리케이션은 git을 쓸 때 필요한 브랜치에 대한 개념을","탄탄히 잡게끔 도와드리기 위해 만들었습니다. 재밌게 사용해주시기를","바라며, 무언가를 배워가신다면 더 기쁘겠습니다!","","이 애플리케이션은 [Peter Cottle](https://github.io/pcottle)님의 [LearnGitBranching](http://pcottle.github.io/learnGitBranching/)를 번역한 것입니다.","아래 데모를 먼저 보셔도 좋습니다.","","<http://pcottle.github.io/learnGitBranching/?demo&locale=ko>"]}},{type:"ModalAlert",options:{markdowns:["## Git 명령어","","연습 모드에서 쓸 수 있는 다양한 git명령어는 다음과 같습니다",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 공유해주세요!","","`export tree` 와 `import tree`로 여러분의 친구들에게 트리를 공유해주세요","","훌륭한 학습 자료가 있으신가요? `build level`로 레벨을 만들어 보시거나, 친구의 레벨을 `import level`로 가져와서 실험해보세요","","이제 레슨을 시작해봅시다..."]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Bienvenue sur LearnGitBranching!","","Cette application a été conçue pour aider les débutants à saisir ","les puissants concepts derrière les branches en travaillant ","avec git. Nous espérons que vous apprécierez cette application et ","que vous apprendrez peut-être quelque chose d'intéressant !","","# Démo !","","Si vous n'avez pas vu la démo, vous pouvez le faire là :","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","Agacé par ce dialogue ? Ajoutez `?NODEMO` à l'URL pour le supprimer, en lien ci-dessous pour votre commodité :","","[http://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Commandes Git","","Il existe une large variété de commandes git disponibles dans le mode bac à sable. Sont inclues",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Partager, c'est se soucier!","","Partagez des arbres avec vous amis via `export tree` et `import tree`","","Vous avez une grande leçon à partager ? Essayez de construire un niveau avec `build level` ou essayez le niveau d'un ami avec `import level`","","Pour voir la gamme complète des commandes, tapez `show commands`. Il y a quelques perles telles que `undo` et `reset`","","Mais tout de suite commencez sur les `levels`…"]}}]}}),e.define("sys",function(e,t,n,r,i,s,o){t.exports=e("util")}),e.define("child_process",function(e,t,n,r,i,s,o){n.spawn=function(){},n.exec=function(){}}),e.define("/src/js/visuals/tree.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=a.Model.extend({removeKeys:function(e){u.each(e,function(e){this.get(e)&&this.get(e).remove()},this)},animateAttrKeys:function(e,t,n,r){e=u.extend({},{include:["circle","arrow","rect","path","text"],exclude:[]},e||{});var i=this.getAttributes();u.each(e.include,function(e){i[e]=u.extend({},i[e],t)}),u.each(e.exclude,function(e){delete i[e]}),this.animateToAttr(i,n,r)}});n.VisBase=f}),e.define("/src/js/app/index.js",function(e,t,n,r,i,s,o){function x(){var t=e("../views"),n=e("../models/collections"),r=e("../views/commandViews"),i=new t.MainHelperBar,s=new t.BackgroundView;this.commandCollection=new n.CommandCollection,this.commandBuffer=new n.CommandBuffer({collection:this.commandCollection}),this.commandPromptView=new r.CommandPromptView({el:$("#commandLineBar")}),this.commandLineHistoryView=new r.CommandLineHistoryView({el:$("#commandLineHistory"),collection:this.commandCollection})}var u=e("underscore"),a=e("backbone"),f=e("../util/constants"),l=e("../util"),c=e("../intl"),h=u.clone(a.Events),p,d,v,m,g,y=function(){var t=e("../sandbox/").Sandbox,n=e("../level").Level,r=e("../util/eventBaton").EventBaton,i=e("../level/arbiter").LevelArbiter,s=e("../views/levelDropdownView").LevelDropdownView;v=new r,p=new x,d=new t,m=new i,g=new s({wait:!0}),h.on("localeChanged",w),h.on("vcsModeChange",b),E(v),S(d)},b=function(e){if(!window.$)return;var t=e.mode,n=t.slice(0,1).toUpperCase()+t.slice(1),r=n==="Git"?"Hg":"Git",i=new RegExp(r,"g");document.title=c.str("learn-git-branching").replace(i,n),$("span.vcs-mode-aware").each(function(e,t){var r=$(t).text().replace(i,n);$(t).text(r)})},w=function(){if(!window.$)return;$("span.intl-aware").each(function(t,n){var r=e("../intl"),i=$(n).attr("data-intl");$(n).text(r.str(i).toUpperCase())})},E=function(e){var t=function(){$("#commandTextField").focus()};t(),$(window).focus(function(t){e.trigger("windowFocus",t)}),$(document).click(function(t){e.trigger("documentClick",t)}),$(document).bind("keydown",function(t){e.trigger("docKeydown",t)}),$(document).bind("keyup",function(t){e.trigger("docKeyup",t)}),$(window).on("resize",function(e){h.trigger("resize",e)}),e.stealBaton("docKeydown",function(){}),e.stealBaton("docKeyup",function(){}),e.stealBaton("windowFocus",t),e.stealBaton("documentClick",t);var n=function(t){return function(){var n=[t];u.each(arguments,function(e){n.push(e)}),e.trigger.apply(e,n)}};$("#commandTextField").on("keydown",n("keydown")),$("#commandTextField").on("keyup",n("keyup")),$(window).trigger("resize")},S=function(e){var t=l.parseQueryString(window.location.href),n;t.hasOwnProperty("demo")?n=["git commit; git checkout -b bugFix C1; git commit; git merge master; git checkout master; git commit; git rebase bugFix;","delay 1000; reset;","level advanced1 --noFinishDialog --noStartCommand --noIntroDialog;","delay 2000; show goal; delay 1000; hide goal;","git checkout bugFix; git rebase master; git checkout side; git rebase bugFix;","git checkout another; git rebase side; git rebase another master;","help; levels"]:t.hasOwnProperty("hgdemo")?(n=['importTreeNow {"branches":{"master":{"target":"C3","id":"master"},"feature":{"target":"C2","id":"feature"},"debug":{"target":"C4","id":"debug"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"}},"HEAD":{"target":"feature","id":"HEAD"}}',"delay 1000","git rebase master","delay 1000","undo","hg book","delay 1000","hg rebase -d master"],n=n.join(";#").split("#")):t.hasOwnProperty("hgdemo2")?(n=['importTreeNow {"branches":{"master":{"target":"C3","id":"master"},"feature":{"target":"C2","id":"feature"},"debug":{"target":"C4","id":"debug"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"}},"HEAD":{"target":"debug","id":"HEAD"}}',"delay 1000","git rebase master","delay 1000","undo","hg sum","delay 1000","hg rebase -d master"],n=n.join(";#").split("#")):t.hasOwnProperty("hgdemo3")?(n=['importTreeNow {"branches":{"master":{"target":"C1","id":"master"},"trunk":{"target":"C2","id":"trunk"},"feature":{"target":"C5","id":"feature"},"debug":{"target":"C4","id":"debug"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"}},"HEAD":{"target":"feature","id":"HEAD"}}',"hg book","delay 2000","hg rebase -d trunk"],n=n.join(";#").split("#")):t.hasOwnProperty("NODEMO")||(n=["git help;","delay 1000;","help;","levels"]),n&&e.mainVis.customEvents.on("gitEngineReady",function(){v.trigger("commandSubmitted",n.join(""))}),t.locale!==undefined&&t.locale.length&&(f.GLOBAL.locale=t.locale,h.trigger("localeChanged"));if(t.command){var r=unescape(t.command);e.mainVis.customEvents.on("gitEngineReady",function(){v.trigger("commandSubmitted",r)})}(/(iPhone|iPod|iPad).*AppleWebKit/i.test(navigator.userAgent)||/android/i.test(navigator.userAgent))&&e.mainVis.customEvents.on("gitEngineReady",function(){v.trigger("commandSubmitted","mobile alert")})};e("../util").isBrowser()&&$(document).ready(y),n.getEvents=function(){return h},n.getSandbox=function(){return d},n.getEventBaton=function(){return v},n.getCommandUI=function(){return p},n.getLevelArbiter=function(){return m},n.getLevelDropdown=function(){return g},n.init=y}),e("/src/js/app/index.js"),e.define("/src/js/commands/index.js",function(e,t,n,r,i,s,o){function g(e,t,n){this.vcs=e,this.method=t,this.rawOptions=n,this.supportedMap=v.getOptionMap()[e][t];if(this.supportedMap===undefined)throw new Error("No option map for "+t);this.generalArgs=[]}var u=e("underscore"),a=e("../intl"),f=e("../util/errors"),l=e("../git/commands"),c=e("../mercurial/commands"),h=f.CommandProcessError,p=f.CommandResult,d={git:l.commandConfig,hg:c.commandConfig},v={execute:function(e,t,n,r){if(!d[e][t])throw new Error("i dont have a command for "+t);var i=d[e][t];if(i.delegate)return this.delegateExecute(i,n,r);i.execute.call(this,n,r)},delegateExecute:function(e,t,n){var r=e.delegate.call(this,t,n);r.multiDelegate?u.each(r.multiDelegate,function(e){n.setOptionsMap(e.options||{}),n.setGeneralArgs(e.args||[]),d[e.vcs][e.name].execute.call(this,t,n)},this):(e=d[r.vcs][r.name],d[r.vcs][r.name].execute.call(this,t,n))},blankMap:function(){return{git:{},hg:{}}},getShortcutMap:function(){var e=this.blankMap();return this.loop(function(t,n,r){if(!t.sc)return;e[r][n]=t.sc},this),e},getOptionMap:function(){var e=this.blankMap();return this.loop(function(t,n,r){var i=t.displayName||n,s={};u.each(t.options,function(e){s[e]=!1}),e[r][i]=s}),e},getRegexMap:function(){var e=this.blankMap();return this.loop(function(t,n,r){var i=t.displayName||n;e[r][i]=t.regex}),e},getCommandsThatCount:function(){var e=this.blankMap();return this.loop(function(t,n,r){if(t.dontCountForGolf)return;e[r][n]=t.regex}),e},loop:function(e,t){u.each(d,function(t,n){u.each(t,function(t,r){e(t,r,n)})})}},m=function(e){var t,n,r;u.each(v.getRegexMap(),function(i,s){u.each(i,function(i,o){i.exec(e)&&(t=s,n=o,r=e.split(" ").slice(2).join(" "))})});if(!n)return!1;var i=new g(t,n,r),s=i.explodeAndSet();return{toSet:{generalArgs:i.generalArgs,supportedMap:i.supportedMap,error:s,vcs:t,method:n,options:r,eventName:"processGitCommand"}}};g.prototype.explodeAndSet=function(){var e=this.rawOptions.match(/('.*?'|".*?"|\S+)/g)||[];for(var t=0;t<e.length;t++){var n=e[t];if(n.slice(0,1)=="-"){if(this.supportedMap[n]===undefined)return new h({msg:a.str("option-not-supported",{option:n})});var r=[],i=t+1;while(i<e.length&&e[i].slice(0,1)!="-")r.push(e[i]),i+=1;t=i-1,this.supportedMap[n]=r}else this.generalArgs.push(n)}},n.commands=v,n.parse=m}),e("/src/js/commands/index.js"),e.define("/src/js/dialogs/confirmShowSolution.js",function(e,t,n,r,i,s,o){n.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Are you sure you want to see the solution?","","I believe in you! You can do it"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 确定要看答案吗？","","哥相信你！你可以的"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Êtes-vous sûr de vouloir voir la solution ?","","Je crois en vous ! Vous pouvez le faire"]}}]}}),e("/src/js/dialogs/confirmShowSolution.js"),e.define("/src/js/dialogs/levelBuilder.js",function(e,t,n,r,i,s,o){n.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Welcome to the level builder!","","Here are the main steps:","","  * Set up the initial environment with git commands","  * Define the starting tree with ```define start```","  * Enter the series of git commands that compose the (optimal) solution","  * Define the goal tree with ```define goal```. Defining the goal also defines the solution","  * Optionally define a hint with ```define hint```","  * Edit the name with ```define name```","  * Optionally define a nice start dialog with ```edit dialog```","  * Enter the command ```finish``` to output your level JSON!"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 欢迎使用关卡生成器！","","主要步骤如下：","","  * 使用 git 命令布置好初始环境","  * 使用 ```define start``` 命令定义起始树","  * 输入一系列 git 命令，编好答案","  * 使用 ```define goal``` 命令定义目标树。定义目标的同时定义答案","  * 还可以用 ```define hint``` 命令定义一个提示","  * 用 ```define name``` 修改名称","  * 还可以用 ```edit dialog``` 定义一个漂亮的开始对话框","  * 输入 ```finish``` 就可以输出你的关卡数据（JSON）了！"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Bienvenue dans l'éditeur niveaux !","","Voici les étapes principales :","","  * Mettez en place l'environnement initial avec des commandes git","  * Définissez l'arbre de départ avec ```define start```","  * Saisissez la série de commandes git qui composent la solution (optimale)","  * Définissez l'arbre cible avec ```define goal```. Cela définit aussi la solution","  * Optionnellement, définissez un indice avec ```define hint```","  * Changez le nom avec ```define name```","  * Optionellement, definissez un joli dialogue de départ avec ```edit dialog```","  * Entrez la commande ```finish``` pour délivrer votre niveau JSON!"]}}]}}),e("/src/js/dialogs/levelBuilder.js"),e.define("/src/js/dialogs/nextLevel.js",function(e,t,n,r,i,s,o){n.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Great Job!!","","You solved the level in *{numCommands}* command(s); ","our solution uses {best}."]}}],ja:[{type:"ModalAlert",options:{markdowns:["## 完成!","","あなたは*{numCommands}*回のコマンドでこの課題をクリアしました; ","模範解答では{best}回です。"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 恭喜！","","你用 *{numCommands}* 条命令搞定了这一关；我们的答案要用 {best}。"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Beau Travail!!","","Vous avez résolu le niveau en *{numCommands}* commande(s); ","notre solution le fait en {best}."]}}]}}),e("/src/js/dialogs/nextLevel.js"),e.define("/src/js/dialogs/sandbox.js",function(e,t,n,r,i,s,o){n.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Welcome to LearnGitBranching!","","This application is designed to help beginners grasp ","the powerful concepts behind branching when working ","with git. We hope you enjoy this application and maybe ","even learn something!","","# Demo!","","If you have not seen the demo, please check it out here:","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","Annoyed at this dialog? Append `?NODEMO` to the url to get rid of it, linked below for convenience:","","[http://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Git commands","","You have a large variety of git commands available in sandbox mode. These include",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Sharing is caring!","","Share trees with your friends via `export tree` and `import tree`","","Have a great lesson to share? Try building a level with `build level` or try out a friend's level with `import level`","","To see the full range of commands, try `show commands`. There are some gems like `undo` and `reset`","","For now let's get you started on the `levels`..."]}}],ja:[{type:"ModalAlert",options:{markdowns:["## LearnGitBranchingへようこそ","","gitのパワフルなブランチ機能のコンセプトが ","学びやすくなるようにこのアプリケーションを作りました。 ","このアプリケーションを楽しんで使って頂いて、 ","何かを学習して頂けたなら嬉しいです。","","# とりあえず触ってみたい方へ：","","簡単なデモを用意してあるので、もしよければこちらもご覧ください：","","[http://remore.github.io/learnGitBranching-ja/?demo](http://remore.github.io/learnGitBranching-ja/?demo)","","このダイアログ自体を省略するには、以下のようにURLの末尾にクエリストリング`?NODEMO`を付加してアクセスしてください。","","[http://remore.github.io/learnGitBranching-ja/?NODEMO](http://remore.github.io/learnGitBranching-ja/?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## ここで学べるGitのオペレーション","","ここでは、下記の種類のgitコマンドを学ぶことができます。",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 学習した内容を共有できます","","画面左のコマンドプロンプトから`export tree`や`import tree`とタイプすることで、gitのツリー構造を友達に送ることができます","","何か教材になるようなケースはご存知ないでしょうか。`build level`で課題を作成したり、`import level`で他の人の課題に挑戦してみてください。","","それでは教材の選択画面に進んでみることにします。"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 欢迎来到GIT的世界","","本应用旨在帮助大家领会 git 分支背后的强大概念。","","希望各位能喜欢这个培训，并能够快速掌握GIT的基本命令！","","","### 不是有SVN了吗？","","那先来看看GIT与SVN有什么区别","","","",""]}},{type:"ModalAlert",options:{markdowns:["## GIT与SVN 有何不同",""," * GIT是分布式的，SVN不是",""," * GIT把内容按元数据方式存储，而SVN是按文件",""," * GIT分支和SVN的分支不同",""," * GIT没有一个全局的版本号，而SVN有",""," * GIT的内容完整性要优于SVN",""]}},{type:"ModalAlert",options:{markdowns:["## Git 命令","","这次培训仅仅使用的下面这些命令：",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 同时，有好多命令不支持，","","如下面这些命令。为什么不支持? 因为，我们主要是讲branch：",""," * clone 克隆一个项目"," * remote 添加remote"," * add 跟踪文件"," * fetch 获取远程数据"," * pull 从远程repo(sitory)中拉数据->合并"," * push 将数据推到远程的repo(sitory)中"," * branch -d 删除branch"," * push origin --delete 或者 push origin :<branchName>"," * tag 打tag"," * push origin :refs/tags/<tagname> 删除tag"]}},{type:"ModalAlert",options:{markdowns:["## Welcome to Git World!","言归正传，让我们先从 `levels` 开始……"]}}],ko:[{type:"ModalAlert",options:{markdowns:["## Git 브랜치 배우기를 시작합니다!","","이 애플리케이션은 git을 쓸 때 필요한 브랜치에 대한 개념을","탄탄히 잡게끔 도와드리기 위해 만들었습니다. 재밌게 사용해주시기를","바라며, 무언가를 배워가신다면 더 기쁘겠습니다!","","이 애플리케이션은 [Peter Cottle](https://github.io/pcottle)님의 [LearnGitBranching](http://pcottle.github.io/learnGitBranching/)를 번역한 것입니다.","아래 데모를 먼저 보셔도 좋습니다.","","<http://pcottle.github.io/learnGitBranching/?demo&locale=ko>"]}},{type:"ModalAlert",options:{markdowns:["## Git 명령어","","연습 모드에서 쓸 수 있는 다양한 git명령어는 다음과 같습니다",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 공유해주세요!","","`export tree` 와 `import tree`로 여러분의 친구들에게 트리를 공유해주세요","","훌륭한 학습 자료가 있으신가요? `build level`로 레벨을 만들어 보시거나, 친구의 레벨을 `import level`로 가져와서 실험해보세요","","이제 레슨을 시작해봅시다..."]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Bienvenue sur LearnGitBranching!","","Cette application a été conçue pour aider les débutants à saisir ","les puissants concepts derrière les branches en travaillant ","avec git. Nous espérons que vous apprécierez cette application et ","que vous apprendrez peut-être quelque chose d'intéressant !","","# Démo !","","Si vous n'avez pas vu la démo, vous pouvez le faire là :","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","Agacé par ce dialogue ? Ajoutez `?NODEMO` à l'URL pour le supprimer, en lien ci-dessous pour votre commodité :","","[http://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Commandes Git","","Il existe une large variété de commandes git disponibles dans le mode bac à sable. Sont inclues",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Partager, c'est se soucier!","","Partagez des arbres avec vous amis via `export tree` et `import tree`","","Vous avez une grande leçon à partager ? Essayez de construire un niveau avec `build level` ou essayez le niveau d'un ami avec `import level`","","Pour voir la gamme complète des commandes, tapez `show commands`. Il y a quelques perles telles que `undo` et `reset`","","Mais tout de suite commencez sur les `levels`…"]}}]}}),e("/src/js/dialogs/sandbox.js"),e.define("/src/js/git/commands.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../intl"),f=e("../util/errors"),l=f.CommandProcessError,c=f.GitError,h=f.Warning,p=f.CommandResult,d={commit:{sc:/^(gc|git ci)($|\s)/,regex:/^git +commit($|\s)/,options:["--amend","-a","-am","-m"],execute:function(e,t){var n=t.getOptionsMap();t.acceptNoGeneralArgs();if(n["-am"]&&(n["-a"]||n["-m"]))throw new c({msg:a.str("git-error-options")});var r=null,i=null;n["-a"]&&t.addWarning(a.str("git-warning-add")),n["-am"]&&(i=n["-am"],t.validateArgBounds(i,1,1,"-am"),r=i[0]),n["-m"]&&(i=n["-m"],t.validateArgBounds(i,1,1,"-m"),r=i[0]);var s=e.commit({isAmend:n["--amend"]});r&&(r=r.replace(/&quot;/g,'"').replace(/^"/g,"").replace(/"$/g,""),s.set("commitMessage",r));var o=e.animationFactory.playCommitBirthPromiseAnimation(s,e.gitVisuals);e.animationQueue.thenFinish(o)}},cherrypick:{displayName:"cherry-pick",regex:/^git +cherry-pick($|\s)/,execute:function(e,t){var n=t.getOptionsMap(),r=t.getGeneralArgs();t.validateArgBounds(r,1,Number.MAX_VALUE);var i=e.getUpstreamSet("HEAD"),s=u.map(r,function(t){var n=e.getCommitFromRef(t);if(i[n.get("id")])throw new c({msg:a.str("git-error-already-exists",{commit:n.get("id")})});return n},this);e.setupCherrypickChain(s)}},pull:{regex:/^git +pull($|\s)/,options:["--rebase"],execute:function(e,t){if(!e.hasOrigin())throw new c({msg:a.str("git-error-origin-required")});var n=t.getOptionsMap();t.acceptNoGeneralArgs(),e.pull({isRebase:n["--rebase"]})}},fakeTeamwork:{regex:/^git +fakeTeamwork($|\s)/,execute:function(e,t){var n=t.getGeneralArgs();if(!e.hasOrigin())throw new c({msg:a.str("git-error-origin-required")});t.validateArgBounds(n,0,2);var r=e.origin.refs[n[0]]?n[0]:"master",i=parseInt(n[0],10)||n[1]||1,s=e.origin.resolveID(r);if(s.get("type")!=="branch")throw new c({msg:a.str("git-error-options")});e.fakeTeamwork(i,r)}},clone:{regex:/^git +clone *?$/,execute:function(e,t){t.acceptNoGeneralArgs(),e.makeOrigin(e.printTree())}},fetch:{regex:/^git +fetch *?$/,execute:function(e,t){if(!e.hasOrigin())throw new c({msg:a.str("git-error-origin-required")});t.acceptNoGeneralArgs(),e.fetch()}},branch:{sc:/^(gb|git br)($|\s)/,regex:/^git +branch($|\s)/,options:["-d","-D","-f","-a","-r","--contains"],execute:function(e,t){var n=t.getOptionsMap(),r=t.getGeneralArgs(),i=null;if(n["-d"]||n["-D"]){var s=n["-d"]||n["-D"];t.validateArgBounds(s,1,Number.MAX_VALUE,"-d"),u.each(s,function(t){e.deleteBranch(t)});return}if(n["--contains"]){i=n["--contains"],t.validateArgBounds(i,1,1,"--contains"),e.printBranchesWithout(i[0]);return}if(n["-f"]){i=n["-f"],t.twoArgsImpliedHead(i,"-f"),e.forceBranch(i[0],i[1]);return}if(r.length===0){var o;n["-a"]?o=e.getBranches():n["-r"]?o=e.getRemoteBranches():o=e.getLocalBranches(),e.printBranches(o);return}t.twoArgsImpliedHead(r),e.branch(r[0],r[1])}},add:{dontCountForGolf:!0,sc:/^ga($|\s)/,regex:/^git +add($|\s)/,execute:function(){throw new p({msg:a.str("git-error-staging")})}},reset:{regex:/^git +reset($|\s)/,options:["--hard","--soft"],execute:function(e,t){var n=t.getOptionsMap(),r=t.getGeneralArgs();if(n["--soft"])throw new c({msg:a.str("git-error-staging")});n["--hard"]&&(t.addWarning(a.str("git-warning-hard")),r=r.concat(n["--hard"])),t.validateArgBounds(r,1,1);if(e.getDetachedHead())throw new c({msg:a.str("git-error-reset-detached")});e.reset(r[0])}},revert:{regex:/^git +revert($|\s)/,execute:function(e,t){var n=t.getGeneralArgs();t.validateArgBounds(n,1,Number.MAX_VALUE),e.revert(n)}},merge:{regex:/^git +merge($|\s)/,execute:function(e,t){var n=t.getGeneralArgs();t.validateArgBounds(n,1,1);var r=e.merge(n[0]);if(r===undefined){e.animationFactory.refreshTree(e.animationQueue,e.gitVisuals);return}e.animationFactory.genCommitBirthAnimation(e.animationQueue,r,e.gitVisuals)}},log:{dontCountForGolf:!0,regex:/^git +log($|\s)/,execute:function(e,t){var n=t.getGeneralArgs();if(n.length==2){if(n[1][0]!="^")throw new c({msg:a.str("git-error-options")});e.logWithout(n[0],n[1])}t.oneArgImpliedHead(n),e.log(n[0])}},show:{dontCountForGolf:!0,regex:/^git +show($|\s)/,execute:function(e,t){var n=t.getGeneralArgs();t.oneArgImpliedHead(n),e.show(n[0])}},rebase:{sc:/^gr($|\s)/,options:["-i","--aboveAll"],regex:/^git +rebase($|\s)/,execute:function(e,t){var n=t.getOptionsMap(),r=t.getGeneralArgs();if(n["-i"]){var i=n["-i"];t.twoArgsImpliedHead(i," -i"),e.rebaseInteractive(i[0],i[1],{aboveAll:!!n["--aboveAll"]});return}t.twoArgsImpliedHead(r),e.rebase(r[0],r[1])}},status:{dontCountForGolf:!0,sc:/^(gst|gs|git st)($|\s)/,regex:/^git +status($|\s)/,execute:function(e){e.status()}},checkout:{sc:/^(go|git co)($|\s)/,regex:/^git +checkout($|\s)/,options:["-b","-B","-"],execute:function(e,t){var n=t.getOptionsMap(),r=t.getGeneralArgs(),i=null;if(n["-b"]){if(r.length)throw new c({msg:a.str("git-error-options")});i=n["-b"],t.twoArgsImpliedHead(i,"-b");var s=e.validateBranchName(i[0]);e.branch(s,i[1]),e.checkout(s);return}if(n["-"]){var o=e.HEAD.get("lastLastTarget");if(!o)throw new c({msg:a.str("git-result-nothing")});e.HEAD.set("target",o);return}if(n["-B"]){i=n["-B"],t.twoArgsImpliedHead(i,"-B"),e.forceBranch(i[0],i[1]),e.checkout(i[0]);return}t.validateArgBounds(r,1,1),e.checkout(e.crappyUnescape(r[0]))}},push:{regex:/^git +push($|\s)/,execute:function(e,t){if(!e.hasOrigin())throw new c({msg:a.str("git-error-origin-required")});t.acceptNoGeneralArgs(),e.push()}}},v=[[/^(git help($|\s)|git$)/,function(){var t=[a.str("git-version"),"<br/>",a.str("git-usage"),u.escape(a.str("git-usage-command")),"<br/>",a.str("git-supported-commands"),"<br/>"],n=e("../commands").commands.getOptionMap().git;u.each(n,function(e,n){t.push("git "+n),u.each(e,function(e,n){t.push("	 "+n)},this)},this);var r=t.join("\n");throw r=r.replace(/\t/g,"&nbsp;&nbsp;&nbsp;"),new p({msg:r})}]];n.commandConfig=d,n.instantCommands=v}),e("/src/js/git/commands.js"),e.define("/src/js/git/gitShim.js",function(e,t,n,r,i,s,o){function c(e){e=e||{},this.beforeCB=e.beforeCB||function(){},this.afterCB=e.afterCB||function(){};var t=function(e){e.resolve()};this.beforeDeferHandler=e.beforeDeferHandler||t,this.afterDeferHandler=e.afterDeferHandler||t,this.eventBaton=e.eventBaton||f.getEventBaton()}var u=e("underscore"),a=e("q"),f=e("../app"),l=e("../views/multiView").MultiView;c.prototype.insertShim=function(){this.eventBaton.stealBaton("processGitCommand",this.processGitCommand,this)},c.prototype.removeShim=function(){this.eventBaton.releaseBaton("processGitCommand",this.processGitCommand,this)},c.prototype.processGitCommand=function(e,t){this.beforeCB(e);var n=a.defer();n.promise.then(u.bind(function(){this.afterGitCommandProcessed(e,t)},this)).done();var r=u.bind(function(){this.eventBaton.passBatonBack("processGitCommand",this.processGitCommand,this,[e,n])},this),i=a.defer();i.promise.then(r).done(),this.beforeDeferHandler(i,e)},c.prototype.afterGitCommandProcessed=function(e,t){this.afterCB(e);var n=a.defer();n.promise.then(function(){t.resolve()}).done(),this.afterDeferHandler(n,e)},n.GitShim=c}),e("/src/js/git/gitShim.js"),e.define("/src/js/git/headless.js",function(e,t,n,r,i,s,o){function E(){var e={},t=function(){var e=f.defer();return e.resolve(),e.promise};for(var n in c)e[n]=t;return e.playRefreshAnimationAndFinish=function(e,t){t.finish()},e.refreshTree=function(e,t){e.finish()},e.highlightEachWithPromise=function(e,t,n){return e},e}var u=e("underscore"),a=e("backbone"),f=e("q"),l=e("../git").GitEngine,c=e("../visuals/animation/animationFactory").AnimationFactory,h=e("../visuals").GitVisuals,p=e("../git/treeCompare").TreeCompare,d=e("../util/eventBaton").EventBaton,v=e("../models/collections"),m=v.CommitCollection,g=v.BranchCollection,y=e("../models/commandModel").Command,b=e("../util/mock").mock,w=e("../util"),S=function(){this.init()};S.prototype.init=function(){this.commitCollection=new m,this.branchCollection=new g;var e=E(),t=b(h);this.gitEngine=new l({collection:this.commitCollection,branches:this.branchCollection,gitVisuals:t,animationFactory:e,eventBaton:new d}),this.gitEngine.init()};var x=function(e,t){var n=f.defer(),r=new S;r.sendCommand(e,n),n.promise.then(function(){t.resolve(r.gitEngine.exportTree())})};S.prototype.sendCommand=function(e,t){var n=f.defer(),r=n.promise,i=(new Date).getTime();w.splitTextCommand(e,function(e){r=r.then(u.bind(function(){var t=new y({rawStr:e}),n=f.defer();return this.gitEngine.dispatch(t,n),n.promise},this))},this),r.then(function(){var e=(new Date).getTime();t&&t.resolve()}),n.resolve()},n.HeadlessGit=S,n.getTreeQuick=x}),e("/src/js/git/headless.js"),e.define("/src/js/git/index.js",function(e,t,n,r,i,s,o){function E(e){this.rootCommit=null,this.refs={},this.HEAD=null,this.origin=null,this.mode="git",this.localRepo=null,this.branchCollection=e.branches,this.commitCollection=e.collection,this.gitVisuals=e.gitVisuals,this.eventBaton=e.eventBaton,this.eventBaton.stealBaton("processGitCommand",this.dispatch,this),this.animationFactory=e.animationFactory?e.animationFactory:c,this.initUniqueID()}var u=e("underscore"),a=e("../util").isBrowser()?a=window.Backbone:a=e("backbone"),f=e("q"),l=e("../intl"),c=e("../visuals/animation/animationFactory").AnimationFactory,h=e("../visuals/animation").AnimationQueue,p=e("./treeCompare").TreeCompare,d=e("../util/errors"),v=e("../app"),m=e("../commands"),g=d.GitError,y=d.CommandResult,b=e("../util/eventBaton").EventBaton,w="o/";E.prototype.initUniqueID=function(){this.uniqueId=function(){var e=0;return function(t){return t?t+e++:e++}}()},E.prototype.handleModeChange=function(e,t){if(this.mode===e){t();return}v.getEvents().trigger("vcsModeChange",{mode:e});var n=this.setMode(e);this.origin&&this.origin.setMode(e,function(){});if(!n){t();return}n.then(t)},E.prototype.getIsHg=function(){return this.mode==="hg"},E.prototype.setMode=function(e){var t=this.mode==="git"&&e==="hg";this.mode=e;if(!t)return;var n=f.defer();n.resolve();var r=n.promise,i=this.updateAllBranchesForHg();if(i)return r=r.then(u.bind(function(){return this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},this)),r=r.then(u.bind(function(){var e=this.pruneTree();if(!e)return;return this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),r;var s=this.pruneTree();if(!s)return;return this.animationFactory.playRefreshAnimation(this.gitVisuals)},E.prototype.assignLocalRepo=function(e){this.localRepo=e},E.prototype.defaultInit=function(){var e=this.getDefaultTree();this.loadTree(e)},E.prototype.getDefaultTree=function(){return JSON.parse(unescape("%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%2C%22type%22%3A%22branch%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22type%22%3A%22commit%22%2C%22parents%22%3A%5B%5D%2C%22author%22%3A%22Peter%20Cottle%22%2C%22createTime%22%3A%22Mon%20Nov%2005%202012%2000%3A56%3A47%20GMT-0800%20%28PST%29%22%2C%22commitMessage%22%3A%22Quick%20Commit.%20Go%20Bears%21%22%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22type%22%3A%22commit%22%2C%22parents%22%3A%5B%22C0%22%5D%2C%22author%22%3A%22Peter%20Cottle%22%2C%22createTime%22%3A%22Mon%20Nov%2005%202012%2000%3A56%3A47%20GMT-0800%20%28PST%29%22%2C%22commitMessage%22%3A%22Quick%20Commit.%20Go%20Bears%21%22%2C%22id%22%3A%22C1%22%7D%7D%2C%22HEAD%22%3A%7B%22id%22%3A%22HEAD%22%2C%22target%22%3A%22master%22%2C%22type%22%3A%22general%20ref%22%7D%7D"))},E.prototype.init=function(){this.rootCommit=this.makeCommit(null,null,{rootCommit:!0}),this.commitCollection.add(this.rootCommit);var e=this.makeBranch("master",this.rootCommit);this.HEAD=new S({id:"HEAD",target:e}),this.refs[this.HEAD.get("id")]=this.HEAD,this.commit()},E.prototype.hasOrigin=function(){return!!this.origin},E.prototype.isOrigin=function(){return!!this.localRepo},E.prototype.exportTreeForBranch=function(e){var t=this.exportTree(),n=this.getUpstreamSet(e),r=t.commits;t.commits={},u.each(r,function(e,r){n[r]&&(t.commits[r]=e)});var i=t.branches;return t.branches={},u.each(i,function(n,r){r===e&&(t.branches[r]=n)}),t.HEAD.target=e,t},E.prototype.exportTree=function(){var e={branches:{},commits:{},HEAD:null};u.each(this.branchCollection.toJSON(),function(t){t.target=t.target.get("id"),t.visBranch=undefined,e.branches[t.id]=t}),u.each(this.commitCollection.toJSON(),function(t){u.each(T.prototype.constants.circularFields,function(e){t[e]=undefined},this);var n=[];u.each(t.parents,function(e){n.push(e.get("id"))}),t.parents=n,e.commits[t.id]=t},this);var t=this.HEAD.toJSON();return t.visBranch=undefined,t.lastTarget=t.lastLastTarget=t.visBranch=undefined,t.target=t.target.get("id"),e.HEAD=t,this.hasOrigin()&&(e.originTree=this.origin.exportTree()),e},E.prototype.printTree=function(e){e=e||this.exportTree(),p.reduceTreeFields([e]);var t=JSON.stringify(e);return/'/.test(t)&&(t=escape(t)),t},E.prototype.printAndCopyTree=function(){window.prompt(l.str("Copy the tree string below"),this.printTree())},E.prototype.loadTree=function(e){e=JSON.parse(JSON.stringify(e)),this.removeAll(),this.instantiateFromTree(e),this.reloadGraphics(),this.initUniqueID()},E.prototype.loadTreeFromString=function(e){this.loadTree(JSON.parse(unescape(e)))},E.prototype.instantiateFromTree=function(e){var t={};u.each(e.commits,function(n){var r=this.getOrMakeRecursive(e,t,n.id);this.commitCollection.add(r)},this),u.each(e.branches,function(n){var r=this.getOrMakeRecursive(e,t,n.id);this.branchCollection.add(r,{silent:!0})},this);var n=this.getOrMakeRecursive(e,t,e.HEAD.id);this.HEAD=n,this.rootCommit=t.C0;if(!this.rootCommit)throw new Error("Need root commit of C0 for calculations");this.refs=t,this.gitVisuals.gitReady=!1,this.branchCollection.each(function(e){this.gitVisuals.addBranch(e)},this);if(e.originTree){var r=JSON.stringify(e.originTree);this.animationQueue=this.animationQueue||new h({callback:function(){}}),this.makeOrigin(r)}},E.prototype.makeOrigin=function(e){if(this.hasOrigin())throw new g({msg:l.str("git-error-origin-exists")});e=e||this.printTree(this.exportTreeForBranch("master"));var t=this.gitVisuals.getVisualization(),n=t.makeOrigin({localRepo:this,treeString:e});this.animationQueue.set("promiseBased",!0),n.customEvents.on("gitEngineReady",function(){this.origin=n.gitEngine,n.gitEngine.assignLocalRepo(this),this.origin.externalRefresh(),this.animationFactory.playRefreshAnimationAndFinish(this.gitVisuals,this.animationQueue)},this);var r=JSON.parse(unescape(e));u.each(r.branches,function(e,t){var n=e.target,r=this.makeBranch(w+t,this.getCommitFromRef(n));this.setLocalToTrackRemote(this.refs[e.id],r)},this)},E.prototype.setLocalToTrackRemote=function(e,t){t.addLocalBranchThatTracksThis(e),e.setRemoteTrackingBranchID(t.get("id"));var n='local branch "'+e.get("id")+'" set to track remote branch "'+t.get("id")+'"';this.command.addWarning(n)},E.prototype.getOrMakeRecursive=function(e,t,n){if(t[n])return t[n];var r=function(e,t){if(e.commits[t])return"commit";if(e.branches[t])return"branch";if(t=="HEAD")return"HEAD";throw new Error("bad type for "+t)},i=r(e,n);if(i=="HEAD"){var s=e.HEAD,o=new S(u.extend(e.HEAD,{target:this.getOrMakeRecursive(e,t,s.target)}));return t[n]=o,o}if(i=="branch"){var a=e.branches[n],f=new x(u.extend(e.branches[n],{target:this.getOrMakeRecursive(e,t,a.target)}));return t[n]=f,f}if(i=="commit"){var l=e.commits[n],c=[];u.each(l.parents,function(n){c.push(this.getOrMakeRecursive(e,t,n))},this);var h=new T(u.extend(l,{parents:c,gitVisuals:this.gitVisuals}));return t[n]=h,h}throw new Error("ruh rho!! unsupported type for "+n)},E.prototype.tearDown=function(){this.eventBaton.releaseBaton("processGitCommand",this.dispatch,this),this.removeAll()},E.prototype.reloadGraphics=function(){this.gitVisuals.rootCommit=this.refs.C0,this.gitVisuals.initHeadBranch(),this.gitVisuals.drawTreeFromReload(),this.gitVisuals.refreshTreeHarsh()},E.prototype.removeAll=function(){this.branchCollection.reset(),this.commitCollection.reset(),this.refs={},this.HEAD=null,this.rootCommit=null,this.origin&&(this.origin.gitVisuals.getVisualization().tearDown(),delete this.origin,this.gitVisuals.getVisualization().clearOrigin()),this.gitVisuals.resetAll()},E.prototype.getDetachedHead=function(){var e=this.HEAD.get("target"),t=e.get("type");return t!=="branch"},E.prototype.validateBranchName=function(e){e=e.replace(/\s/g,"");if(!/^[a-zA-Z0-9]+$/.test(e))throw new g({msg:l.str("bad-branch-name",{branch:e})});if(/[hH][eE][aA][dD]/.test(e))throw new g({msg:l.str("bad-branch-name",{branch:e})});return e.length>9&&(e=e.slice(0,9),this.command.addWarning(l.str("branch-name-short",{branch:e}))),e},E.prototype.validateAndMakeBranch=function(e,t){e=this.validateBranchName(e);if(this.refs[e])throw new g({msg:l.str("bad-branch-name",{branch:name})});this.makeBranch(e,t)},E.prototype.makeBranch=function(e,t){var n=new x({target:t,id:e});return this.branchCollection.add(n),this.refs[n.get("id")]=n,n},E.prototype.getHead=function(){return u.clone(this.HEAD)},E.prototype.getBranches=function(){var e=[];return this.branchCollection.each(function(t){e.push({id:t.get("id"),selected:this.HEAD.get("target")===t,target:t.get("target"),remote:t.getIsRemote(),obj:t})},this),e},E.prototype.getRemoteBranches=function(){var e=this.getBranches();return u.filter(e,function(e){return e.remote===!0})},E.prototype.getLocalBranches=function(){var e=this.getBranches();return u.filter(e,function(e){return e.remote===!1})},E.prototype.printBranchesWithout=function(e){var t=this.getUpstreamBranchSet(),n=this.getCommitFromRef(e).get("id"),r=[];u.each(t[n],function(e){e.selected=this.HEAD.get("target").get("id")==e.id,r.push(e)},this),this.printBranches(r)},E.prototype.printBranches=function(e){var t="";throw u.each(e,function(e){t+=(e.selected?"* ":"")+e.id+"\n"}),new y({msg:t})},E.prototype.getUniqueID=function(){var e=this.uniqueId("C"),t=u.bind(function(e){return this.refs[e]?!0:this.origin&&this.origin.refs[e]?!0:!1},this);while(t(e))e=this.uniqueId("C");return e},E.prototype.makeCommit=function(e,t,n){t||(t=this.getUniqueID());var r=new T(u.extend({parents:e,id:t,gitVisuals:this.gitVisuals},n||{}));return this.refs[r.get("id")]=r,this.commitCollection.add(r),r},E.prototype.revert=function(e){var t=u.map(e,function(e){return this.getCommitFromRef(e)},this),n=f.defer(),r=n.promise,i=this.resolveID("HEAD");r=this.animationFactory.highlightEachWithPromise(r,t,i);var s=this.getCommitFromRef("HEAD"),o=u.bind(function(e){var t=this.rebaseAltID(e.get("id")),n=l.str("git-revert-msg",{oldCommit:this.resolveName(e),oldMsg:e.get("commitMessage")}),r=this.makeCommit([s],t,{commitMessage:n});return s=r,this.animationFactory.playCommitBirthPromiseAnimation(r,this.gitVisuals)},this);u.each(t,function(e){r=r.then(function(){return o(e)})},this),r=r.then(u.bind(function(){return this.setTargetLocation("HEAD",s),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),this.animationQueue.thenFinish(r,n)},E.prototype.reset=function(e){this.setTargetLocation("HEAD",this.getCommitFromRef(e))},E.prototype.setupCherrypickChain=function(e){var t=f.defer(),n=t.promise,r=this.resolveID("HEAD");n=this.animationFactory.highlightEachWithPromise(n,e,r);var i=u.bind(function(e){var t=this.cherrypick(e);return this.animationFactory.playCommitBirthPromiseAnimation(t,this.gitVisuals)},this);u.each(e,function(e){n=n.then(function(){return i(e)})},this),this.animationQueue.thenFinish(n,t)},E.prototype.checkUpstreamOfSource=function(e,t,n,r,i){var s=t.getUpstreamSet(r),o=e.getCommitFromRef(n).get("id");if(!s[o])throw new g({msg:i||l.str("git-error-origin-fetch-no-ff")})},E.prototype.getTargetGraphDifference=function(e,t,n,r,i){i=i||{},r=t.resolveID(r);var s=e.getUpstreamSet(n),o=t.getCommitFromRef(r),a=t.exportTree(),f=a.commits[o.get("id")];if(e.refs[f.id]){if(i.dontThrowOnNoFetch)return[];throw new g({msg:l.str("git-error-origin-fetch-uptodate")})}f.depth=0;var c=[],h=[f],p=function(e){if(s[e])return;var t=a.commits[e];t.depth=d.depth+1,h.push(t)};while(h.length){var d=h.pop();c.push(d),u.each(d.parents,p)}var v={},m=[];return u.forEach(c,function(e){if(v[e.id])return;v[e.id]=!0,m.push(e)}),m.sort(function(e,t){return t.depth-e.depth})},E.prototype.push=function(e){e=e||{};var t=this.refs.master,n=this.origin.refs.master;this.checkUpstreamOfSource(this,this.origin,n,t,l.str("git-error-origin-push-no-ff"));var r=this.getTargetGraphDifference(this.origin,this,n,t);r=u.filter(r,function(e){return!this.origin.refs[e.id]},this);var i=u.bind(function(e,t){var n=u.map(t,function(e){return this.origin.refs[e]},this);return this.origin.makeCommit(n,e)},this),s=u.bind(function(e,t){var n=i(e,t);return this.animationFactory.playCommitBirthPromiseAnimation(n,this.origin.gitVisuals)},this),o=f.defer(),a=o.promise;u.each(r,function(e){a=a.then(u.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.refs[e.id],n)},this)),a=a.then(function(){return s(e.id,e.parents)})},this),a=a.then(u.bind(function(){var e=t.get("target").get("id"),r=this.origin.refs[e];return this.origin.setTargetLocation(n,r),this.animationFactory.playRefreshAnimation(this.gitVisuals),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals)},this)),a=a.then(u.bind(function(){var e=this.getCommitFromRef(t),n=t.getRemoteBranchID();return this.setTargetLocation(this.refs[n],e),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),e.dontResolvePromise||this.animationQueue.thenFinish(a,o)},E.prototype.fetch=function(e){e=e||{};var t=this.refs["o/master"],n=this.origin.refs.master,r=this.branchCollection.filter(function(e){return e.getIsRemote()});console.log(r),u.each(r,function(e){this.checkUpstreamOfSource(this,this.origin,e,e.getRemoteBranchFromEngine(this.origin))},this);var i=this.getTargetGraphDifference(this,this.origin,t,n,e);if(i.length===0){this.command.addWarning(l.str("git-error-origin-fetch-uptodate"));var s=f.defer();return{deferred:s,chain:s.promise}}var o=u.bind(function(e,t){var n=u.map(t,function(e){return this.refs[e]},this);return this.makeCommit(n,e)},this),a=u.bind(function(e,t){var n=o(e,t);return this.animationFactory.playCommitBirthPromiseAnimation(n,this.gitVisuals)},this),c=f.defer(),h=c.promise;return u.each(i,function(e){h=h.then(u.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.origin.refs[e.id],t)},this)),h=h.then(function(){return a(e.id,e.parents)})},this),h=h.then(u.bind(function(){var e=n.get("target").get("id"),r=this.refs[e];return this.setTargetLocation(t,r),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),e.dontResolvePromise||this.animationQueue.thenFinish(h,c),{chain:h,deferred:c}},E.prototype.pull=function(e){e=e||{};var t=this.refs.master,n=this.refs["o/master"],r=this.fetch({dontResolvePromise:!0,dontThrowOnNoFetch:!0});e.isRebase?this.pullFinishWithRebase(r,t,n):this.pullFinishWithMerge(r,t,n)},E.prototype.pullFinishWithRebase=function(e,t,n){var r=e.chain,i=e.deferred;r=r.then(u.bind(function(){return this.animationFactory.getDelayedPromise(300)},this)),r=r.then(u.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(n),t)},this)),r=r.then(u.bind(function(){return e.dontResolvePromise=!0,this.rebase(n,t,e)},this)),this.animationQueue.thenFinish(r,i)},E.prototype.pullFinishWithMerge=function(e,t,n){var r=e.chain,i=e.deferred;r=r.then(u.bind(function(){return this.animationFactory.getDelayedPromise(300)},this)),r=r.then(u.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(n),t)},this)),r=r.then(u.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(t),n)},this)),r=r.then(u.bind(function(){return this.animationFactory.getDelayedPromise(700)},this)),r=r.then(u.bind(function(){var e=this.merge("o/master");return e?this.animationFactory.playCommitBirthPromiseAnimation(e,this.gitVisuals):this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),this.animationQueue.thenFinish(r,i)},E.prototype.fakeTeamwork=function(e,t){var n=u.bind(function(){var e=this.getUniqueID();return this.origin.receiveTeamwork(e,t,this.animationQueue)},this),r=u.bind(function(){var e=n();return this.animationFactory.playCommitBirthPromiseAnimation(e,this.origin.gitVisuals)},this),i=f.defer(),s=i.promise;u.each(u.range(e),function(e){s=s.then(function(){return r()})}),this.animationQueue.thenFinish(s,i)},E.prototype.receiveTeamwork=function(e,t,n){this.checkout(this.resolveID(t));var r=this.makeCommit([this.getCommitFromRef("HEAD")],e);return this.setTargetLocation(this.HEAD,r),r},E.prototype.cherrypick=function(e){var t=this.rebaseAltID(e.get("id")),n=this.makeCommit([this.getCommitFromRef("HEAD")],t);return this.setTargetLocation(this.HEAD,n),n},E.prototype.commit=function(e){e=e||{};var t=this.getCommitFromRef(this.HEAD),n=null;e.isAmend&&(t=this.resolveID("HEAD~1"),n=this.rebaseAltID(this.getCommitFromRef("HEAD").get("id")));var r=this.makeCommit([t],n);return this.getDetachedHead()&&this.mode==="git"&&this.command.addWarning(l.str("git-warning-detached")),this.setTargetLocation(this.HEAD,r),r},E.prototype.resolveName=function(e){var t=this.resolveID(e);return t.get("type")=="commit"?"commit "+t.get("id"):t.get("type")=="branch"?'branch "'+t.get("id")+'"':this.resolveName(t.get("target"))},E.prototype.resolveID=function(e){if(e===null||e===undefined)throw new Error("Dont call this with null / undefined");return typeof e!="string"?e:this.resolveStringRef(e)},E.prototype.resolveRelativeRef=function(e,t){var n=/([~\^])(\d*)/g,r;while(r=n.exec(t)){var i=e,s=r[2]?parseInt(r[2],10):1;if(r[1]=="^")i=e.getParent(s-1);else while(i&&s--)i=i.getParent(0);if(!i){var o=l.str("git-error-relative-ref",{commit:e.id,match:r[0]});throw new g({msg:o})}e=i}return e},E.prototype.resolveStringRef=function(e){e=this.crappyUnescape(e);if(this.refs[e])return this.refs[e];var t=null,n=null,r=/^([a-zA-Z0-9]+)(([~\^]\d*)*)/,i=r.exec(e);if(!i)throw new g({msg:l.str("git-error-exist",{ref:e})});t=i[1],n=i[2];if(!this.refs[t])throw new g({msg:l.str("git-error-exist",{ref:e})});var s=this.getCommitFromRef(t);return n&&(s=this.resolveRelativeRef(s,n)),s},E.prototype.getCommitFromRef=function(e){var t=this.resolveID(e);while(t.get("type")!=="commit")t=t.get("target");return t},E.prototype.getType=function(e){return this.resolveID(e).get("type")},E.prototype.setTargetLocation=function(e,t){if(this.getType(e)=="commit")return;e=this.getOneBeforeCommit(e),e.set("target",t)},E.prototype.updateBranchesFromSet=function(e){if(!e)throw new Error("need commit set here");var t=this.getUpstreamBranchSet(),n={};u.each(e,function(e,r){u.each(t[r],function(e){n[e.id]=!0})},this);var r=u.map(n,function(e,t){return t});return this.updateBranchesForHg(r)},E.prototype.updateAllBranchesForHgAndPlay=function(e){return this.updateBranchesForHg(e)&&this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},E.prototype.updateAllBranchesForHg=function(){var e=this.branchCollection.map(function(e){return e.get("id")});return this.updateBranchesForHg(e)},E.prototype.updateBranchesForHg=function(e){var t=!1;return u.each(e,function(e){var n=this.getCommitFromRef(e).get("id"),r=this.getBumpedID(n);if(!this.refs[r])return;t=!0;var i;while(this.refs[r])i=r,r=this.rebaseAltID(r);this.setTargetLocation(this.refs[e],this.refs[i])},this),t?!0:!1},E.prototype.updateCommitParentsForHgRebase=function(e){var t=!1;return u.each(e,function(e,n){var r=this.refs[n],i=r.checkForUpdatedParent(this);t=t||i},this),t},E.prototype.pruneTreeAndPlay=function(){return this.pruneTree()&&this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},E.prototype.pruneTree=function(){var e=this.getUpstreamBranchSet(),t=this.getUpstreamSet("HEAD");u.each(t,function(t,n){e[n]=!0});var n=[];this.commitCollection.each(function(t){e[t.get("id")]||n.push(t)},this);if(!n.length)return;return this.command.addWarning(l.str("hg-prune-tree")),u.each(n,function(e){e.removeFromParents(),this.commitCollection.remove(e);var t=e.get("id");this.refs[t]=undefined,delete this.refs[t];var n=e.get("visNode");n&&n.removeAll()},this),!0},E.prototype.getUpstreamBranchSet=function(){var e={},t=function(e,t){var n=!1;return u.each(e,function(e){e.id==t&&(n=!0)}),n},n=function(e){var t=[],n=[e];while(n.length){var r=n.pop();t.push(r.get("id")),r.get("parents")&&r.get("parents").length&&(n=n.concat(r.get("parents")))}return t};return this.branchCollection.each(function(r){var i=n(r.get("target"));u.each(i,function(n){e[n]=e[n]||[],t(e[n],r.get("id"))||e[n].push({obj:r,id:r.get("id")})})}),e},E.prototype.getUpstreamHeadSet=function(){var e=this.getUpstreamSet("HEAD"),t=this.getCommitFromRef("HEAD").get("id");return e[t]=!0,e},E.prototype.getOneBeforeCommit=function(e){var t=this.resolveID(e);return t===this.HEAD&&!this.getDetachedHead()&&(t=t.get("target")),t},E.prototype.scrapeBaseID=function(e){var t=/^C(\d+)/.exec(e);if(!t)throw new Error("regex failed on "+e);return"C"+t[1]},E.prototype.rebaseAltID=function(e){var t=this.getBumpedID(e);while(this.refs[t])t=this.getBumpedID(t);return t},E.prototype.getMostRecentBumpedID=function(e){var t=e,n;while(this.refs[t])n=t,t=this.getBumpedID(t);return n},E.prototype.getBumpedID=function(e){var t=[[/^C(\d+)[']{0,2}$/,function(e){return e[0]+"'"}],[/^C(\d+)[']{3}$/,function(e){return e[0].slice(0,-3)+"'^4"}],[/^C(\d+)['][\^](\d+)$/,function(e){return"C"+String(e[1])+"'^"+String(Number(e[2])+1)}]];for(var n=0;n<t.length;n++){var r=t[n][0],i=t[n][1],s=r.exec(e);if(s)return i(s)}throw new Error("could not modify the id "+e)},E.prototype.idSortFunc=function(e,t){var n=1e3,r=[[/^C(\d+)$/,function(e){return n*e[1]}],[/^C(\d+)([']+)$/,function(e){return n*e[1]+e[2].length}],[/^C(\d+)['][\^](\d+)$/,function(e){return n*e[1]+Number(e[2])}]],i=function(e){for(var t=0;t<r.length;t++){var n=r[t][0],i=r[t][1],s=n.exec(e);if(s)return i(s)}throw new Error("Could not parse commit ID "+e)};return i(e.get("id"))-i(t.get("id"))},E.prototype.dateSortFunc=function(e,t){var n=new Date(e.get("createTime")),r=new Date(t.get("createTime"));return n-r===0?E.prototype.idSortFunc(e,t):n-r},E.prototype.hgRebase=function(e,t){var n=f.defer(),r=this.rebase(e,t,{dontResolvePromise:!0,deferred:n});if(!r)return;var i=this.getCommonAncestor(e,t),s=this.getCommitFromRef(t),o=this.getDownstreamSet(t),a=this.getUpstreamSet(e),l=this.getUpstreamDiffSetFromSet(a,t),c=[];u.each(l,function(e,t){c.push(this.getDownstreamSet(t))},this);var h={};h[s.get("id")]=!0,u.each([l,o].concat(c),function(e){u.each(e,function(e,t){h[t]=!0})});var p={},d=this.getUpstreamBranchSet();u.each(h,function(e,t){u.each(d[t],function(e){p[e.id]=!0})});var v=u.map(p,function(e,t){return t});r=r.then(u.bind(function(){var e=this.updateCommitParentsForHgRebase(h);if(!e)return;return this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},this)),r=r.then(u.bind(function(){return this.updateAllBranchesForHgAndPlay(v)},this)),r=r.then(u.bind(function(){return this.pruneTreeAndPlay()},this)),this.animationQueue.thenFinish(r,n)},E.prototype.rebase=function(e,t,n){if(this.isUpstreamOf(e,t)){this.command.setResult(l.str("git-result-uptodate")),this.checkout(t);return}if(this.isUpstreamOf(t,e)){this.setTargetLocation(t,this.getCommitFromRef(e)),this.command.setResult(l.str("git-result-fastforward")),this.checkout(t);return}var r=this.getUpstreamSet(e),i=this.getUpstreamDiffFromSet(r,t);return this.rebaseFinish(i,r,e,t,n)},E.prototype.getUpstreamDiffSetFromSet=function(e,t){var n={};return u.each(this.getUpstreamDiffFromSet(e,t),function(e){n[e.get("id")]=!0}),n},E.prototype.getUpstreamDiffFromSet=function(e,t){var n=[],r=[this.getCommitFromRef(t)];while(r.length){var i=r.pop();if(e[i.get("id")])continue;n.push(i),n.sort(this.dateSortFunc),r=r.concat(i.get("parents"))}return n},E.prototype.rebaseInteractive=function(t,n,r){r=r||{};if(this.isUpstreamOf(n,t))throw new g({msg:l.str("git-result-nothing")});var i=this.getUpstreamSet(t),s=[],o=[this.getCommitFromRef(n)];while(o.length){var a=o.pop();if(i[a.get("id")])continue;s.push(a),o=o.concat(a.get("parents")),o.sort(this.dateSortFunc)}var c=[];u.each(s,function(e){e.get("parents").length==1&&c.push(e)});if(!c.length)throw new g({msg:l.str("git-error-rebase-none")});this.animationQueue.set("defer",!0);var h=f.defer();h.promise.then(u.bind(function(e){if(!e.length)throw new y({msg:l.str("git-result-nothing")});this.rebaseFinish(e,{},t,n)},this)).fail(u.bind(function(e){this.filterError(e),this.command.set("error",e),this.animationQueue.start()},this)).done();var p=e("../views/rebaseView").InteractiveRebaseView;new p({deferred:h,toRebase:c,aboveAll:r.aboveAll})},E.prototype.filterRebaseCommits=function(e,t){var n={};u.each(t,function(e,t){n[this.scrapeBaseID(t)]=!0},this);var r={};return u.filter(e,function(e){if(e.get("parents").length!==1)return!1;var t=this.scrapeBaseID(e.get("id"));return n[t]?!1:r[e.get("id")]?!1:(r[e.get("id")]=!0,!0)},this)},E.prototype.rebaseFinish=function(e,t,n,r,i){i=i||{};var s=this.resolveID(n),o=i.deferred||f.defer(),a=i.chain||o.promise,c=this.filterRebaseCommits(e,t);if(!c.length)throw new g({msg:l.str("git-error-rebase-none")});a=this.animationFactory.highlightEachWithPromise(a,c,s);var h=this.getCommitFromRef(n),p=u.bind(function(e){var t=this.rebaseAltID(e.get("id")),n=this.makeCommit([h],t);return h=n,this.animationFactory.playCommitBirthPromiseAnimation(n,this.gitVisuals)},this);return u.each(c,function(e){a=a.then(function(){return p(e)})},this),a=a.then(u.bind(function(){return this.resolveID(r).get("type")=="commit"?this.checkout(h):(this.setTargetLocation(r,h),this.checkout(r)),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),i.dontResolvePromise||this.animationQueue.thenFinish(a,o),a},E.prototype.merge=function(e){var t="HEAD";if(this.isUpstreamOf(e,t)||this.getCommitFromRef(e)===this.getCommitFromRef(t))throw new y({msg:l.str("git-result-uptodate")});if(this.isUpstreamOf(t,e)){this.setTargetLocation(t,this.getCommitFromRef(e)),this.command.setResult(l.str("git-result-fastforward"));return}var n=this.getCommitFromRef(t),r=this.getCommitFromRef(e),i=l.str("git-merge-msg",{target:this.resolveName(e),current:this.resolveName(t)}),s=this.makeCommit([n,r],null,{commitMessage:i});return this.setTargetLocation(t,s),s},E.prototype.checkout=function(e){var t=this.resolveID(e);if(t.get("id")==="HEAD")return;var n=t.get("type");n==="branch"&&t.getIsRemote()&&(t=this.getCommitFromRef(t.get("id")));if(n!=="branch"&&n!=="commit")throw new g({msg:l.str("git-error-options")});this.HEAD.set("target",t)},E.prototype.forceBranch=function(e,t){e=this.crappyUnescape(e),this.refs[e]||this.branch(e,t);var n=this.resolveID(e);if(n.get("type")!=="branch")throw new g({msg:l.str("git-error-options")});if(n.getIsRemote())throw new g({msg:l.str("git-error-remote-branch")});var r=this.getCommitFromRef(t);this.setTargetLocation(n,r)},E.prototype.branch=function(e,t){var n=this.getCommitFromRef(t);this.validateAndMakeBranch(e,n)},E.prototype.deleteBranch=function(e){var t=this.resolveID(e);if(t.get("type")!=="branch"||t.get("id")=="master"||this.HEAD.get("target")===t)throw new g({msg:l.str("git-error-branch")});var n=t;if(t.getIsRemote())throw new g({msg:l.str("git-error-remote-branch")});this.branchCollection.remove(n),this.refs[n.get("id")]=undefined,delete this.refs[n.get("id")],n.get("visBranch")&&n.get("visBranch").remove()},E.prototype.crappyUnescape=function(e){return e.replace(/&#x27;/g,"'").replace(/&#x2F;/g,"/")},E.prototype.filterError=function(e){if(!(e instanceof g||e instanceof y))throw e},E.prototype.externalRefresh=function(){this.animationQueue=new h({callback:function(){}}),this.animationFactory.refreshTree(this.animationQueue,this.gitVisuals),this.animationQueue.start()},E.prototype.dispatch=function(e,t){this.command=e;var n=e.get("vcs"),r=u.bind(function(){this.dispatchProcess(e,t)},this);this.handleModeChange(n,r)},E.prototype.dispatchProcess=function(e,t){var n=u.bind(function(){e.finishWith(t)},this);this.animationQueue=new h({callback:n});var r=e.get("vcs"),i=e.get("method").replace(/-/g,"");try{m.commands.execute(r,i,this,this.command)}catch(s){this.filterError(s),e.set("error",s),t.resolve();return}var o=this.animationQueue.get("defer")||this.animationQueue.get("promiseBased");!this.animationQueue.get("animations").length&&!o&&this.animationFactory.refreshTree(this.animationQueue,this.gitVisuals),o||this.animationQueue.start()},E.prototype.show=function(e){var t=this.getCommitFromRef(e);throw new y({msg:t.getShowEntry()})},E.prototype.status=function(){var e=[];if(this.getDetachedHead())e.push(l.str("git-status-detached"));else{var t=this.HEAD.get("target").get("id");e.push(l.str("git-status-onbranch",{branch:t}))}e.push("Changes to be committed:"),e.push(""),e.push("&nbsp;&nbsp;&nbsp; modified: cal/OskiCostume.stl"),e.push(""),e.push(l.str("git-status-readytocommit"));var n="";throw u.each(e,function(e){n+="# "+e+"\n"}),new y({msg:n})},E.prototype.logWithout=function(e,t){t=t.slice(1),this.log(e,this.getUpstreamSet(t))},E.prototype.log=function(e,t){t=t||{};var n=this.getCommitFromRef(e),r=[],i=[n],s={};while(i.length){var o=i.shift(0);if(s[o.get("id")]||t[o.get("id")])continue;s[o.get("id")]=!0,r.push(o),o.get("parents")&&o.get("parents").length&&(i=i.concat(o.get("parents")))}var a="";throw u.each(r,function(e){a+=e.getLogEntry()},this),new y({msg:a})},E.prototype.getCommonAncestor=function(e,t){if(this.isUpstreamOf(t,e))throw new Error("Dont use common ancestor if we are upstream!");var n=this.getUpstreamSet(e),r=[this.getCommitFromRef(t)];while(r.length){var i=r.pop();if(n[i.get("id")])return i;r=r.concat(i.get("parents"))}throw new Error("something has gone very wrong... two nodes arent connected!")},E.prototype.isUpstreamOf=function(e,t){e=this.getCommitFromRef(e);var n=this.getUpstreamSet(t);return n[e.get("id")]!==undefined},E.prototype.getDownstreamSet=function(e){var t=this.getCommitFromRef(e),n=t.get("id"),r=[t],i={};i[n]=!0;var s=function(e){i[e.get("id")]=!0,r.push(e)};while(r.length){var o=r.pop(),a=o.get("children");u.each(a,s)}return i},E.prototype.getUpstreamSet=function(e){var t=this.getCommitFromRef(e),n=t.get("id"),r=[t],i={};i[n]=!0;var s=function(e){i[e.get("id")]=!0,r.push(e)};while(r.length){var o=r.pop(),a=o.get("parents");u.each(a,s)}return i};var S=a.Model.extend({initialize:function(){if(!this.get("target"))throw new Error("must be initialized with target");if(!this.get("id"))throw new Error("must be given an id");this.set("type","general ref"),this.get("id")=="HEAD"&&(this.set("lastLastTarget",null),this.set("lastTarget",this.get("target")),this.on("change:target",this.targetChanged,this))},getIsRemote:function(){return!1},getName:function(){return this.get("id")},targetChanged:function(e,t,n){this.set("lastLastTarget",this.get("lastTarget")),this.set("lastTarget",t)},toString:function(){return"a "+this.get("type")+"pointing to "+String(this.get("target"))}}),x=S.extend({defaults:{visBranch:null,remoteTrackingBranchID:null,localBranchesThatTrackThis:null,remote:!1},initialize:function(){S.prototype.initialize.call(this),this.set("type","branch")},setRemoteTrackingBranchID:function(e){this.set("remoteTrackingBranchID",e)},getRemoteTrackingBranchID:function(){return this.get("remoteTrackingBranchID")},addLocalBranchThatTracksThis:function(e){this.setLocalBranchesThatTrackThis(this.getLocalBranchesThatTrackThis().concat([e]))},setLocalBranchesThatTrackThis:function(e){this.set("localBranchesThatTrackThis",e)},getLocalBranchesThatTrackThis:function(){return this.get("localBranchesThatTrackThis")||[]},getRemoteBranchID:function(){if(this.getIsRemote())throw new Error("I am a remote branch! dont try to get remote from me");return w+this.get("id")},getRemoteBranchFromEngine:function(e){return e.refs[this.getRemoteBranchID()]},getIsRemote:function(){return this.get("id").slice(0,2)===w}}),T=a.Model.extend({defaults:{type:"commit",children:null,parents:null,author:"Peter Cottle",createTime:null,commitMessage:null,visNode:null,gitVisuals:null},constants:{circularFields:["gitVisuals","visNode","children"]},getLogEntry:function(){return["Author: "+this.get("author"),"Date: "+this.get("createTime"),"<br/>",this.get("commitMessage"),"<br/>","Commit: "+this.get("id")].join("\n")+"\n"},getShowEntry:function(){return[this.getLogEntry(),"diff --git a/bigGameResults.html b/bigGameResults.html","--- bigGameResults.html","+++ bigGameResults.html","@@ 13,27 @@ Winner, Score","- Stanfurd, 14-7","+ Cal, 21-14"].join("\n")+"\n"},validateAtInit:function(){if(!this.get("id"))throw new Error("Need ID!!");this.get("createTime")||this.set("createTime",(new Date).toString()),this.get("commitMessage")||this.set("commitMessage",l.str("git-dummy-msg")),this.set("children",[]);if(!this.get("rootCommit"))if(!this.get("parents")||!this.get("parents").length)throw new Error("needs parents")},addNodeToVisuals:function(){var e=this.get("gitVisuals").addNode(this.get("id"),this);this.set("visNode",e)},addEdgeToVisuals:function(e){this.get("gitVisuals").addEdge(this.get("id"),e.get("id"))},getParent:function(e){return this&&this.attributes&&this.attributes.parents?this.attributes.parents[e]:null},removeFromParents:function(){u.each(this.get("parents"),function(e){e.removeChild(this)},this)},checkForUpdatedParent:function(e){var t=this.get("parents");if(t.length>1)return;var n=t[0],r=n.get("id"),i=e.getMostRecentBumpedID(r);if(r===i)return;var s=e.refs[i];this.removeFromParents(),this.set("parents",[s]),s.get("children").push(this);var o=this.get("visNode");o&&o.removeAllEdges();var u=this.get("gitVisuals");return u&&u.addEdge(this.get("id"),i),!0},removeChild:function(e){var t=[];u.each(this.get("children"),function(n){n!==e&&t.push(n)},this),this.set("children",t)},isMainParent:function(e){var t=this.get("parents").indexOf(e);return t===0},initialize:function(e){this.validateAtInit(),this.addNodeToVisuals(),u.each(this.get("parents"),function(e){e.get("children").push(this),this.addEdgeToVisuals(e)},this)}});n.GitEngine=E,n.Commit=T,n.Branch=x,n.Ref=S}),e("/src/js/git/index.js"),e.define("/src/js/git/treeCompare.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a={};a.dispatchFromLevel=function(e,t){var n=e.goalTreeString;return a.dispatch(e,n,t)},a.onlyMasterCompared=function(e){var t=!0;switch(t){case!!e.compareOnlyMaster:case!!e.compareOnlyMasterHashAgnostic:case!!e.compareOnlyMasterHashAgnosticWithAsserts:return!0;default:return!1}},a.dispatch=function(e,t,n){var r=this.convertTreeSafe(t);n=this.convertTreeSafe(n);if(typeof r.originTree!=typeof n.originTree)return!1;var i=this.dispatchShallow(e,r,n);if(!i||!r.originTree)return i;var s=e.originCompare?e.originCompare:e;return i&&this.dispatchShallow(s,r.originTree,n.originTree)},a.dispatchShallow=function(e,t,n){var r=!0;switch(r){case!!e.compareOnlyMaster:return a.compareBranchWithinTrees(n,t,"master");case!!e.compareOnlyBranches:return a.compareAllBranchesWithinTrees(n,t);case!!e.compareAllBranchesHashAgnostic:return a.compareAllBranchesWithinTreesHashAgnostic(n,t);case!!e.compareOnlyMasterHashAgnostic:return a.compareBranchesWithinTreesHashAgnostic(n,t,["master"]);case!!e.compareOnlyMasterHashAgnosticWithAsserts:return a.compareBranchesWithinTreesHashAgnostic(n,t,["master"])&&a.evalAsserts(n,e.goalAsserts);default:return a.compareAllBranchesWithinTreesAndHEAD(n,t)}},a.compareAllBranchesWithinTreesAndHEAD=function(e,t){return e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),e.HEAD.target==t.HEAD.target&&this.compareAllBranchesWithinTrees(e,t)},a.compareAllBranchesWithinTrees=function(e,t){e=this.convertTreeSafe(e),t=this.convertTreeSafe(t);var n=u.extend({},e.branches,t.branches),r=!0;return u.uniq(n,function(n,i){r=r&&this.compareBranchWithinTrees(e,t,i)},this),r},a.compareBranchesWithinTrees=function(e,t,n){var r=!0;return u.each(n,function(n){r=r&&this.compareBranchWithinTrees(e,t,n)},this),r},a.compareBranchWithinTrees=function(e,t,n){e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]);var r=this.getRecurseCompare(e,t),i=e.branches[n],s=t.branches[n];return u.isEqual(i,s)&&r(e.commits[i.target],t.commits[s.target])},a.compareAllBranchesWithinTreesHashAgnostic=function(e,t){e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]);var n=u.extend({},e.branches,t.branches),r=[];return u.each(n,function(e,t){r.push(t)}),this.compareBranchesWithinTreesHashAgnostic(e,t,r)},a.compareBranchesWithinTreesHashAgnostic=function(e,t,n){e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]);var r=u.bind(function(e,t){return!e||!t?!1:(e=u.clone(e),t=u.clone(t),e.target=this.getBaseRef(e.target),t.target=this.getBaseRef(t.target),u.isEqual(e,t))},this),i=this.getRecurseCompareHashAgnostic(e,t),s=!0;return u.each(n,function(n){var o=e.branches[n],u=t.branches[n];s=s&&r(o,u)&&i(e.commits[o.target],t.commits[u.target])},this),s},a.evalAsserts=function(e,t){var n=!0;return u.each(t,function(t,r){n=n&&this.evalAssertsOnBranch(e,r,t)},this),n},a.evalAssertsOnBranch=function(e,t,n){e=this.convertTreeSafe(e);if(!e.branches[t])return!1;var r=e.branches[t],i=[r.target],s={};while(i.length){var o=i.pop();s[this.getBaseRef(o)]=this.getNumHashes(o),i=i.concat(e.commits[o].parents)}var a=!0;return u.each(n,function(e){try{a=a&&e(s)}catch(t){console.warn("error during assert",t),console.log(t),a=!1}}),a},a.getNumHashes=function(e){var t=[[/^C(\d+)([']{0,3})$/,function(e){return e[2]?e[2].length:0}],[/^C(\d+)['][\^](\d+)$/,function(e){return Number(e[2])}]];for(var n=0;n<t.length;n++){var r=t[n][0],i=t[n][1],s=r.exec(e);if(s)return i(s)}throw new Error("coudlnt parse ref "+e)},a.getBaseRef=function(e){var t=/^C(\d+)/,n=t.exec(e);if(!n)throw new Error("no regex matchy for "+e);return"C"+n[1]},a.getRecurseCompareHashAgnostic=function(e,t){var n=u.bind(function(e){return e?u.extend({},e,{id:this.getBaseRef(e.id),parents:null}):{}},this),r=function(e,t){return u.isEqual(n(e),n(t))};return this.getRecurseCompare(e,t,{isEqual:r})},a.getRecurseCompare=function(e,t,n){n=n||{};var r=function(i,s){var o=n.isEqual?n.isEqual(i,s):u.isEqual(i,s);if(!o)return!1;var a=Math.max(i.parents.length,s.parents.length);return u.each(u.range(a),function(n){var u=i.parents[n],a=s.parents[n],f=e.commits[u],l=t.commits[a];o=o&&r(f,l)},this),o};return r},a.convertTreeSafe=function(e){return typeof e=="string"?JSON.parse(unescape(e)):e},a.reduceTreeFields=function(e){var t=["parents","id","rootCommit"],n=["children","parents"],r=["target","id"],i=function(e,t,n,r){var i=e[t];u.each(i,function(i,s){var o={};u.each(n,function(e){i[e]!==undefined&&(o[e]=i[e])}),u.each(r,function(e){i[e]&&(i[e].sort(),o[e]=i[e])}),e[t][s]=o})};u.each(e,function(e){i(e,"commits",t,n),i(e,"branches",r),e.HEAD={target:e.HEAD.target,id:e.HEAD.id}})},a.compareTrees=function(e,t){return e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]),u.isEqual(e,t)},n.TreeCompare=a}),e("/src/js/git/treeCompare.js"),e.define("/src/js/intl/checkStrings.js",function(e,t,n,r,i,s,o){var u=e("sys"),a=e("underscore"),f=e("child_process"),l=e("../intl/strings").strings,c='grep -C 2 -r "intl.str(" ../../',h=function(e){return'grep -r "'+e+'" ../../'},p=/intl.str\('([a-zA-Z\-]+)'/g,d=/\s+'([a-z\-]+)',/g,v=function(e){f.exec(h(e),function(e,t){console.log(t)})},m=function(e){l[e]||(console.log('NO KEY for: "',e,'"'),v(e))},g=function(e){a.each(e,function(e){var t=p.exec(e);if(t&&t[1]){m(t[1]);return}t=d.exec(e),t&&t[1]&&m(t[1])})};f.exec(c,function(e,t){g(t.split("\n"))})}),e("/src/js/intl/checkStrings.js"),e.define("/src/js/intl/index.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../util/constants"),f=e("../util"),l=e("../intl/strings").strings,c=n.getDefaultLocale=function(){return"zh_CN"},h=n.getLocale=function(){return a.GLOBAL.locale?a.GLOBAL.locale:c()},p=u.clone(u.templateSettings);p.interpolate=/\{(.+?)\}/g;var d=n.template=function(e,t){return u.template(e,t,p)},v=n.str=function(e,t){t=t||{};var n=h();return l[e]?l[e][n]?d(l[e][n],t):e!=="error-untranslated"?v("error-untranslated"):'No translation for the key "'+e+'"':(console.warn("NO INTL support for key "+e),"NO INTL support for key "+e)},m=n.getIntlKey=function(e,t){if(!e||!e[t])throw new Error("that key "+t+"doesnt exist in this blob"+e);return e[t][c()]||console.warn("WARNING!! This blob does not have intl support:",e,"for this key",t),e[t][h()]},g=n.getDialog=function(e){var t=c();return m(e,"dialog")||e.dialog[t]},y=n.getHint=function(e){return m(e,"hint")||v("error-untranslated")},b=n.getName=function(e){return m(e,"name")||v("error-untranslated")},w=n.getStartDialog=function(e){var t=m(e,"startDialog");if(t)return t;var n={type:"ModalAlert",options:{markdown:v("error-untranslated")}},r=u.clone(e.startDialog[c()]||e.startDialog);return r.childViews.unshift(n),r}}),e("/src/js/intl/index.js"),e.define("/src/js/intl/strings.js",function(e,t,n,r,i,s,o){n.strings={"finish-dialog-finished":{__desc__:"One of the lines in the next level dialog",ja:"最後のレベルをクリアしました！すごい！！",en_US:"Wow! You finished the last level, great!",zh_CN:"我的天呀！你完成了最后一关，太帅了！",fr_FR:"Félicitations, vous avez réussi le dernier niveau !"},"finish-dialog-next":{__desc__:"One of the lines in the next level dialog",en_US:'Would you like to move on to *"{nextLevel}"*, the next level?',ja:'次の章 *"{nextLevel}"* へ進みますか？',zh_CN:'要不前进到下一关 *"{nextLevel}"* ？',fr_FR:'Voulez-vous passer à *"{nextLevel}"*, le prochain niveau ?'},"finish-dialog-win":{__desc__:"One of the lines in the next level dialog",en_US:"Awesome! You matched or exceeded our solution.",ja:"素晴らしい！このレベルをクリアしましたね。",zh_CN:"我的天呀！你竞然答对了！",fr_FR:"Fabuleux ! Votre solution a égalé ou surpassé notre solution."},"finish-dialog-lose":{__desc__:"When the user entered more commands than our best, encourage them to do better",en_US:"See if you can whittle it down to {best} :D",ja:"模範解答の回数={best}回でクリアする方法も考えてみましょう :D",zh_CN:"试试看你能否在 {best} 之内搞定 :D",fr_FR:"Voyons si vous pouvez descendre à {best} :D"},"hg-prune-tree":{__desc__:"warning when pruning tree",en_US:"Warning! Mercurial does aggressive garbage collection and thus needs to prune your tree"},"hg-a-option":{__desc__:"warning for when using -A option",en_US:"The -A option is not needed for this app, just commit away!"},"hg-error-no-status":{__desc__:"One of the errors for hg",en_US:"There is no status command for this app, since there is no staging of files. Try hg summary instead"},"hg-error-need-option":{__desc__:"One of the errors for hg",en_US:"I need the option {option} for that command!"},"hg-error-log-no-follow":{__desc__:"hg log without -f (--follow)",en_US:"hg log without -f is currently not supported, use -f"},"git-status-detached":{__desc__:"One of the lines for git status output",en_US:"Detached head!",zh_CN:"脑袋搬家（Detached head）了！",fr_FR:"head détaché !"},"git-status-onbranch":{__desc__:"One of the lines for git status output",en_US:"On branch {branch}",zh_CN:"切换到分支 {branch}",fr_FR:"Sur la branche {branch}"},"git-status-readytocommit":{__desc__:"One of the lines for git status output",en_US:"Ready to commit! (as always in this demo)",zh_CN:"可以提交啦！（这演示里一直可以提交）",fr_FR:"Prêt à commit ! (comme toujours dans cette démo)"},"git-dummy-msg":{__desc__:"The dummy commit message for all commits. Feel free to put in a shoutout to your school / city / whatever!",en_US:"Quick commit. Go Bears!",zh_CN:"快速提交。上啊！",fr_FR:"Commit rapide. NoMaN Sux!"},"git-error-origin-fetch-uptodate":{__desc__:"One of the error messages for git",en_US:"Already up to date!",fr_FR:"Déjà à jour"},"git-error-origin-fetch-no-ff":{__desc__:"One of the error messages for git",en_US:"Your origin branch is out of sync with the remote branch and fetch cannot be performed. try using --force",fr_FR:"Votre branche origin n'est plus synchronisée avec la branche distante et fetch ne peut pas être appliqué. Essayez avec l'option --force"},"git-error-origin-push-no-ff":{__desc__:"One of the error messages for git",en_US:"The remote repository has diverged from your local repository, so uploading your changes is not a simple fast forward (and thus your push was rejected). Please pull down the new changes in the remote repository, incorporate them into this branch, and try again. You can do so with git pull or git pull --rebase",fr_FR:"Le dépôt distant a divergé de votre référentiel local, donc l'envoi de vos modifications n'est pas en simple avance rapide (et donc votre envoi a été rejeté). Veuillez récupérer les nouveaux changements depuis le dépôt distant, les intégrer dans cette branche, et essayez à nouveau. Vous pouvez le faire avec git pull ou git pull --rebase"},"git-error-remote-branch":{__desc__:"One of the error messages for git",en_US:"You cannot execute that command on a remote branch",fr_FR:"Vous ne pouvez exécuter cette commande sur une branche distante"},"git-error-origin-required":{__desc__:"One of the error messages for git",en_US:"An origin is required for that command",fr_FR:"Une origine est requise pour cette commande"},"git-error-origin-exists":{__desc__:"One of the error messages for git",en_US:"An origin already exists! You cannot make a new one",fr_FR:"Une origine existe déjà ! Vous ne pouvez pas en créer une nouvelle"},"git-error-branch":{__desc__:"One of the error messages for git",en_US:"You can't delete the master branch, the branch you are on, or things that aren't branches",zh_CN:"你不能删除主分支（master），或者你当前所在的分支，或者其他不是分支也不知道能不能吃的东西。",fr_FR:"Vous ne pouvez supprimer la branche master, la branche sur laquelle vous êtes, ou ce qui n'est pas une branche"},"git-merge-msg":{__desc__:"The commit message for a merge commit",en_US:"Merge {target} into {current}",zh_CN:"合并 {target} 到 {current}",fr_FR:"Merge de {target} dans {current}"},"git-error-rebase-none":{__desc__:"One of the error messages for git",en_US:"No commits to rebase! Everything is a merge commit or changes already applied",zh_CN:"没有需要 rebase 的提交！都是个合并提交，或者已经 rebase 过了。",fr_FR:"Aucune commit à rebaser ! Tout est soit un commit de merge, soit des modifications déjà appliquées"},"git-result-nothing":{__desc__:"The message that explains the result of a git command",en_US:"Nothing to do...",zh_CN:"没啥鸟事了……",fr_FR:"Rien à effectuer…"},"git-result-fastforward":{__desc__:"The message that explains the result of a git command",en_US:"Fast forwarding...",zh_CN:"快速前进……",fr_FR:"En avance rapide…"},"git-result-uptodate":{__desc__:"The message that explains the result of a git command",en_US:"Branch already up-to-date",zh_CN:"分支已经是最新啦",fr_FR:"Branche déjà à jour"},"git-error-exist":{__desc__:"One of the error messages for git",en_US:"The ref {ref} does not exist or is unknown",zh_CN:"索引 {ref} 不存在，或者找不到。",fr_FR:"La référence {ref} n'existe pas ou est inconnue"},"git-error-relative-ref":{__desc__:"One of the error messages for git",en_US:"Commit {commit} doesnot have a {match}",zh_CN:"提交 {commit} 并没有 {match}",fr_FR:"Le commit {commit} n'a pas de correspondance {match}"},"git-warning-detached":{__desc__:"One of the warning messages for git",en_US:"Warning!! Detached HEAD state",zh_CN:"警告！脑袋搬家（Detached HEAD）状态",fr_FR:"Attention ! HEAD est détaché"},"git-warning-add":{__desc__:"One of the warning messages for git",en_US:"No need to add files in this demo",zh_CN:"此演示中不需要添加文件",fr_FR:"Aucun besoin d'ajouter des fichiers dans cette démo"},"git-error-options":{__desc__:"One of the error messages for git",en_US:"Those options you specified are incompatible or incorrect",zh_CN:"你所指定的参数不兼容或者不准确",fr_FR:"Les options que vous avez spécifiées sont incompatibles ou incorrectes"},"git-error-already-exists":{__desc__:"One of the error messages for git",en_US:"The commit {commit} already exists in your changes set, aborting!",zh_CN:"提交 {commit} 已经存在于你的改动集里，正在中止！",fr_FR:"Le commit {commit} existe déjà dans votre ensemble de modifications, opération avortée !"},"git-error-reset-detached":{__desc__:"One of the error messages for git",en_US:"Can't reset in detached head! Use checkout if you want to move",zh_CN:"不能在分离的 HEAD 里重置！用 checkout 吧",fr_FR:"On ne peut pas effectuer un reset quand head est détaché. Utilisez checkout pour déplacer"},"git-warning-hard":{__desc__:"One of the warning messages for git",en_US:"The default behavior is a --hard reset, feel free to omit that option!",zh_CN:"默认的行为是 --hard 硬重置，尽管省略掉那个选项吧！",fr_FR:"Le comportement par défaut est un --hard reset, soyez libre d'omettre cette option !"},"git-error-staging":{__desc__:"One of the error messages for git",en_US:"There is no concept of adding / staging files, so that option or command is invalid!",zh_CN:"没有添加、缓存文件的必要，所以改选项或者命令是不合法的。",fr_FR:"Il n'y a pas le concept d'ajouter / mettre en staging, donc cette option ou commande est invalide"},"git-revert-msg":{__desc__:"Message for reverting git command",en_US:"Reverting {oldCommit}: {oldMsg}",zh_CN:"撤销 {oldCommit}：{oldMsg}",fr_FR:"Revert {oldCommit}: {oldMsg}"},"git-error-args-many":{__desc__:"One of the error messages for git",en_US:"I expect at most {upper} argument(s) for {what}",zh_CN:"{what} 期望最多 {upper} 个参数",fr_FR:"J'attends au plus {upper} argument(s) pour {what}"},"git-error-args-few":{__desc__:"One of the error messages for git",en_US:"I expect at least {lower} argument(s) for {what}",zh_CN:"{what} 期望最少 {lower} 个参数",fr_FR:"J'attends au moins {upper} argument(s) pour {what}"},"git-error-no-general-args":{__desc__:"One of the error messages for git",en_US:"That command accepts no general arguments",zh_CN:"该命令不接收参数",fr_FR:"Cette commande n'accepte aucun argument général"},"copy-tree-string":{__desc__:"The prompt to copy the tree when sharing",en_US:"Copy the tree string below",zh_CN:"拷贝下面的树字符串",fr_FR:"Copiez la chaîne d'arbre ci-dessous"},"learn-git-branching":{__desc__:"The title of the app, with spaces",en_US:"Learn Git Branching",ja:"日本語版リポジトリ",ko:"Git 브랜치 배우기",zh_CN:"Git Branch课程分享 - 同程",fr_FR:"Apprenez Git Branching"},"select-a-level":{__desc__:"The prompt to select a level on the drop down view",en_US:"Select a level",zh_CN:"选择一关",fr_FR:"Choisissez un niveau"},"branch-name-short":{__desc__:"When branch names get too long, we need to truncate them. This is the warning for that",en_US:'Sorry, we need to keep branch names short for the visuals. Your branch name was truncated to 9 characters, resulting in "{branch}"',zh_CN:'抱歉，为了显示的需要，我们需要一个短些的分支名称。您使用的将被截断到9个字符，即"{branch}"',fr_FR:'Désolé, nous devons garder les noms de branches courts pour la visualisation. Votre nom de branche a été tronqué à 9 caractères, devenant "{branch}"'},"bad-branch-name":{__desc__:"When the user enters a branch name thats not ok",en_US:'That branch name "{branch}" is not allowed!',zh_CN:'不能给分支起这个名字 "{branch}"',fr_FR:'Ce nom de branche "{branch}" n\'est pas autorisé'},"option-not-supported":{__desc__:"When the user specifies an option that is not supported by our demo",en_US:'The option "{option}" is not supported!',zh_CN:'不支持选项 "{option}"',fr_FR:"L'option \"{option}\" n'est pas supportée"},"git-usage-command":{__desc__:"The line that shows how to format a git command",en_US:"git <command> [<args>]",zh_CN:"git <命令> [<参数>]",fr_FR:"git <commande> [<arguments>]"},"git-supported-commands":{__desc__:"In the git help command, the header above the supported commands",en_US:"Supported commands:",zh_CN:"支持的命令有:",fr_FR:"Commandes supportées"},"git-usage":{__desc__:"In the dummy git output, the header before showing all the commands",en_US:"Usage:",zh_CN:"使用:",fr_FR:"Utilisation :"},"git-version":{__desc__:"The git version dummy output, kind of silly. PCOTTLE is my unix name but feel free to put yours instead",en_US:"Git Version PCOTTLE.1.0",zh_CN:"Git 版本 PCOTTLE.1.0",fr_FR:"Git version PCOTTLE.1.0"},"refresh-tree-command":{__desc__:"when the tree is visually refreshed",en_US:"Refreshing tree...",zh_CN:"正在刷新树结构...",fr_FR:"Actualisation de l'arbre…"},"locale-command":{__desc__:"when the locale is set to something",en_US:"Locale set to {locale}",zh_CN:"语言更改为 {locale}",fr_FR:"Langue changée à {locale}"},"locale-reset-command":{__desc__:"when the locale is reset",en_US:"Locale reset to default, which is {locale}",zh_CN:"语言重置为默认的 {locale}",fr_FR:"Langue remise par défaut, qui est {locale}"},"show-command":{__desc__:'command output title from "show"',en_US:"Please use one of the following commands for more info:",fr_FR:"Merci d'utiliser une des commandes suivantes pour obtenir plus d'info"},"show-all-commands":{__desc__:'command output title from "show commands"',en_US:"Here is a list of all the commmands available:",fr_FR:"Ci-dessous est la liste de toutes les commandes disponibles :"},"cd-command":{__desc__:"dummy command output for the command in the key",en_US:'Directory changed to "/directories/dont/matter/in/this/demo"',zh_CN:'目录切换到 "/directories/dont/matter/in/this/demo"',fr_FR:'Répertoire changé à "/directories/dont/matter/in/this/demo" (les répertoires ne servent à rien dans cette démo)'},"ls-command":{__desc__:"Dummy command output for the command in the key",en_US:"DontWorryAboutFilesInThisDemo.txt",zh_CN:"DontWorryAboutFilesInThisDemo.txt (译: 在试验里不用担心文件.txt)",fr_FR:"DontWorryAboutFilesInThisDemo.txt (ne vous préoccupez pas des noms de fichier dans cette démo)"},"mobile-alert":{__desc__:"When someone comes to the site on a mobile device, they can not input commands so this is a nasty alert to tell them",en_US:"Can't bring up the keyboard on mobile / tablet :( try visiting on desktop! :D",zh_CN:"无法在移动设备/平板上调出键盘 :( 请试试桌面版 :D",fr_FR:"Impossible de faire apparaître le clavier sur mobile / tablette :( Essayez de passer sur un ordinateur de bureau :D"},"share-tree":{__desc__:"When you export a tree, we want you to share the tree with friends",en_US:'Share this tree with friends! They can load it with "import tree"',zh_CN:'与你的好友分享提交树！他们可以用 "import tree" 加载它',fr_FR:'Partagez cet arbre avec vos amis ! Ils peuvent le charger avec "import tree"'},"paste-json":{__desc__:"When you are importing a level or tree",en_US:"Paste a JSON blob below!",zh_CN:"在下边粘贴一个JSON串",fr_FR:"Collez un blob JSON ci-dessous !"},"solved-map-reset":{__desc__:"When you reset the solved map to clear your solved history, in case someone else wants to use your browser",en_US:"Solved map was reset, you are starting from a clean slate!",zh_CN:"解决列表已重置，您现在从零开始了",fr_FR:"La carte des niveaux résolus a été effacée, vous repartez de zéro !"},"level-cant-exit":{__desc__:"When the user tries to exit a level when they are not in one",en_US:'You are not in a level! You are in a sandbox, start a level with "levels"',zh_CN:'您没在关卡中！您在沙盒中，要开始关卡请输入 "levels"',fr_FR:'Vous n\'êtes pas dans un niveau ! Vous êtes dans le mode bac à sable, commencez un niveau avec "levels"'},"level-no-id":{__desc__:"When you say an id but that level doesnt exist",en_US:'A level for that id "{id}" was not found! Opening up a level selection view',zh_CN:'没找到id为 "{id}" 的关卡！打开关卡选择框',fr_FR:"Le niveau dont l'identifiant est {id} n'a pas été trouvé ! Ouverture de la vue de sélection des niveaux"},"undo-stack-empty":{__desc__:"The undo command can only undo back until the last time the level was reset or the beginning of the level",en_US:"The undo stack is empty!",zh_CN:"还没有什么可以撤销",fr_FR:"La pile d'annulation est vide !"},"already-solved":{__desc__:"When you play in a level that is already solved",en_US:'You have already solved this level, try other levels with "levels" or go back to sandbox with "sandbox"',zh_CN:'你已经解决了本关，输入 "levels" 尝试其他关卡，或者输入 "sandbox" 回到沙盒中',fr_FR:'Vous avez déjà résolu ce niveau, essayez d\'autres niveaux avec "levels" ou revenez au bac à sable avec "sandbox"'},"command-disabled":{__desc__:"When you try a command that is disabled",en_US:"That git command is disabled for this level!",zh_CN:"该命令在本关不允许使用！",fr_FR:"Cette commande git est désactivée pour ce niveau !"},"share-json":{__desc__:"when you have made the level, prompt to share this",en_US:"Here is the JSON for this level! Share it with somenoe or send it to me on Github",zh_CN:"这是一个关卡定义JSON！您可以分享它或者发到我的GitHub上",fr_FR:"Voici le JSON pour ce niveau ! Partagez-le avec quelqu'un ou envoyez-le moi sur Github"},"want-start-dialog":{__desc__:"prompt to add a start dialog",en_US:"You have not specified a start dialog, would you like to add one?",zh_CN:"您还没有定义一开始的介绍，是否添加一个？",fr_FR:"Vous n'avez pas spécifié de dialogue de départ, voulez-vous en ajouter un ?"},"want-hint":{__desc__:"prompt to add a hint",en_US:"You have not specified a hint, would you like to add one?",zh_CN:"您还没有定义提示，是否添加一个？",fr_FR:"Vous n'avez pas spécifié d'indice, voulez-vous en ajouter un ?"},"prompt-hint":{__desc__:"prompt for hint",en_US:"Enter the hint for this level, or leave this blank if you do not want to include one",zh_CN:"请输入关卡提示，或者故意留空",fr_FR:"Entrez l'indice pour ce niveau, ou laissez-le vide pour ne pas l'inclure"},"prompt-name":{__desc__:"prompt for level name",en_US:"Enter the name for the level",zh_CN:"输入关卡名",fr_FR:"Entrez le nom pour ce niveau"},"solution-empty":{__desc__:"If you define a solution without any commands, aka a level that is solved without doing anything",en_US:"Your solution is empty!! Something is amiss",zh_CN:"你的解法是空的!! 这应该是出错了",fr_FR:"Votre solution est vide !! Quelque chose ne tourne pas rond"},"define-start-warning":{__desc__:"When you define the start point again, it overwrites the solution and goal so we add a warning",en_US:"Defining start point... solution and goal will be overwritten if they were defined earlier",zh_CN:"定义开始点... 解决方法和目标会被新的替代",fr_FR:"Redéfinition du point de départ… la solution et la cible seront écrasés s'ils ont déjà été définis"},"help-vague-level":{__desc__:"When you are in a level and you say help, its vague and you need to specify",en_US:'You are in a level, so multiple forms of help are available. Please select either "help level" to learn more about this lesson, "help general" for using Learn GitBranching, or "objective" to learn about how to solve the level.',zh_CN:'您正在关卡中，这里有多种形式的帮助，请选择 "help level" (关卡帮助)或 "help general" (一般帮助)',fr_FR:'Vous êtes dans un niveau, donc plusieurs formes d\'aide sont disponibles. Merci de sélectionner soit "help level" pour en apprendre plus sur cette leçon, "help general" pour l\'utilisation de Learn GitBranching, ou "objective" pour apprendre comment résoudre le niveau'},"help-vague-builder":{__desc__:"When you are in a level builder, the help command is vague so you need to specify what you mean",en_US:'You are in a level builder, so multiple forms of help are available. Please select either "help general" or "help builder"',zh_CN:'您正在进行关卡构建中，这里有多种形式的帮助，请选择 "help general" (一般帮助)或 "help builder" (关卡构建帮助)',fr_FR:'Vous êtes dans l\'éditeur de niveaux, donc plusieurs formes d\'aide sont disponibles. Merci de sélectionner soit "help general" soit "help builder"'},"goal-to-reach":{__desc__:"title of window that shoes the goal tree to reach",en_US:"Goal To Reach",zh_CN:"目标",fr_FR:"Cible à atteindre"},"goal-only-master":{__desc__:"the helper message for the window that shows the goal tree when the goal will only be compared using the master branch",en_US:'<span class="fwber">Note:</span> Only the master branch will be checked in this level. The other branches are simply for reference (shown as dashed labels below). As always, you can hide this dialog with "hide goal"',zh_CN:'<span class="fwber">注意:</span> 本关卡，在master分支上操作的. 其他分支只是作为简单引用。 如果想关闭目标面板，输入"hide goal"'},"hide-goal":{__desc__:"the helper message for the window that shows the goal tree",en_US:'You can hide this window with "hide goal"',zh_CN:'你可以通过命令 "hide goal" 关闭这个窗口',fr_FR:'Vous pouvez masquer cette fenêtre avec "hide goal"'},"hide-start":{__desc__:"The helper message for the window that shows the start tree for a level",en_US:'You can hide this window with "hide start"',zh_CN:'你可以通过命令 "hide start" 关闭这个窗口',fr_FR:'Vous pouvez masquer cette fenêtre avec "hide start"'},"level-builder":{__desc__:"The name for the environment where you build levels",en_US:"Level Builder",zh_CN:"关卡生成器",fr_FR:"Éditeur de niveaux"},"no-start-dialog":{__desc__:"when the user tries to open a start dialog for a level that does not have one",en_US:"There is no start dialog to show for this level!",zh_CN:"介绍? 这关真没有!",fr_FR:"Il n'y a aucun dialogue de départ à afficher pour ce niveau !"},"no-hint":{__desc__:"when no hint is available for a level",en_US:"Hmm, there doesn't seem to be a hint for this level :-/",zh_CN:"提示？嗯，这关真没有哎~ :-/",fr_FR:"Hum, il ne semble pas y avoir d'indice pour ce niveau :-/"},"error-untranslated-key":{__desc__:"This error happens when we are trying to translate a specific key and the locale version is mission",en_US:"The translation for {key} does not exist yet :( Please hop on github and offer up a translation!",zh_CN:"还没翻译 {key} :( 请在gitHub上贡献你的翻译!",fr_FR:"La traduction pour {key} n'existe pas encore :( Venez sur Github pour en offrir une !"},"error-untranslated":{__desc__:"The general error when we encounter a dialog that is not translated",en_US:"This dialog or text is not yet translated in your locale :( Hop on github to aid in translation!",zh_CN:"这段对话还没有被翻译成你的语言 :( 欢迎在gitHub上贡献你的翻译!",fr_FR:"Ce message n'a pas encore été traduit dans votre langue :( Venez sur Github aider à la traduction !"}}}),e("/src/js/intl/strings.js"),e.define("/src/js/level/arbiter.js",function(e,t,n,r,i,s,o){function h(){this.levelMap={},this.levelSequences=f,this.sequences=[],this.init();var e;try{e=JSON.parse(localStorage.getItem("solvedMap")||"{}")}catch(t){console.warn("local storage failed",t)}this.solvedMap=e||{},c.getEvents().on("levelSolved",this.levelSolved,this)}var u=e("underscore"),a=e("backbone"),f=e("../../levels").levelSequences,l=e("../../levels").sequenceInfo,c=e("../app");h.prototype.init=function(){var e;u.each(this.levelSequences,function(e,t){this.sequences.push(t);if(!e||!e.length)throw new Error("no empty sequences allowed");u.each(e,function(e,n){this.validateLevel(e);var r=t+String(n+1),i=u.extend({},e,{index:n,id:r,sequenceName:t});this.levelMap[r]=i,this.levelSequences[t][n]=i},this)},this)},h.prototype.isLevelSolved=function(e){if(!this.levelMap[e])throw new Error("that level doesnt exist!");return Boolean(this.solvedMap[e])},h.prototype.levelSolved=function(e){if(!e)return;this.solvedMap[e]=!0,this.syncToStorage()},h.prototype.resetSolvedMap=function(){this.solvedMap={},this.syncToStorage(),c.getEvents().trigger("levelSolved")},h.prototype.syncToStorage=function(){try{localStorage.setItem("solvedMap",JSON.stringify(this.solvedMap))}catch(e){console.warn("local storage fialed on set",e)}},h.prototype.validateLevel=function(e){e=e||{};var t=["name","goalTreeString","solutionCommand"],n=["hint","disabledMap","startTree"];u.each(t,function(t){if(e[t]===undefined)throw console.log(e),new Error("I need this field for a level: "+t)})},h.prototype.getSequenceToLevels=function(){return this.levelSequences},h.prototype.getSequences=function(){return u.keys(this.levelSequences)},h.prototype.getLevelsInSequence=function(e){if(!this.levelSequences[e])throw new Error("that sequecne name "+e+"does not exist");return this.levelSequences[e]},h.prototype.getSequenceInfo=function(e){return l[e]},h.prototype.getLevel=function(e){return this.levelMap[e]},h.prototype.getNextLevel=function(e){if(!this.levelMap[e])return console.warn("that level doesnt exist!!!"),null;var t=this.levelMap[e],n=t.sequenceName,r=this.levelSequences[n],i=t.index+1;if(i<r.length)return r[i];var s=this.sequences.indexOf(n)+1;if(s<this.sequences.length){var o=this.sequences[s];return this.levelSequences[o][0]}return null},n.LevelArbiter=h}),e("/src/js/level/arbiter.js"),e.define("/src/js/level/builder.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=e("q"),l=e("../util"),c=e("../app"),h=e("../intl"),p=e("../util/errors"),d=e("../visuals/visualization").Visualization,v=e("../level/parseWaterfall").ParseWaterfall,m=e("../level").Level,g=e("../models/commandModel").Command,y=e("../git/gitShim").GitShim,b=e("../views/multiView").MultiView,w=e("../views").CanvasTerminalHolder,E=e("../views").ConfirmCancelTerminal,S=e("../views").NextLevelConfirm,x=e("../views").LevelToolbar,T=e("../views/builderViews").MarkdownPresenter,N=e("../views/builderViews").MultiViewBuilder,C=e("../views/builderViews").MarkdownGrabber,k={"define goal":/^define goal$/,"define name":/^define name$/,"help builder":/^help builder$/,"define start":/^define start$/,"edit dialog":/^edit dialog$/,"show start":/^show start$/,"hide start":/^hide start$/,"define hint":/^define hint$/,finish:/^finish$/},L=l.genParseCommand(k,"processLevelBuilderCommand"),A=m.extend({initialize:function(t){t=t||{},t.level=t.level||{};var n=h.getLocale();t.level.startDialog={},t.level.startDialog[n]={childViews:h.getDialog(e("../dialogs/levelBuilder"))},A.__super__.initialize.apply(this,[t]),this.startDialogObj=undefined,this.definedGoal=!1,delete this.treeCompare,delete this.solved},initName:function(){this.levelToolbar=new x({name:h.str("level-builder")})},initGoalData:function(){this.level.goalTreeString='{"branches":{"master":{"target":"C1","id":"master"},"makeLevel":{"target":"C2","id":"makeLevel"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"makeLevel","id":"HEAD"}}',this.level.solutionCommand="git checkout -b makeLevel; git commit",A.__super__.initGoalData.apply(this,arguments)},initStartVisualization:function(){return this.startCanvasHolder=new w({additionalClass:"startTree",text:h.str("hide-start")}),this.startVis=new d({el:this.startCanvasHolder.getCanvasLocation(),containerElement:this.startCanvasHolder.getCanvasLocation(),treeString:this.level.startTree,noKeyboardInput:!0,smallCanvas:!0,noClick:!0}),this.startCanvasHolder},startOffCommand:function(){c.getEventBaton().trigger("commandSubmitted","echo :D")},objectiveDialog:function(e,t){var n=[e,t,this.startDialogObj===undefined?null:{startDialog:{en_US:this.startDialogObj}}];A.__super__.objectiveDialog.apply(this,n)},initParseWaterfall:function(e){A.__super__.initParseWaterfall.apply(this,[e]),this.parseWaterfall.addFirst("parseWaterfall",L),this.parseWaterfall.addFirst("instantWaterfall",this.getInstantCommands())},buildLevel:function(e,t){this.exitLevel(),setTimeout(function(){c.getSandbox().buildLevel(e,t)},this.getAnimationTime()*1.5)},getInstantCommands:function(){return[[/^help$|^\?$/,function(){throw new p.CommandResult({msg:h.str("help-vague-builder")})}]]},takeControl:function(){c.getEventBaton().stealBaton("processLevelBuilderCommand",this.processLevelBuilderCommand,this),A.__super__.takeControl.apply(this)},releaseControl:function(){c.getEventBaton().releaseBaton("processLevelBuilderCommand",this.processLevelBuilderCommand,this),A.__super__.releaseControl.apply(this)},showGoal:function(){this.hideStart(),A.__super__.showGoal.apply(this,arguments)},showStart:function(e,t){this.hideGoal(),this.showSideVis(e,t,this.startCanvasHolder,this.initStartVisualization)},resetSolution:function(){this.gitCommandsIssued=[],this.level.solutionCommand=undefined},hideStart:function(e,t){this.hideSideVis(e,t,this.startCanvasHolder)},defineStart:function(e,t){this.hideStart(),e.addWarning(h.str("define-start-warning")),this.resetSolution(),this.level.startTree=this.mainVis.gitEngine.printTree(),this.mainVis.resetFromThisTreeNow(this.level.startTree),this.showStart(e,t)},defineGoal:function(e,t){this.hideGoal();if(!this.gitCommandsIssued.length){e.set("error",new p.GitError({msg:h.str("solution-empty")})),t.resolve();return}this.definedGoal=!0,this.level.solutionCommand=this.gitCommandsIssued.join(";"),this.level.goalTreeString=this.mainVis.gitEngine.printTree(),this.initGoalVisualization(),this.showGoal(e,t)},defineName:function(e,t){this.level.name={en_US:prompt(h.str("prompt-name"))},e&&e.finishWith(t)},defineHint:function(e,t){this.level.hint={en_US:prompt(h.str("prompt-hint"))},e&&e.finishWith(t)},editDialog:function(e,t){var n=f.defer();this.currentBuilder=new N({multiViewJSON:this.startDialogObj,deferred:n}),n.promise.then(u.bind(function(e){this.startDialogObj=e},this)).fail(function(){}).done(function(){e?e.finishWith(t):t.resolve()})},finish:function(e,t){if(!this.gitCommandsIssued.length||!this.definedGoal){e.set("error",new p.GitError({msg:h.str("solution-empty")})),t.resolve();return}while(!this.level.name)this.defineName();var n=f.defer(),r=n.promise;if(this.level.hint===undefined){var i=f.defer();r=r.then(function(){return i.promise});var s=new E({markdowns:[h.str("want-hint")]});s.getPromise().then(u.bind(this.defineHint,this)).fail(u.bind(function(){this.level.hint={en_US:""}},this)).done(function(){i.resolve()})}if(this.startDialogObj===undefined){var o=f.defer();r=r.then(function(){return o.promise});var a=new E({markdowns:[h.str("want-start-dialog")]});a.getPromise().then(u.bind(function(){var e=f.defer();return this.editDialog(undefined,e),e.promise},this)).fail(function(){}).done(function(){o.resolve()})}r=r.done(u.bind(function(){new T({fillerText:JSON.stringify(this.getExportObj(),null,2),previewText:h.str("share-json")}),e.finishWith(t)},this)),n.resolve()},getExportObj:function(){var e=u.extend({},this.level);return delete e.startDialog,this.startDialogObj&&(e.startDialog={en_US:this.startDialogObj}),e},processLevelBuilderCommand:function(e,t){var n={"define goal":this.defineGoal,"define start":this.defineStart,"show start":this.showStart,"hide start":this.hideStart,finish:this.finish,"define hint":this.defineHint,"define name":this.defineName,"edit dialog":this.editDialog,"help builder":A.__super__.startDialog};if(!n[e.get("method")])throw new Error("woah we dont support that method yet");n[e.get("method")].apply(this,arguments)},afterCommandDefer:function(e,t){e.resolve()},die:function(){this.hideStart(),A.__super__.die.apply(this,arguments),delete this.startVis,delete this.startCanvasHolder}});n.LevelBuilder=A,n.regexMap=k}),e("/src/js/level/builder.js"),e.define("/src/js/level/disabledMap.js",function(e,t,n,r,i,s,o){function h(e){e=e||{},this.disabledMap=e.disabledMap||{"git cherry-pick":!0,"git rebase":!0}}var u=e("underscore"),a=e("../intl"),f=e("../commands"),l=e("../util/errors"),c=l.GitError;h.prototype.getInstantCommands=function(){var e=[],t=function(){throw new c({msg:a.str("command-disabled")})};return u.each(this.disabledMap,function(n,r){var i="git";r=r.slice(i.length+1);var s=f.commands.getRegexMap()[i][r];if(!s)throw new Error("wuttttt this disbaled command"+r+" has no regex matching");e.push([s,t])}),e},n.DisabledMap=h}),e("/src/js/level/disabledMap.js"),e.define("/src/js/level/index.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=e("q"),l=e("../util"),c=e("../app"),h=e("../intl"),p=e("../log"),d=e("../util/errors"),v=e("../sandbox/").Sandbox,m=e("../util/constants"),g=e("../visuals/visualization").Visualization,y=e("../level/parseWaterfall").ParseWaterfall,b=e("../level/disabledMap").DisabledMap,w=e("../models/commandModel").Command,E=e("../git/gitShim").GitShim,S=e("../commands"),x=e("../views/multiView").MultiView,T=e("../views").CanvasTerminalHolder,N=e("../views").ConfirmCancelTerminal,C=e("../views").NextLevelConfirm,k=e("../views").LevelToolbar,L=e("../git/treeCompare").TreeCompare,A={"help level":/^help level$/,"start dialog":/^start dialog$/,"show goal":/^(show goal|goal|help goal)$/,"hide goal":/^hide goal$/,"show solution":/^show solution($|\s)/,objective:/^(objective|assignment)$/},O=l.genParseCommand(A,"processLevelCommand"),M=v.extend({initialize:function(e){e=e||{},e.level=e.level||{},this.level=e.level,this.gitCommandsIssued=[],this.solved=!1,this.initGoalData(e),this.initName(e),M.__super__.initialize.apply(this,[e]),this.startOffCommand(),this.handleOpen(e.deferred)},handleOpen:function(e){e=e||f.defer();if(this.level.startDialog&&!this.testOption("noIntroDialog")){new x(u.extend({},h.getStartDialog(this.level),{deferred:e}));return}setTimeout(function(){e.resolve()},this.getAnimationTime()*1.2)},objectiveDialog:function(e,t,n){n=n===undefined?this.level:n;if(!n||!n.startDialog){e.set("error",new d.GitError({msg:h.str("no-start-dialog")})),t.resolve();return}debugger;console.log(h.getStartDialog(n));var r=$.extend({},h.getStartDialog(n));r.childViews=r.childViews.slice(-1),new x(u.extend(r,{deferred:t})),t.promise.then(function(){e.set("status","finished")})},startDialog:function(e,t){if(!this.level.startDialog){e.set("error",new d.GitError({msg:h.str("no-start-dialog")})),t.resolve();return}this.handleOpen(t),t.promise.then(function(){e.set("status","finished")})},getEnglishName:function(){return this.level.name.en_US},initName:function(){var e=h.getName(this.level);this.levelToolbar=new k({name:e})},initGoalData:function(e){if(!this.level.goalTreeString||!this.level.solutionCommand)throw new Error("need goal tree and solution")},takeControl:function(){c.getEventBaton().stealBaton("processLevelCommand",this.processLevelCommand,this),M.__super__.takeControl.apply(this)},releaseControl:function(){c.getEventBaton().releaseBaton("processLevelCommand",this.processLevelCommand,this),M.__super__.releaseControl.apply(this)},startOffCommand:function(){this.testOption("noStartCommand")||c.getEventBaton().trigger("commandSubmitted","hint; delay 2000; show goal")},initVisualization:function(e){this.mainVis=new g({el:e.el||this.getDefaultVisEl(),treeString:e.level.startTree})},initGoalVisualization:function(){var e=L.onlyMasterCompared(this.level);return this.goalCanvasHolder=new T({text:e?h.str("goal-only-master"):undefined}),this.goalVis=new g({el:this.goalCanvasHolder.getCanvasLocation(),containerElement:this.goalCanvasHolder.getCanvasLocation(),treeString:this.level.goalTreeString,noKeyboardInput:!0,smallCanvas:!0,isGoalVis:!0,levelBlob:this.level,noClick:!0}),this.goalCanvasHolder},showSolution:function(t,n){var r=this.level.solutionCommand,i=u.bind(function(){this.isShowingSolution=!0,c.getEventBaton().trigger("commandSubmitted",r),p.showLevelSolution(this.getEnglishName())},this),s=t.get("rawStr");this.testOptionOnString(s,"noReset")||(r="reset --forSolution; "+r);if(this.testOptionOnString(s,"force")){i(),t.finishWith(n);return}var o=f.defer(),a=h.getDialog(e("../dialogs/confirmShowSolution"))[0],l=new N({markdowns:a.options.markdowns,deferred:o});o.promise.then(i).fail(function(){t.setResult("")}).done(function(){setTimeout(function(){t.finishWith(n)},l.getAnimationTime())})},showGoal:function(e,t){this.showSideVis(e,t,this.goalCanvasHolder,this.initGoalVisualization)},showSideVis:function(e,t,n,r){var i=function(){e&&e.finishWith(t)};if(!n||!n.inDom)n=r.apply(this);n.slideIn(),setTimeout(i,n.getAnimationTime())},hideGoal:function(e,t){this.hideSideVis(e,t,this.goalCanvasHolder)},hideSideVis:function(e,t,n,r){var i=function(){e&&e.finishWith(t)};n&&n.inDom?(n.die(),setTimeout(i,n.getAnimationTime())):i()},initParseWaterfall:function(e){M.__super__.initParseWaterfall.apply(this,[e]),this.parseWaterfall.addFirst("parseWaterfall",O),this.parseWaterfall.addFirst("instantWaterfall",this.getInstantCommands()),e.level.disabledMap&&this.parseWaterfall.addFirst("instantWaterfall",(new b({disabledMap:e.level.disabledMap})).getInstantCommands())},initGitShim:function(e){this.gitShim=new E({beforeCB:u.bind(this.beforeCommandCB,this),afterCB:u.bind(this.afterCommandCB,this),afterDeferHandler:u.bind(this.afterCommandDefer,this)})},undo:function(){this.gitCommandsIssued.pop(),M.__super__.undo.apply(this,arguments)},afterCommandCB:function(e){if(e.get("error"))return;var t=!1;u.each(S.commands.getCommandsThatCount(),function(n){u.each(n,function(n){t=t||n.test(e.get("rawStr"))})}),t&&this.gitCommandsIssued.push(e.get("rawStr"))},afterCommandDefer:function(e,t){if(this.solved){t.addWarning(h.str("already-solved")),e.resolve();return}var n=this.mainVis.gitEngine.exportTree(),r=L.dispatchFromLevel(this.level,n);if(!r){e.resolve();return}this.levelSolved(e)},getNumSolutionCommands:function(){var e=this.level.solutionCommand.replace(/^;|;$/g,"");return e.split(";").length},testOption:function(e){return this.options.command&&(new RegExp("--"+e)).test(this.options.command.get("rawStr"))},testOptionOnString:function(e,t){return e&&(new RegExp("--"+t)).test(e)},levelSolved:function(e){this.solved=!0,this.isShowingSolution||(c.getEvents().trigger("levelSolved",this.level.id),p.levelSolved(this.getEnglishName())),this.hideGoal();var t=c.getLevelArbiter().getNextLevel(this.level.id),n=this.gitCommandsIssued.length,r=this.getNumSolutionCommands();m.GLOBAL.isAnimating=!0;var i=this.testOption("noFinishDialog"),s=this.mainVis.gitVisuals.finishAnimation();this.mainVis.originVis&&(s=s.then(this.mainVis.originVis.gitVisuals.finishAnimation())),i||(s=s.then(function(){var e=new C({nextLevel:t,numCommands:n,best:r});return e.getPromise()})),s.then(function(){!i&&t&&(p.choseNextLevel(t.id),c.getEventBaton().trigger("commandSubmitted","level "+t.id))}).fail(function(){}).done(function(){m.GLOBAL.isAnimating=!1,e.resolve()})},die:function(){this.levelToolbar.die(),this.hideGoal(),this.mainVis.die(),this.releaseControl(),this.clear(),delete this.commandCollection,delete this.mainVis,delete this.goalVis,delete this.goalCanvasHolder},getInstantCommands:function(){var e=u.bind(function(){var e=h.getHint(this.level);return!e||!e.length?h.str("no-hint"):e},this);return[[/^help$|^\?$/,function(){throw new d.CommandResult({msg:h.str("help-vague-level")})}],[/^hint$/,function(){throw new d.CommandResult({msg:e()})}]]},reset:function(e,t){this.gitCommandsIssued=[];var n=e?e.get("rawStr"):"";this.testOptionOnString(n,"forSolution")||(this.isShowingSolution=!1),this.solved=!1,M.__super__.reset.apply(this,arguments)},buildLevel:function(e,t){this.exitLevel(),setTimeout(function(){c.getSandbox().buildLevel(e,t)},this.getAnimationTime()*1.5)},importLevel:function(e,t){this.exitLevel(),setTimeout(function(){c.getSandbox().importLevel(e,t)},this.getAnimationTime()*1.5)},startLevel:function(e,t){this.exitLevel(),setTimeout(function(){c.getSandbox().startLevel(e,t)},this.getAnimationTime()*1.5)},exitLevel:function(e,t){this.die();if(!e||!t)return;setTimeout(function(){e.finishWith(t)},this.getAnimationTime()),c.getEventBaton().trigger("levelExited")},processLevelCommand:function(e,t){var n={"show goal":this.showGoal,"hide goal":this.hideGoal,"show solution":this.showSolution,"start dialog":this.startDialog,"help level":this.startDialog,objective:this.objectiveDialog},r=n[e.get("method")];if(!r)throw new Error("woah we dont support that method yet",r);r.apply(this,[e,t])}});n.Level=M,n.regexMap=A}),e("/src/js/level/index.js"),e.define("/src/js/level/parseWaterfall.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../git/commands"),f=e("../commands"),l=e("../sandbox/commands"),c=function(e){e=e||{},this.options=e,this.shortcutWaterfall=e.shortcutWaterfall||[f.commands.getShortcutMap()],this.instantWaterfall=e.instantWaterfall||[a.instantCommands,l.instantCommands]};c.prototype.initParseWaterfall=function(){if(!e("../util").isBrowser()){this.parseWaterfall=[f.parse];return}this.parseWaterfall=this.options.parseWaterfall||[f.parse,l.parse,l.getOptimisticLevelParse(),l.getOptimisticLevelBuilderParse()]},c.prototype.clone=function(){return new c({shortcutWaterfall:this.shortcutWaterfall.slice(),instantWaterfall:this.instantWaterfall.slice(),parseWaterfall:this.parseWaterfall.slice()})},c.prototype.getWaterfallMap=function(){return this.parseWaterfall||this.initParseWaterfall(),{shortcutWaterfall:this.shortcutWaterfall,instantWaterfall:this.instantWaterfall,parseWaterfall:this.parseWaterfall}},c.prototype.addFirst=function(e,t){if(!e||!t)throw new Error("need to know which!!!");this.getWaterfallMap()[e].unshift(t)},c.prototype.addLast=function(e,t){this.getWaterfallMap()[e].push(t)},c.prototype.expandAllShortcuts=function(e){return u.each(this.shortcutWaterfall,function(t){e=this.expandShortcut(e,t)},this),e},c.prototype.expandShortcut=function(e,t){return u.each(t,function(t,n){u.each(t,function(t,r){var i=t.exec(e);i&&(e=n+" "+r+" "+e.slice(i[0].length))})}),e},c.prototype.processAllInstants=function(e){u.each(this.instantWaterfall,function(t){this.processInstant(e,t)},this)},c.prototype.processInstant=function(e,t){u.each(t,function(t){var n=t[0],r=n.exec(e);r&&t[1](r)})},c.prototype.parseAll=function(e){this.parseWaterfall||this.initParseWaterfall();var t=!1;return u.each(this.parseWaterfall,function(n){var r=n(e);r&&(t=r)},this),t},n.ParseWaterfall=c}),e("/src/js/level/parseWaterfall.js"),e.define("/src/js/log/index.js",function(e,t,n,r,i,s,o){var u=function(e,t,n){window._gaq=window._gaq||[],window._gaq.push(["_trackEvent",e,t,n])};n.viewInteracted=function(e){u("views","interacted",e)},n.showLevelSolution=function(e){u("levels","showedLevelSolution",e)},n.choseNextLevel=function(e){u("levels","nextLevelChosen",e)},n.levelSelected=function(e){u("levels","levelSelected",e)},n.levelSolved=function(e){u("levels","levelSolved",e)},n.commandEntered=function(e){u("commands","commandEntered",e)}}),e("/src/js/log/index.js"),e.define("/src/js/mercurial/commands.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../intl"),f=e("../git/commands"),l=e("../util/errors"),c=l.CommandProcessError,h=l.GitError,p=l.Warning,d=l.CommandResult,v={commit:{regex:/^hg +(commit|ci)($|\s)/,options:["--amend","-A","-m"],delegate:function(e,t){var n=t.getOptionsMap();return n["-A"]&&t.addWarning(a.str("hg-a-option")),{vcs:"git",name:"commit"}}},status:{regex:/^hg +(status|st) *$/,dontCountForGolf:!0,execute:function(e,t){throw new h({msg:a.str("hg-error-no-status")})}},"export":{regex:/^hg +export($|\s)/,dontCountForGolf:!0,delegate:function(e,t){return t.mapDotToHead(),{vcs:"git",name:"show"}}},graft:{regex:/^hg +graft($|\s)/,options:["-r"],delegate:function(e,t){t.appendOptionR();var n=t.getOptionsMap();if(!n["-r"])throw new h({msg:a.str("git-error-options")});return t.setGeneralArgs(n["-r"]),{vcs:"git",name:"cherrypick"}}},log:{regex:/^hg +log($|\s)/,options:["-f"],dontCountForGolf:!0,delegate:function(e,t){var n=t.getOptionsMap();t.acceptNoGeneralArgs();if(!n["-f"])throw new h({msg:a.str("hg-error-log-no-follow")});return t.mapDotToHead(),{vcs:"git",name:"log"}}},bookmark:{regex:/^hg (bookmarks|bookmark|book)($|\s)/,options:["-r","-f","-d"],delegate:function(e,t){var n=t.getOptionsMap(),r=t.getGeneralArgs(),i,s,o={vcs:"git"};if(n["-m"]&&n["-d"])throw new h({msg:"-m and -d are incompatible"});if(n["-d"]&&n["-r"])throw new h({msg:"-r is incompatible with -d"});if(n["-m"]&&n["-r"])throw new h({msg:"-r is incompatible with -m"});return r.length+(n["-r"]?n["-r"].length:0)+(n["-d"]?n["-d"].length:0)===0?(o.name="branch",o):(n["-d"]?(n["-D"]=n["-d"],delete n["-d"],o.name="branch"):n["-r"]?(i=n["-r"][1]||"",s=n["-r"][0]||"",o.name="branch",t.setGeneralArgs([i,s])):r.length>0?(t.setOptionsMap({"-b":[r[0]]}),o.name="checkout",t.setGeneralArgs([])):o.name="branch",o)}},rebase:{regex:/^hg +rebase($|\s+)/,options:["-d","-s","-b"],execute:function(e,t){var n=function(){throw new h({msg:a.str("git-error-options")})},r=t.getOptionsMap();r["-d"]&&r["-s"]||!r["-d"]&&!r["-s"],r["-b"]||(r["-b"]=["."]),t.setOptionsMap(r),t.mapDotToHead(),r=t.getOptionsMap();if(r["-d"]){var i=r["-d"][0]||n(),s=r["-b"][0];e.hgRebase(i,s)}else n()}},update:{regex:/^hg +(update|up)($|\s+)/,options:["-r"],delegate:function(e,t){return t.appendOptionR(),{vcs:"git",name:"checkout"}}},backout:{regex:/^hg +backout($|\s+)/,options:["-r"],delegate:function(e,t){return t.appendOptionR(),{vcs:"git",name:"revert"}}},histedit:{regex:/^hg +histedit($|\s+)/,delegate:function(e,t){var n=t.getGeneralArgs();return t.validateArgBounds(n,1,1),t.setOptionsMap({"-i":n}),t.setGeneralArgs([]),{vcs:"git",name:"rebase"}}},pull:{regex:/^hg +pull($|\s+)/,delegate:function(e,t){return{vcs:"git",name:"pull"}}},summary:{regex:/^hg +(summary|sum) *$/,delegate:function(e,t){return{vcs:"git",name:"branch"}}}};n.commandConfig=v}),e("/src/js/mercurial/commands.js"),e.define("/src/js/models/collections.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?f=window.Backbone:f=e("backbone"),l=e("../git").Commit,c=e("../git").Branch,h=e("../models/commandModel").Command,p=e("../models/commandModel").CommandEntry,d=e("../util/constants").TIME,v=f.Collection.extend({model:l}),m=f.Collection.extend({model:h}),g=f.Collection.extend({model:c}),y=f.Collection.extend({model:p,localStorage:f.LocalStorage?new f.LocalStorage("CommandEntries"):null}),b=f.Model.extend({defaults:{collection:null},initialize:function(e){e.collection.bind("add",this.addCommand,this),this.buffer=[],this.timeout=null},addCommand:function(e){this.buffer.push(e),this.touchBuffer()},touchBuffer:function(){if(this.timeout)return;this.setTimeout()},setTimeout:function(){this.timeout=setTimeout(u.bind(function(){this.sipFromBuffer()},this),d.betweenCommandsDelay)},popAndProcess:function(){var e=this.buffer.shift(0);while(e.get("error")&&this.buffer.length)e=this.buffer.shift(0);e.get("error")?this.clear():this.processCommand(e)},processCommand:function(t){t.set("status","processing");var n=a.defer();n.promise.then(u.bind(function(){this.setTimeout()},this));var r=t.get("eventName");if(!r)throw new Error("I need an event to trigger when this guy is parsed and ready");var i=e("../app"),s=i.getEventBaton(),o=s.getNumListeners(r);if(!o){var f=e("../util/errors");t.set("error",new f.GitError({msg:"That command is valid, but not supported in this current environment! Try entering a level or level builder to use that command"})),n.resolve();return}i.getEventBaton().trigger(r,t,n)},clear:function(){clearTimeout(this.timeout),this.timeout=null},sipFromBuffer:function(){if(!this.buffer.length){this.clear();return}this.popAndProcess()}});n.CommitCollection=v,n.CommandCollection=m,n.BranchCollection=g,n.CommandEntryCollection=y,n.CommandBuffer=b}),e("/src/js/models/collections.js"),e.define("/src/js/models/commandModel.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../util").isBrowser()?a=window.Backbone:a=e("backbone"),f=e("../util/errors"),l=e("../level/parseWaterfall").ParseWaterfall,c=e("../intl"),h=f.CommandProcessError,p=f.GitError,d=f.Warning,v=f.CommandResult,m=a.Model.extend({defaults:{status:"inqueue",rawStr:null,result:"",createTime:null,error:null,warnings:null,parseWaterfall:new l,generalArgs:null,supportedMap:null,options:null,method:null},initialize:function(e){this.initDefaults(),this.validateAtInit(),this.on("change:error",this.errorChanged,this),this.get("error")&&this.errorChanged(),this.parseOrCatch()},initDefaults:function(){this.set("generalArgs",[]),this.set("supportedMap",{}),this.set("warnings",[])},replaceDotWithHead:function(e){return e.replace(/\./g,"HEAD")},appendOptionR:function(){var e=this.getOptionsMap()["-r"]||[];this.setGeneralArgs(this.getGeneralArgs().concat(e))},mapDotToHead:function(){var e=this.getGeneralArgs(),t=this.getOptionsMap();e=u.map(e,function(e){return this.replaceDotWithHead(e)},this);var n={};u.each(t,function(e,t){n[t]=u.map(e,function(e){return this.replaceDotWithHead(e)},this)},this),this.setGeneralArgs(e),this.setOptionsMap(n)},deleteOptions:function(e){var t=this.getOptionsMap();u.each(e,function(e){delete t[e]},this),this.setOptionsMap(t)},getGeneralArgs:function(){return this.get("generalArgs")},setGeneralArgs:function(e){this.set("generalArgs",e)},setOptionsMap:function(e){this.set("supportedMap",e)},getOptionsMap:function(){return this.get("supportedMap")},acceptNoGeneralArgs:function(){if(this.getGeneralArgs().length)throw new p({msg:c.str("git-error-no-general-args")})},oneArgImpliedHead:function(e,t){this.validateArgBounds(e,0,1,t),e.length===0&&e.push("HEAD")},twoArgsImpliedHead:function(e,t){this.validateArgBounds(e,1,2,t),e.length==1&&e.push("HEAD")},validateArgBounds:function(e,t,n,r){var i=r===undefined?"git "+this.get("method"):this.get("method")+" "+r+" ";i="with "+i;if(e.length<t)throw new p({msg:c.str("git-error-args-few",{lower:String(t),what:i})});if(e.length>n)throw new p({msg:c.str("git-error-args-many",{upper:String(n),what:i})})},validateAtInit:function(){if(this.get("rawStr")===null)throw new Error("Give me a string!");this.get("createTime")||this.set("createTime",(new Date).toString())},setResult:function(e){this.set("result",e)},finishWith:function(e){this.set("status","finished"),e.resolve()},addWarning:function(e){this.get("warnings").push(e),this.set("numWarnings",this.get("numWarnings")?this.get("numWarnings")+1:1)},getFormattedWarnings:function(){if(!this.get("warnings").length)return"";var e='<i class="icon-exclamation-sign"></i>';return"<p>"+e+this.get("warnings").join("</p><p>"+e)+"</p>"},parseOrCatch:function(){this.expandShortcuts(this.get("rawStr"));try{this.processInstants()}catch(e){f.filterError(e),this.set("error",e);return}if(this.parseAll())return;this.set("error",new h({msg:'The command "'+this.get("rawStr")+"\" isn't supported, sorry!"}))},errorChanged:function(){var e=this.get("error");if(!e)return;e instanceof h||e instanceof p?this.set("status","error"):e instanceof v?this.set("status","finished"):e instanceof d&&this.set("status","warning"),this.formatError()},formatError:function(){this.set("result",this.get("error").toResult())},expandShortcuts:function(e){e=this.get("parseWaterfall").expandAllShortcuts(e),this.set("rawStr",e)},processInstants:function(){var e=this.get("rawStr");if(!e.length)throw new v({msg:""});this.get("parseWaterfall").processAllInstants(e)},parseAll:function(){var e=this.get("rawStr"),t=this.get("parseWaterfall").parseAll(e);return t?(u.each(t.toSet,function(e,t){this.set(t,e)},this),!0):!1}}),g=a.Model.extend({defaults:{text:""}});n.CommandEntry=g,n.Command=m}),e("/src/js/models/commandModel.js"),e.define("/src/js/sandbox/commands.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../util"),f=e("../util/constants"),l=e("../intl"),c=e("../commands"),h=e("../util/errors"),p=h.CommandProcessError,d=h.GitError,v=h.Warning,m=h.CommandResult,g=[[/^ls/,function(){throw new m({msg:l.str("ls-command")})}],[/^cd/,function(){throw new m({msg:l.str("cd-command")})}],[/^(locale|locale reset)$/,function(t){f.GLOBAL.locale=l.getDefaultLocale();var n=e("../app").getEvents().trigger("localeChanged");throw new m({msg:l.str("locale-reset-command",{locale:l.getDefaultLocale()})})}],[/^show$/,function(e){var t=[l.str("show-command"),"<br/>","show commands","show solution","show goal"];throw new m({msg:t.join("\n")})}],[/^locale (\w+)$/,function(t){f.GLOBAL.locale=t[1];var n=e("../app").getEvents().trigger("localeChanged");throw new m({msg:l.str("locale-command",{locale:t[1]})})}],[/^refresh$/,function(){var t=e("../app").getEvents();throw t.trigger("refreshTree"),new m({msg:l.str("refresh-tree-command")})}],[/^rollup (\d+)$/,function(t){var n=e("../app").getEvents();throw n.trigger("rollupCommands",t[1]),new m({msg:"Commands combined!"})}],[/^echo "(.*?)"$|^echo (.*?)$/,function(e){var t=e[1]||e[2];throw new m({msg:t})}],[/^show +commands$/,function(e){var t=b(),n=[l.str("show-all-commands"),"<br/>"];throw u.each(t,function(e,t){n.push(t)}),new m({msg:n.join("\n")})}]],y={"reset solved":/^reset solved($|\s)/,help:/^help( +general)?$|^\?$/,reset:/^reset( +--forSolution)?$/,delay:/^delay (\d+)$/,clear:/^clear($|\s)/,"exit level":/^exit level($|\s)/,sandbox:/^sandbox($|\s)/,level:/^level\s?([a-zA-Z0-9]*)/,levels:/^levels($|\s)/,mobileAlert:/^mobile alert($|\s)/,"build level":/^build +level($|\s)/,"export tree":/^export +tree$/,importTreeNow:/^importTreeNow($|\s)/,"import tree":/^import +tree$/,"import level":/^import +level$/,undo:/^undo($|\s)/},b=function(){var t=["mobileAlert"],n=u.extend({},e("../level").regexMap,y);return u.each(c.commands.getRegexMap(),function(e,t){u.each(e,function(e,r){n[t+" "+r]=e})}),u.each(t,function(e){delete n[e]}),n};n.instantCommands=g,n.parse=a.genParseCommand(y,"processSandboxCommand"),n.getOptimisticLevelParse=function(){return a.genParseCommand(e("../level").regexMap,"processLevelCommand")},n.getOptimisticLevelBuilderParse=function(){return a.genParseCommand(e("../level/builder").regexMap,"processLevelBuilderCommand")}}),e("/src/js/sandbox/commands.js"),e.define("/src/js/sandbox/index.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?window.Backbone:e("backbone"),l=e("../util"),c=e("../intl"),h=e("../app"),p=e("../util/errors"),d=e("../visuals/visualization").Visualization,v=e("../level/parseWaterfall").ParseWaterfall,m=e("../level/disabledMap").DisabledMap,g=e("../models/commandModel").Command,y=e("../git/gitShim").GitShim,b=e("../views"),w=b.ModalTerminal,E=b.ModalAlert,S=e("../views/builderViews"),x=e("../views/multiView").MultiView,T=f.View.extend({tagName:"div",initialize:function(e){e=e||{},this.options=e,this.initVisualization(e),this.initCommandCollection(e),this.initParseWaterfall(e),this.initGitShim(e),this.initUndoStack(e),e.wait||this.takeControl()},getDefaultVisEl:function(){return $("#mainVisSpace")[0]},getAnimationTime:function(){return 1050},initVisualization:function(e){this.mainVis=new d({el:e.el||this.getDefaultVisEl()})},initUndoStack:function(e){this.undoStack=[]},initCommandCollection:function(e){this.commandCollection=h.getCommandUI().commandCollection},initParseWaterfall:function(e){this.parseWaterfall=new v},initGitShim:function(e){this.gitShim=new y({beforeCB:u.bind(this.beforeCommandCB,this)})},takeControl:function(){h.getEventBaton().stealBaton("commandSubmitted",this.commandSubmitted,this),h.getEventBaton().stealBaton("processSandboxCommand",this.processSandboxCommand,this),h.getEventBaton().stealBaton("levelExited",this.levelExited,this),this.insertGitShim()},releaseControl:function(){h.getEventBaton().releaseBaton("commandSubmitted",this.commandSubmitted,this),h.getEventBaton().releaseBaton("processSandboxCommand",this.processSandboxCommand,this),h.getEventBaton().releaseBaton("levelExited",this.levelExited,this),this.releaseGitShim()},releaseGitShim:function(){this.gitShim&&this.gitShim.removeShim()},insertGitShim:function(){this.gitShim&&this.mainVis.customEvents.on("gitEngineReady",function(){this.gitShim.insertShim()},this)},beforeCommandCB:function(e){this.pushUndo()},pushUndo:function(){this.undoStack.push(this.mainVis.gitEngine.printTree())},undo:function(e,t){var n=this.undoStack.pop();if(!n){e.set("error",new p.GitError({msg:c.str("undo-stack-empty")})),t.resolve();return}this.mainVis.reset(n),setTimeout(function(){e.finishWith(t)},this.mainVis.getAnimationTime())},commandSubmitted:function(e){h.getEvents().trigger("commandSubmittedPassive",e),l.splitTextCommand(e,function(e){this.commandCollection.add(new g({rawStr:e,parseWaterfall:this.parseWaterfall}))},this)},startLevel:function(t,n){var r=t.get("regexResults")||[],i=r[1]||"",s=h.getLevelArbiter().getLevel(i);if(!s){t.addWarning(c.str("level-no-id",{id:i})),h.getEventBaton().trigger("commandSubmitted","levels"),t.set("status","error"),n.resolve();return}this.hide(),this.clear();var o=a.defer(),u=e("../level").Level;this.currentLevel=new u({level:s,deferred:o,command:t}),o.promise.then(function(){t.finishWith(n)})},buildLevel:function(t,n){this.hide(),this.clear();var r=a.defer(),i=e("../level/builder").LevelBuilder;this.levelBuilder=new i({deferred:r}),r.promise.then(function(){t.finishWith(n)})},exitLevel:function(e,t){e.addWarning(c.str("level-cant-exit")),e.set("status","error"),t.resolve()},showLevels:function(e,t){var n=a.defer();h.getLevelDropdown().show(n,e),n.promise.done(function(){e.finishWith(t)})},resetSolved:function(e,t){h.getLevelArbiter().resetSolvedMap(),e.addWarning(c.str("solved-map-reset")),e.finishWith(t)},processSandboxCommand:function(e,t){var n={"reset solved":this.resetSolved,undo:this.undo,"help general":this.helpDialog,help:this.helpDialog,reset:this.reset,delay:this.delay,clear:this.clear,"exit level":this.exitLevel,level:this.startLevel,sandbox:this.exitLevel,levels:this.showLevels,mobileAlert:this.mobileAlert,"build level":this.buildLevel,"export tree":this.exportTree,"import tree":this.importTree,importTreeNow:this.importTreeNow,"import level":this.importLevel},r=n[e.get("method")];if(!r)throw new Error("no method for that wut");r.apply(this,[e,t])},hide:function(){this.mainVis.hide()},levelExited:function(){this.show()},show:function(){this.mainVis.show()},importTreeNow:function(e,t){var n=e.get("regexResults")||[];if(n.length<2)e.set("error",new p.GitError({msg:c.str("git-error-options")}));else{var r=n.input.replace(/importTreeNow\s+/g,"");try{this.mainVis.gitEngine.loadTreeFromString(r)}catch(i){e.set("error",new p.GitError({msg:String(i)}))}}e.finishWith(t)},importTree:function(e,t){var n=new S.MarkdownPresenter({previewText:c.str("paste-json"),fillerText:" "});n.deferred.promise.then(u.bind(function(e){try{this.mainVis.gitEngine.loadTree(JSON.parse(e))}catch(t){this.mainVis.reset(),new x({childViews:[{type:"ModalAlert",options:{markdowns:["## Error!","","Something is wrong with that JSON! Here is the error:","",String(t)]}}]})}},this)).fail(function(){}).done(function(){e.finishWith(t)})},importLevel:function(t,n){var r=new S.MarkdownPresenter({previewText:c.str("paste-json"),fillerText:" "});r.deferred.promise.then(u.bind(function(r){var i=e("../level").Level;try{var s=JSON.parse(r),o=a.defer();this.currentLevel=new i({level:s,deferred:o,command:t}),this.hide(),o.promise.then(function(){t.finishWith(n)})}catch(u){new x({childViews:[{type:"ModalAlert",options:{markdowns:["## Error!","","Something is wrong with that level JSON, this happened:","",String(u)]}}]}),t.finishWith(n)}},this)).fail(function(){t.finishWith(n)}).done()},exportTree:function(e,t){var n=JSON.stringify(this.mainVis.gitEngine.exportTree(),null,2),r=new x({childViews:[{type:"MarkdownPresenter",options:{previewText:c.str("share-tree"),fillerText:n,noConfirmCancel:!0}}]});r.getPromise().then(function(){e.finishWith(t)}).done()},clear:function(e,t){h.getEvents().trigger("clearOldCommands"),e&&t&&e.finishWith(t)},mobileAlert:function(e,t){alert(c.str("mobile-alert")),e.finishWith(t)},delay:function(e,t){var n=parseInt(e.get("regexResults")[1],10);setTimeout(function(){e.finishWith(t)},n)},reset:function(e,t){this.mainVis.reset(),this.initUndoStack(),setTimeout(function(){e.finishWith(t)},this.mainVis.getAnimationTime())},helpDialog:function(t,n){var r=new x({childViews:c.getDialog(e("../dialogs/sandbox"))});r.getPromise().then(u.bind(function(){t.finishWith(n)},this)).done()}});n.Sandbox=T}),e("/src/js/sandbox/index.js"),e.define("/src/js/util/constants.js",function(e,t,n,r,i,s,o){var u={betweenCommandsDelay:400},a={isAnimating:!1},f={minZoom:.55,maxZoom:1.25,minWidth:600,minHeight:600},l={arrowHeadSize:8,nodeRadius:17,curveControlPointOffset:50,defaultEasing:"easeInOut",defaultAnimationTime:400,rectFill:"hsb(0.8816909813322127,0.7,1)",headRectFill:"#2831FF",rectStroke:"#FFF",rectStrokeWidth:"3",originDash:"- ",multiBranchY:20,upstreamHeadOpacity:.5,upstreamNoneOpacity:.2,edgeUpstreamHeadOpacity:.4,edgeUpstreamNoneOpacity:.15,visBranchStrokeWidth:2,visBranchStrokeColorNone:"#333",defaultNodeFill:"hsba(0.5,0.8,0.7,1)",defaultNodeStrokeWidth:2,defaultNodeStroke:"#FFF",orphanNodeFill:"hsb(0.5,0.8,0.7)"};n.GLOBAL=a,n.TIME=u,n.GRAPHICS=l,n.VIEWPORT=f}),e("/src/js/util/constants.js"),e.define("/src/js/util/debug.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a={Tree:e("../visuals/tree"),Visuals:e("../visuals"),Git:e("../git"),CommandModel:e("../models/commandModel"),Levels:e("../git/treeCompare"),Constants:e("../util/constants"),Commands:e("../commands"),Collections:e("../models/collections"),Async:e("../visuals/animation"),AnimationFactory:e("../visuals/animation/animationFactory"),Main:e("../app"),HeadLess:e("../git/headless"),Q:{Q:e("q")},RebaseView:e("../views/rebaseView"),Views:e("../views"),MultiView:e("../views/multiView"),ZoomLevel:e("../util/zoomLevel"),VisBranch:e("../visuals/visBranch"),Level:e("../level"),Sandbox:e("../sandbox/"),GitDemonstrationView:e("../views/gitDemonstrationView"),Markdown:e("markdown"),LevelDropdownView:e("../views/levelDropdownView"),BuilderViews:e("../views/builderViews"),LevelArbiter:e("../level/arbiter"),Intl:e("../intl")};u.each(a,function(e){for(var t in e)window["debug_"+t]=e[t]}),$(document).ready(function(){window.events=a.Main.getEvents(),window.eventBaton=a.Main.getEventBaton(),window.sandbox=a.Main.getSandbox(),window.modules=a,window.levelDropdown=a.Main.getLevelDropdown(),window.under=u,window.copyTree=function(){return a.Main.getSandbox().mainVis.gitEngine.printAndCopyTree()}})}),e("/src/js/util/debug.js"),e.define("/src/js/util/errors.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=a.Model.extend({defaults:{type:"MyError",msg:"Unknown Error"},toString:function(){return this.get("type")+": "+this.get("msg")},getMsg:function(){return this.get("msg")||"Unknown Error"},toResult:function(){return this.get("msg").length?"<p>"+this.get("msg").replace(/\n/g,"</p><p>")+"</p>":""}}),l=n.CommandProcessError=f.extend({defaults:{type:"Command Process Error"}}),c=n.CommandResult=f.extend({defaults:{type:"Command Result"}}),h=n.Warning=f.extend({defaults:{type:"Warning"}}),p=n.GitError=f.extend({defaults:{type:"Git Error"}}),d=function(e){if(e instanceof l||e instanceof p||e instanceof c||e instanceof h)return;throw e};n.filterError=d}),e("/src/js/util/errors.js"),e.define("/src/js/util/eventBaton.js",function(e,t,n,r,i,s,o){function a(){this.eventMap={}}var u=e("underscore");a.prototype.stealBaton=function(e,t,n){if(!e)throw new Error("need name");if(!t)throw new Error("need func!");var r=this.eventMap[e]||[];r.push({func:t,context:n}),this.eventMap[e]=r},a.prototype.sliceOffArgs=function(e,t){var n=[];for(var r=e;r<t.length;r++)n.push(t[r]);return n},a.prototype.trigger=function(e){var t=this.sliceOffArgs(1,arguments),n=this.eventMap[e];if(!n||!n.length){console.warn("no listeners for",e);return}var r=n.slice(-1)[0];r.func.apply(r.context,t)},a.prototype.getNumListeners=function(e){var t=this.eventMap[e]||[];return t.length},a.prototype.getListenersThrow=function(e){var t=this.eventMap[e];if(!t||!t.length)throw new Error("no one has that baton!"+e);return t},a.prototype.passBatonBackSoft=function(e,t,n,r){try{return this.passBatonBack(e,t,n,r)}catch(i){}},a.prototype.passBatonBack=function(e,t,n,r){var i=this.getListenersThrow(e),s;u.each(i,function(e,r){if(r===0)return;e.func===t&&e.context===n&&(s=r-1)},this);if(s===undefined)throw new Error("you are the last baton holder! or i didnt find you");var o=i[s];o.func.apply(o.context,r)},a.prototype.releaseBaton=function(e,t,n){var r=this.getListenersThrow(e),i=[],s=!1;u.each(r,function(e){e.func===t&&e.context===n?(s&&(console.warn("woah duplicates!!!"),console.log(r)),s=!0):i.push(e)},this);if(!s)throw console.log("did not find that function",t,n,e,arguments),console.log(this.eventMap),new Error("cant releasebaton if yu dont have it");this.eventMap[e]=i},n.EventBaton=a}),e("/src/js/util/eventBaton.js"),e.define("/src/js/util/index.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../util/constants");n.parseQueryString=function(e){var t={};return e.replace(new RegExp("([^?=&]+)(=([^&]*))?","g"),function(e,n,r,i){t[n]=i}),t},n.isBrowser=function(){var e=String(typeof window)!=="undefined";return e},n.splitTextCommand=function(e,t,n){t=u.bind(t,n),u.each(e.split(";"),function(e,n){e=u.escape(e),e=e.replace(/^(\s+)/,"").replace(/(\s+)$/,"").replace(/&quot;/g,'"').replace(/&#x27;/g,"'");if(n>0&&!e.length)return;t(e)})},n.genParseCommand=function(e,t){return function(n){var r,i;return u.each(e,function(e,t){var s=e.exec(n);s&&(r=t,i=s)}),r?{toSet:{eventName:t,method:r,regexResults:i}}:!1}}}),e("/src/js/util/index.js"),e.define("/src/js/util/keyboard.js",function(e,t,n,r,i,s,o){function c(e){this.events=e.events||u.clone(a.Events),this.aliasMap=e.aliasMap||{},e.wait||this.listen()}var u=e("underscore"),a=e("backbone"),f=e("../app"),l=function(e){var t={37:"left",38:"up",39:"right",40:"down",27:"esc",13:"enter"};return t[e]};c.prototype.listen=function(){if(this.listening)return;this.listening=!0,f.getEventBaton().stealBaton("docKeydown",this.keydown,this)},c.prototype.mute=function(){this.listening=!1,f.getEventBaton().releaseBaton("docKeydown",this.keydown,this)},c.prototype.keydown=function(e){var t=e.which||e.keyCode,n=l(t);if(n===undefined)return;this.fireEvent(n,e)},c.prototype.fireEvent=function(e,t){e=this.aliasMap[e]||e,this.events.trigger(e,t)},c.prototype.passEventBack=function(e){f.getEventBaton().passBatonBackSoft("docKeydown",this.keydown,this,[e])},n.KeyboardListener=c,n.mapKeycodeToKey=l}),e("/src/js/util/keyboard.js"),e.define("/src/js/util/mock.js",function(e,t,n,r,i,s,o){n.mock=function(e){var t={},n=function(){};for(var r in e.prototype)t[r]=n;return t}}),e("/src/js/util/mock.js"),e.define("/src/js/util/zoomLevel.js",function(e,t,n,r,i,s,o){function f(){return!window.outerWidth||!window.innerWidth?(a&&(console.warn("Can't detect zoom level correctly :-/"),a=!1),1):window.outerWidth/window.innerWidth}var u=e("underscore"),a=!0,l=!0,c=function(e,t){var n=0;setInterval(function(){var r=f();if(r!==n){if(l){l=!1;return}n=r,e.apply(t,[r])}else l=!0},500)};n.setupZoomPoll=c,n.detectZoom=f}),e("/src/js/util/zoomLevel.js"),e.define("/src/js/views/builderViews.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?window.Backbone:e("backbone"),l=e("../util"),c=e("../intl"),h=e("../util/keyboard").KeyboardListener,p=e("../views"),d=p.ModalTerminal,v=p.ContainedBase,m=v.extend({tagName:"div",className:"textGrabber box vertical",template:u.template($("#text-grabber").html()),initialize:function(e){e=e||{},this.JSON={helperText:e.helperText||"Enter some text"},this.container=e.container||new d({title:"Enter some text"}),this.render(),e.initialText&&this.setText(e.initialText),e.wait||this.show()},getText:function(){return this.$("textarea").val()},setText:function(e){this.$("textarea").val(e)}}),g=v.extend({tagName:"div",className:"markdownGrabber box horizontal",template:u.template($("#markdown-grabber-view").html()),events:{"keyup textarea":"keyup"},initialize:function(e){e=e||{},this.deferred=e.deferred||a.defer(),e.fromObj&&(e.fillerText=e.fromObj.options.markdowns.join("\n")),this.JSON={previewText:e.previewText||"Preview",fillerText:e.fillerText||"## Enter some markdown!\n\n\n"},this.container=e.container||new d({title:e.title||"Enter some markdown"}),this.render();if(!e.withoutButton){var t=a.defer();t.promise.then(u.bind(this.confirmed,this)).fail(u.bind(this.cancelled,this)).done();var n=new p.ConfirmCancelView({deferred:t,destination:this.getDestination()})}this.updatePreview(),e.wait||this.show()},confirmed:function(){this.die(),this.deferred.resolve(this.getRawText())},cancelled:function(){this.die(),this.deferred.resolve()},keyup:function(){this.throttledPreview||(this.throttledPreview=u.throttle(u.bind(this.updatePreview,this),500)),this.throttledPreview()},getRawText:function(){return this.$("textarea").val()},exportToArray:function(){return this.getRawText().split("\n")},getExportObj:function(){return{markdowns:this.exportToArray()}},updatePreview:function(){var t=this.getRawText(),n=e("markdown").markdown.toHTML(t);this.$("div.insidePreview").html(n)}}),y=v.extend({tagName:"div",className:"markdownPresenter box vertical",template:u.template($("#markdown-presenter").html()),initialize:function(e){e=e||{},this.deferred=e.deferred||a.defer(),this.JSON={previewText:e.previewText||"Here is something for you",fillerText:e.fillerText||"# Yay"},this.container=new d({title:"Check this out..."}),this.render();if(!e.noConfirmCancel){var t=new p.ConfirmCancelView({destination:this.getDestination()});t.deferred.promise.then(u.bind(function(){this.deferred.resolve(this.grabText())},this)).fail(u.bind(function(){this.deferred.reject()},this)).done(u.bind(this.die,this))}this.show()},grabText:function(){return this.$("textarea").val()}}),b=v.extend({tagName:"div",className:"demonstrationBuilder box vertical",template:u.template($("#demonstration-builder").html()),events:{"click div.testButton":"testView"},initialize:function(e){e=e||{},this.deferred=e.deferred||a.defer();if(e.fromObj){var t=e.fromObj.options;e=u.extend({},e,t,{beforeMarkdown:t.beforeMarkdowns.join("\n"),afterMarkdown:t.afterMarkdowns.join("\n")})}this.JSON={},this.container=new d({title:"Demonstration Builder"}),this.render(),this.beforeMarkdownView=new g({container:this,withoutButton:!0,fillerText:e.beforeMarkdown,previewText:"Before demonstration Markdown"}),this.beforeCommandView=new m({container:this,helperText:"The git command(s) to set up the demonstration view (before it is displayed)",initialText:e.beforeCommand||"git checkout -b bugFix"}),this.commandView=new m({container:this,helperText:"The git command(s) to demonstrate to the reader",initialText:e.command||"git commit"}),this.afterMarkdownView=new g({container:this,withoutButton:!0,fillerText:e.afterMarkdown,previewText:"After demonstration Markdown"});var n=a.defer(),r=new p.ConfirmCancelView({deferred:n,destination:this.getDestination()});n.promise.then(u.bind(this.confirmed,this)).fail(u.bind(this.cancelled,this)).done()},testView:function(){var t=e("../views/multiView").MultiView;new t({childViews:[{type:"GitDemonstrationView",options:this.getExportObj()}]})},getExportObj:function(){return{beforeMarkdowns:this.beforeMarkdownView.exportToArray(),afterMarkdowns:this.afterMarkdownView.exportToArray(),command:this.commandView.getText(),beforeCommand:this.beforeCommandView.getText()}},confirmed:function(){this.die(),this.deferred.resolve(this.getExportObj())},cancelled:function(){this.die(),this.deferred.resolve()},getInsideElement:function(){return this.$(".insideBuilder")[0]}}),w=v.extend({tagName:"div",className:"multiViewBuilder box vertical",template:u.template($("#multi-view-builder").html()),typeToConstructor:{ModalAlert:g,GitDemonstrationView:b},events:{"click div.deleteButton":"deleteOneView","click div.testButton":"testOneView","click div.editButton":"editOneView","click div.testEntireView":"testEntireView","click div.addView":"addView","click div.saveView":"saveView","click div.cancelView":"cancel"},initialize:function(e){e=e||{},this.deferred=e.deferred||a.defer(),this.multiViewJSON=e.multiViewJSON||{},this.JSON={views:this.getChildViews(),supportedViews:u.keys(this.typeToConstructor)},this.container=new d({title:"Build a MultiView!"}),this.render(),this.show()},saveView:function(){this.hide(),this.deferred.resolve(this.multiViewJSON)},cancel:function(){this.hide(),this.deferred.resolve()},addView:function(e){var t=e.target,n=$(t).attr("data-type"),r=a.defer(),i=this.typeToConstructor[n],s=new i({deferred:r});r.promise.then(u.bind(function(){var e={type:n,options:s.getExportObj()};this.addChildViewObj(e)},this)).fail(function(){}).done()},testOneView:function(t){var n=t.target,r=$(n).attr("data-index"),i=this.getChildViews()[r],s=e("../views/multiView").MultiView;new s({childViews:[i]})},testEntireView:function(){var t=e("../views/multiView").MultiView;new t({childViews:this.getChildViews()})},editOneView:function(e){var t=e.target,n=$(t).attr("data-index"),r=$(t).attr("data-type"),i=a.defer(),s=new this.typeToConstructor[r]({deferred:i,fromObj:this.getChildViews()[n]});i.promise.then(u.bind(function(){var e={type:r,options:s.getExportObj()},t=this.getChildViews();t[n]=e,this.setChildViews(t)},this)).fail(function(){}).done()},deleteOneView:function(e){var t=e.target,n=$(t).attr("data-index"),r=this.getChildViews(),i=r.slice(0,n).concat(r.slice(n+1));this.setChildViews(i),this.update()},addChildViewObj:function(e,t){var n=this.getChildViews();n.push(e),this.setChildViews(n),this.update()},setChildViews:function(e){this.multiViewJSON.childViews=e},getChildViews:function(){return this.multiViewJSON.childViews||[]},update:function(){this.JSON.views=this.getChildViews(),this.renderAgain()}});n.MarkdownGrabber=g,n.DemonstrationBuilder=b,n.TextGrabber=m,n.MultiViewBuilder=w,n.MarkdownPresenter=y}),e("/src/js/views/builderViews.js"),e.define("/src/js/views/commandViews.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../util").isBrowser()?a=window.Backbone:a=e("backbone"),f=e("../models/collections").CommandEntryCollection,l=e("../app"),c=e("../models/commandModel").Command,h=e("../models/commandModel").CommandEntry,p=e("../util/errors"),d=p.Warning,v=e("../util"),m=e("../log"),g=e("../util/keyboard"),y=a.View.extend({initialize:function(e){l.getEvents().on("commandSubmittedPassive",this.addToCommandHistory,this),this.commands=new f,this.commands.fetch({success:u.bind(function(){var e=[];this.commands.each(function(t){e.push(t)}),e.reverse(),this.commands.reset(),u.each(e,function(e){this.commands.add(e)},this)},this)}),this.index=-1,this.commandParagraph=this.$("#prompt p.command")[0],this.commandCursor=this.$("#prompt span.cursor")[0],this.focus(),l.getEvents().on("rollupCommands",this.rollupCommands,this),l.getEventBaton().stealBaton("keydown",this.onKeyDown,this),l.getEventBaton().stealBaton("keyup",this.onKeyUp,this)},events:{"blur #commandTextField":"hideCursor","focus #commandTextField":"showCursor"},blur:function(){this.hideCursor()},focus:function(){this.$("#commandTextField").focus(),this.showCursor()},hideCursor:function(){this.toggleCursor(!1)},showCursor:function(){this.toggleCursor(!0)},toggleCursor:function(e){$(this.commandCursor).toggleClass("shown",e)},onKeyDown:function(e){var t=e.target;this.updatePrompt(t)},onKeyUp:function(e){this.onKeyDown(e);var t={enter:u.bind(function(){this.submit()},this),up:u.bind(function(){this.commandSelectChange(1)},this),down:u.bind(function(){this.commandSelectChange(-1)},this)},n=g.mapKeycodeToKey(e.which||e.keyCode);t[n]!==undefined&&(e.preventDefault(),t[n](),this.onKeyDown(e))},badHtmlEncode:function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/</g,"&lt;").replace(/ /g,"&nbsp;").replace(/\n/g,"")},updatePrompt:function(e){e=e||{};var t=$("#commandTextField").val(),n=this.badHtmlEncode(t);this.commandParagraph.innerHTML=n,this.cursorUpdate(t.length,e.selectionStart,e.selectionEnd),l.getEvents().trigger("commandScrollDown")},cursorUpdate:function(t,n,r){if(n===undefined||r===undefined)n=Math.max(t-1,0),r=t;var i=e("../util/zoomLevel").detectZoom(),s=10*i,o=22*i,u=$(this.commandParagraph).width(),a=u/s,f=Math.min(Math.max(1,r-n),a),l=String(f*s)+"px",c=String(s*(n%a))+"px",h=String(Math.floor(n/a)*o)+"px";$(this.commandCursor).css({width:l,left:c,top:h})},commandSelectChange:function(e){this.index+=e;if(this.index>=this.commands.length||this.index<0){this.clear(),this.index=-1;return}var t=this.commands.toArray()[this.index].get("text");this.setTextField(t)},clearLocalStorage:function(){this.commands.each(function(e){a.sync("delete",e,function(){})},this)},setTextField:function(e){this.$("#commandTextField").val(e)},clear:function(){this.setTextField("")},submit:function(){var e=this.$("#commandTextField").val().replace("\n","");this.clear(),this.submitCommand(e),this.index=-1},rollupCommands:function(e){var t=this.commands.toArray().slice(1,Number(e)+1);t.reverse();var n="";u.each(t,function(e){n+=e.get("text")+";"},this);var r=new h({text:n});this.commands.unshift(r),a.sync("create",r,function(){})},addToCommandHistory:function(e){var t=e.length&&this.index===-1||e.length&&this.index!==-1&&this.commands.toArray()[this.index].get("text")!==e;if(!t)return;var n=new h({text:e});this.commands.unshift(n),a.sync("create",n,function(){}),this.commands.length>100&&this.clearLocalStorage(),m.commandEntered(e)},submitCommand:function(e){l.getEventBaton().trigger("commandSubmitted",e)}}),b=a.View.extend({tagName:"div",model:c,template:u.template($("#command-template").html()),events:{click:"clicked"},clicked:function(e){},initialize:function(){this.model.bind("change",this.wasChanged,this),this.model.bind("destroy",this.remove,this)},wasChanged:function(e,t){var n=t.changes,r=u.keys(n);u.difference(r,["status"]).length===0?this.updateStatus():this.render()},updateStatus:function(){var e=["inqueue","processing","finished"],t={};u.each(e,function(e){t[e]=!1}),t[this.model.get("status")]=!0;var n=this.$("p.commandLine");u.each(t,function(e,t){n.toggleClass(t,e)})},render:function(){var e=u.extend({resultType:"",result:"",formattedWarnings:this.model.getFormattedWarnings()},this.model.toJSON());return this.$el.html(this.template(e)),this},remove:function(){$(this.el).hide()}}),w=a.View.extend({initialize:function(e){this.collection=e.collection,this.collection.on("add",this.addOne,this),this.collection.on("reset",this.addAll,this),this.collection.on("all",this.render,this),this.collection.on("change",this.scrollDown,this),l.getEvents().on("commandScrollDown",this.scrollDown,this),l.getEvents().on("clearOldCommands",this.clearOldCommands,this)},addWarning:function(e){var t=new d({msg:e}),n=new c({error:t,rawStr:"Warning:"});this.collection.add(n)},clearOldCommands:function(){var e=[];this.collection.each(function(t){t.get("status")!=="inqueue"&&t.get("status")!=="processing"&&e.push(t)},this),u.each(e,function(e){e.destroy()},this),this.scrollDown()},scrollDown:function(){var e=$("#commandDisplay")[0],t=$("#terminal")[0],n=e.clientHeight>t.clientHeight||$(window).height()<e.clientHeight;$(t).toggleClass("scrolling",n),n&&(t.scrollTop=t.scrollHeight)},addOne:function(e){var t=new b({model:e});this.$("#commandDisplay").append(t.render().el),this.scrollDown()},addAll:function(){this.collection.each(this.addOne)}});n.CommandPromptView=y,n.CommandLineHistoryView=w}),e("/src/js/views/commandViews.js"),e.define("/src/js/views/gitDemonstrationView.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?window.Backbone:e("backbone"),l=e("../util"),c=e("../util/keyboard").KeyboardListener,h=e("../models/commandModel").Command,p=e("../views").ModalTerminal,d=e("../views").ContainedBase,v=e("../visuals/visualization").Visualization,m=e("../git/headless"),g=d.extend({tagName:"div",className:"gitDemonstrationView box horizontal",template:u.template($("#git-demonstration-view").html()),events:{"click div.command > p.uiButton":"positive"},initialize:function(t){t=t||{},this.options=t,this.JSON=u.extend({beforeMarkdowns:["## Git Commits","","Awesome!"],command:"git commit",afterMarkdowns:["Now you have seen it in action","","Go ahead and try the level!"]},t);var n=function(t){return e("markdown").markdown.toHTML(t.join("\n"))};this.JSON.beforeHTML=n(this.JSON.beforeMarkdowns),this.JSON.afterHTML=n(this.JSON.afterMarkdowns),this.container=new p({title:t.title||"Git 示例"}),this.render(),this.checkScroll(),this.navEvents=u.clone(f.Events),this.navEvents.on("positive",this.positive,this),this.navEvents.on("negative",this.negative,this),this.keyboardListener=new c({events:this.navEvents,aliasMap:{enter:"positive",right:"positive",left:"negative"},wait:!0}),this.visFinished=!1,this.initVis(),t.wait||this.show()},receiveMetaNav:function(e,t){var n=this;e.navEvents.on("positive",this.positive,this),this.metaContainerView=t},checkScroll:function(){var e=this.$("div.demonstrationText").children(),t=u.map(e,function(e){return e.clientHeight}),n=u.reduce(t,function(e,t){return e+t});n<this.$("div.demonstrationText").height()&&this.$("div.demonstrationText").addClass("noLongText")},dispatchBeforeCommand:function(){if(!this.options.beforeCommand)return;var e=a.defer();m.getTreeQuick(this.options.beforeCommand,e),e.promise.then(u.bind(function(e){console.log("the before command i got",this.options.beforeCommand),console.log(e,"is what i got"),this.mainVis.gitEngine.loadTree(e),this.mainVis.gitVisuals.refreshTreeHarsh()},this))},takeControl:function(){this.hasControl=!0,this.keyboardListener.listen(),this.metaContainerView&&this.metaContainerView.lock()},releaseControl:function(){if(!this.hasControl)return;this.hasControl=!1,this.keyboardListener.mute(),this.metaContainerView&&this.metaContainerView.unlock()},reset:function(){this.mainVis.reset(),this.dispatchBeforeCommand(),this.demonstrated=!1,this.$el.toggleClass("demonstrated",!1),this.$el.toggleClass("demonstrating",!1)},positive:function(){if(this.demonstrated||!this.hasControl)return;this.demonstrated=!0,this.demonstrate()},demonstrate:function(){this.$el.toggleClass("demonstrating",!0);var e=a.defer();this.dispatchCommand(this.JSON.command,e),e.promise.then(u.bind(function(){this.$el.toggleClass("demonstrating",!1),this.$el.toggleClass("demonstrated",!0),this.releaseControl()},this))},negative:function(e){if(this.$el.hasClass("demonstrating"))return;this.keyboardListener.passEventBack(e)},dispatchCommand:function(e,t){var n=[];l.splitTextCommand(e,function(e){n.push(new h({rawStr:e}))},this);var r=a.defer(),i=r.promise;u.each(n,function(e,t){i=i.then(u.bind(function(){var t=a.defer();return console.log("dispatching",e),this.mainVis.gitEngine.dispatch(e,t),t.promise},this)),i=i.then(function(){return a.delay(300)})},this),i=i.then(function(){t.resolve()}),r.resolve()},tearDown:function(){this.mainVis.tearDown(),g.__super__.tearDown.apply(this)},hide:function(){this.releaseControl(),this.reset(),this.visFinished&&(this.mainVis.setTreeIndex(-1),this.mainVis.setTreeOpacity(0)),this.shown=!1,g.__super__.hide.apply(this)},show:function(){this.takeControl(),this.visFinished&&setTimeout(u.bind(function(){this.shown&&(this.mainVis.setTreeIndex(300),this.mainVis.showHarsh())},this),this.getAnimationTime()*1),this.shown=!0,g.__super__.show.apply(this)},die:function(){if(!this.visFinished)return;g.__super__.die.apply(this)},initVis:function(){this.mainVis=new v({el:this.$("div.visHolder div.visHolderInside")[0],noKeyboardInput:!0,noClick:!0,smallCanvas:!0,zIndex:-1}),this.mainVis.customEvents.on("paperReady",u.bind(function(){this.visFinished=!0,this.dispatchBeforeCommand(),this.shown&&this.show()},this))}});n.GitDemonstrationView=g}),e("/src/js/views/gitDemonstrationView.js"),e.define("/src/js/views/index.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?window.Backbone:e("backbone"),l=e("../app"),c=e("../intl"),h=e("../log"),p=e("../util/constants"),d=e("../util/keyboard").KeyboardListener,v=e("../util/errors").GitError,m=f.View.extend({getDestination:function(){return this.destination||this.container.getInsideElement()},tearDown:function(){this.$el.remove(),this.container&&this.container.tearDown()},renderAgain:function(e){e=e||this.template(this.JSON),this.$el.html(e)},render:function(e){this.renderAgain(e);var t=this.getDestination();$(t).append(this.el)}}),g=m.extend({resolve:function(){this.deferred.resolve()},reject:function(){this.deferred.reject()}}),y=m.extend({positive:function(){this.navEvents.trigger("positive")},exit:function(){this.navEvents.trigger("exit")},negative:function(){this.navEvents.trigger("negative")}}),b=m.extend({getAnimationTime:function(){return 700},show:function(){this.container.show()},hide:function(){this.container.hide()},die:function(){this.hide(),setTimeout(u.bind(function(){this.tearDown()},this),this.getAnimationTime()*1.1)}}),w=b.extend({tagName:"a",className:"generalButton uiButton",template:u.template($("#general-button").html()),events:{click:"click"},initialize:function(e){e=e||{},this.navEvents=e.navEvents||u.clone(f.Events),this.destination=e.destination,this.destination||(this.container=new T),this.JSON={buttonText:e.buttonText||"General Button",wantsWrapper:e.wantsWrapper!==undefined?e.wantsWrapper:!0},this.render(),this.container&&!e.wait&&this.show()},click:function(){this.clickFunc||(this.clickFunc=u.throttle(u.bind(this.sendClick,this),500)),this.clickFunc()},sendClick:function(){this.navEvents.trigger("click")}}),E=g.extend({tagName:"div",className:"confirmCancelView box horizontal justify",template:u.template($("#confirm-cancel-template").html()),events:{"click .confirmButton":"resolve","click .cancelButton":"reject"},initialize:function(e){if(!e.destination)throw new Error("needmore");this.destination=e.destination,this.deferred=e.deferred||a.defer(),this.JSON={confirm:e.confirm||"Confirm",cancel:e.cancel||"Cancel"},this.render()}}),S=y.extend({tagName:"div",className:"leftRightView box horizontal center",template:u.template($("#left-right-template").html()),events:{"click .left":"negative","click .exit":"exit","click .right":"positive"},exit:function(){this.pipeEvents.trigger("exit"),S.__super__.exit.apply(this)},positive:function(){this.pipeEvents.trigger("positive"),S.__super__.positive.apply(this)},negative:function(){this.pipeEvents.trigger("negative"),S.__super__.negative.apply(this)},initialize:function(e){if(!e.destination||!e.events)throw new Error("needmore");this.destination=e.destination,this.pipeEvents=e.events,this.navEvents=u.clone(f.Events),this.JSON={showLeft:e.showLeft===undefined?!0:e.showLeft,lastNav:e.lastNav===undefined?!1:e.lastNav},this.render()}}),x=f.View.extend({tagName:"div",className:"modalView box horizontal center transitionOpacityLinear",template:u.template($("#modal-view-template").html()),getAnimationTime:function(){return 700},initialize:function(e){this.shown=!1,this.render()},render:function(){this.$el.html(this.template({})),$("body").append(this.el)},stealKeyboard:function(){l.getEventBaton().stealBaton("keydown",this.onKeyDown,this),l.getEventBaton().stealBaton("keyup",this.onKeyUp,this),l.getEventBaton().stealBaton("windowFocus",this.onWindowFocus,this),l.getEventBaton().stealBaton("documentClick",this.onDocumentClick,this),$("#commandTextField").blur()},releaseKeyboard:function(){l.getEventBaton().releaseBaton("keydown",this.onKeyDown,this),l.getEventBaton().releaseBaton("keyup",this.onKeyUp,this),l.getEventBaton().releaseBaton("windowFocus",this.onWindowFocus,this),l.getEventBaton().releaseBaton("documentClick",this.onDocumentClick,this),l.getEventBaton().trigger("windowFocus")},onWindowFocus:function(e){},onDocumentClick:function(e){},onKeyDown:function(e){e.preventDefault()},onKeyUp:function(e){e.preventDefault()},show:function(){this.toggleZ(!0),s.nextTick(u.bind(function(){this.toggleShow(!0)},this))},hide:function(){this.toggleShow(!1),setTimeout(u.bind(function(){this.shown||this.toggleZ(!1)},this),this.getAnimationTime())},getInsideElement:function(){return this.$(".contentHolder")},toggleShow:function(e){if(this.shown===e)return;e?this.stealKeyboard():this.releaseKeyboard(),this.shown=e,this.$el.toggleClass("show",e)},toggleZ:function(e){this.$el.toggleClass("inFront",e)},tearDown:function(){this.$el.html(""),$("body")[0].removeChild(this.el)}}),T=b.extend({tagName:"div",className:"modalTerminal box flex1",template:u.template($("#terminal-window-template").html()),events:{"click div.inside":"onClick"},initialize:function(e){e=e||{},this.navEvents=e.events||u.clone(f.Events),this.container=new x,this.JSON={title:e.title||"Heed This Warning!"},this.render()},onClick:function(){this.navEvents.trigger("click")},getInsideElement:function(){return this.$(".inside")}}),N=b.extend({tagName:"div",template:u.template($("#modal-alert-template").html()),initialize:function(e){e=e||{},this.JSON={title:e.title||"Something to say",text:e.text||"Here is a paragraph",markdown:e.markdown},e.markdowns&&(this.JSON.markdown=e.markdowns.join("\n")),this.container=new T({title:"Alert!"}),this.render(),e.wait||this.show()},render:function(){var t=this.JSON.markdown?e("markdown").markdown.toHTML(this.JSON.markdown):this.template(this.JSON);N.__super__.render.apply(this,[t])}}),C=f.View.extend({initialize:function(e){e=e||{},this.deferred=e.deferred||a.defer(),this.modalAlert=new N(u.extend({},{markdown:"#you sure?"},e));var t=a.defer();this.buttonDefer=t,this.confirmCancel=new E({deferred:t,destination:this.modalAlert.getDestination()}),t.promise.then(this.deferred.resolve).fail(this.deferred.reject).done(u.bind(function(){this.close()},this)),this.navEvents=u.clone(f.Events),this.navEvents.on("positive",this.positive,this),this.navEvents.on("negative",this.negative,this),this.keyboardListener=new d({events:this.navEvents,aliasMap:{enter:"positive",esc:"negative"}}),e.wait||this.modalAlert.show()},positive:function(){this.buttonDefer.resolve()},negative:function(){this.buttonDefer.reject()},getAnimationTime:function(){return 700},show:function(){this.modalAlert.show()},hide:function(){this.modalAlert.hide()},getPromise:function(){return this.deferred.promise},close:function(){this.keyboardListener.mute(),this.modalAlert.die()}}),k=C.extend({initialize:function(t){t=t||{};var n=t.nextLevel?c.getName(t.nextLevel):"",r=c.getDialog(e("../dialogs/nextLevel"))[0].options.markdowns,i=r.join("\n");i=c.template(i,{numCommands:t.numCommands,best:t.best}),t.numCommands<=t.best?i=i+"\n\n"+c.str("finish-dialog-win"):i=i+"\n\n"+c.str("finish-dialog-lose",{best:t.best}),i+="\n\n",t.nextLevel?i+=c.str("finish-dialog-next",{nextLevel:n}):i+=c.str("finish-dialog-finished"),t=u.extend({},t,{markdown:i}),k.__super__.initialize.apply(this,[t])}}),L=f.View.extend({initialize:function(){this.$body=$("body"),l.getEvents().on("vcsModeChange",this.updateMode,this)},updateMode:function(e){e=e||{};var t=e.mode==="git";this.$body.toggleClass("gitMode",t),this.$body.toggleClass("hgMode",!t)}}),A=f.View.extend({initialize:function(e){this.grabBatons(),this.modalAlert=new N({markdowns:this.markdowns}),this.modalAlert.show()},grabBatons:function(){l.getEventBaton().stealBaton(this.eventBatonName,this.batonFired,this)},releaseBatons:function(){l.getEventBaton().releaseBaton(this.eventBatonName,this.batonFired,this)},finish:function(){this.releaseBatons(),this.modalAlert.die()}}),O=A.extend({initialize:function(e){this.eventBatonName="windowSizeCheck",this.markdowns=["## That window size is not supported :-/","Please resize your window back to a supported size","","(and of course, pull requests to fix this are appreciated :D)"],O.__super__.initialize.apply(this,[e])},batonFired:function(e){e.w>p.VIEWPORT.minWidth&&e.h>p.VIEWPORT.minHeight&&this.finish()}}),M=A.extend({initialize:function(e){if(!e||!e.level)throw new Error("need level");this.eventBatonName="zoomChange",this.markdowns=["## That zoom level of "+e.level+" is not supported :-/","Please zoom back to a supported zoom level with Ctrl + and Ctrl -","","(and of course, pull requests to fix this are appreciated :D)"],M.__super__.initialize.apply(this,[e])},batonFired:function(e){e<=p.VIEWPORT.maxZoom&&e>=p.VIEWPORT.minZoom&&this.finish()}}),_=m.extend({tagName:"div",className:"levelToolbarHolder",template:u.template($("#level-toolbar-template").html()),initialize:function(e){e=e||{},this.JSON={name:e.name||"Some level! (unknown name)"},this.beforeDestination=$($("#commandLineHistory div.toolbar")[0]),this.render(),e.wait||s.nextTick(u.bind(this.show,this))},getAnimationTime:function(){return 700},render:function(){var e=this.template(this.JSON);this.$el.html(e),this.beforeDestination.after(this.el)},die:function(){this.hide(),setTimeout(u.bind(function(){this.tearDown()},this),this.getAnimationTime())},hide:function(){this.$("div.toolbar").toggleClass("hidden",!0)},show:function(){this.$("div.toolbar").toggleClass("hidden",!1)}}),D=m.extend({tagName:"div",className:"helperBar transitionAll",template:u.template($("#helper-bar-template").html()),events:{"click a":"onClick"},onClick:function(e){var t=e.target,n=$(t).attr("data-id"),r="on"+n[0].toUpperCase()+n.slice(1)+"Click";this[r].call(this)},show:function(){this.$el.toggleClass("show",!0)},hide:function(){this.$el.toggleClass("show",!1),this.deferred&&this.deferred.resolve()},getItems:function(){return[]},setupChildren:function(){},fireCommand:function(e){l.getEventBaton().trigger("commandSubmitted",e)},showDeferMe:function(e){this.hide();var t=a.defer();e.deferred=t,t.promise.then(u.bind(function(){this.show()},this)),e.show()},onExitClick:function(){this.hide()},initialize:function(e){e=e||{},this.destination=$("body"),this.JSON={items:this.getItems()},this.render(),this.setupChildren(),e.wait||this.show()}}),P=D.extend({getItems:function(){return[{text:"Git Branching",id:"english"},{text:"日本語版リポジトリ",id:"japanese"},{text:"Git 브랜치 배우기",id:"korean"},{text:"学习Git分支",id:"chinese"},{text:"français",id:"french"},{icon:"signout",id:"exit"}]},fireCommand:function(){h.viewInteracted("intlSelect"),D.prototype.fireCommand.apply(this,arguments)},onJapaneseClick:function(){this.fireCommand("locale ja; levels"),this.hide()},onEnglishClick:function(){this.fireCommand("locale en_US; levels"),this.hide()},onKoreanClick:function(){this.fireCommand("locale ko; levels"),this.hide()},onFrenchClick:function(){this.fireCommand("locale fr_FR; levels"),this.hide()},onChineseClick:function(){this.fireCommand("locale zh_CN; levels"),this.hide()}}),H=D.extend({getItems:function(){return[{text:"Levels",id:"levels"},{text:"Reset",id:"reset"},{text:"Undo",id:"undo"},{text:"Objective",id:"objective"},{text:"Help",id:"help"},{icon:"signout",id:"exit"}]},fireCommand:function(){h.viewInteracted("helperBar"),D.prototype.fireCommand.apply(this,arguments)},onObjectiveClick:function(){this.fireCommand("objective")},onLevelsClick:function(){this.fireCommand("levels")},onResetClick:function(){this.fireCommand("reset")},onUndoClick:function(){this.fireCommand("undo")},onHelpClick:function(){this.fireCommand("help general; git help")}}),B=D.extend({getItems:function(){return[{icon:"question-sign",id:"commands"},{icon:"globe",id:"intl"},{newPageLink:!0,icon:"facebook",id:"fb",href:"https://www.facebook.com/LearnGitBranching"}]},onFbClick:function(){h.viewInteracted("fbPageLink")},onIntlClick:function(){this.showDeferMe(this.intlHelper),h.viewInteracted("openIntlBar")},onCommandsClick:function(){this.showDeferMe(this.commandsHelper),h.viewInteracted("openCommandsBar")},setupChildren:function(){this.commandsHelper=new H({wait:!0}),this.intlHelper=new P({wait:!0})}}),j=m.extend({tagName:"div",className:"canvasTerminalHolder box flex1",template:u.template($("#terminal-window-bare-template").html()),events:{"click div.wrapper":"onClick"},initialize:function(e){e=e||{},this.destination=$("body"),this.JSON={title:e.title||c.str("goal-to-reach"),text:e.text||c.str("hide-goal")},this.render(),this.inDom=!0,e.additionalClass&&this.$el.addClass(e.additionalClass)},getAnimationTime:function(){return 700},onClick:function(){this.die()},die:function(){this.slideOut(),this.inDom=!1,setTimeout(u.bind(function(){this.tearDown()},this),this.getAnimationTime())},slideOut:function(){this.slideToggle(!0)},slideIn:function(){this.slideToggle(!1)},slideToggle:function(e){this.$("div.terminal-window-holder").toggleClass("slideOut",e)},getCanvasLocation:function(){return this.$("div.inside")[0]}});n.BaseView=m,n.BackgroundView=L,n.GeneralButton=w,n.ModalView=x,n.ModalTerminal=T,n.ModalAlert=N,n.ContainedBase=b,n.ConfirmCancelView=E,n.LeftRightView=S,n.ZoomAlertWindow=M,n.ConfirmCancelTerminal=C,n.WindowSizeAlertWindow=O,n.MainHelperBar=B,n.CanvasTerminalHolder=j,n.LevelToolbar=_,n.NextLevelConfirm=k}),e("/src/js/views/index.js"),e.define("/src/js/views/levelDropdownView.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?window.Backbone:e("backbone"),l=e("../util"),c=e("../intl"),h=e("../log"),p=e("../util/keyboard").KeyboardListener,d=e("../app"),v=e("../views").ModalTerminal,m=e("../views").ContainedBase,g=e("../views").BaseView,y=m.extend({tagName:"div",className:"levelDropdownView box vertical",template:u.template($("#level-dropdown-view").html()),initialize:function(e){e=e||{},this.JSON={},this.navEvents=u.clone(f.Events),this.navEvents.on("clickedID",u.debounce(u.bind(this.loadLevelID,this),300,!0)),this.navEvents.on("negative",this.negative,this),this.navEvents.on("positive",this.positive,this),this.navEvents.on("left",this.left,this),this.navEvents.on("right",this.right,this),this.navEvents.on("up",this.up,this),this.navEvents.on("down",this.down,this),this.keyboardListener=new p({events:this.navEvents,aliasMap:{esc:"negative",enter:"positive"},wait:!0}),this.sequences=d.getLevelArbiter().getSequences(),this.sequenceToLevels=d.getLevelArbiter().getSequenceToLevels(),this.container=new v({title:c.str("select-a-level")}),this.render(),d.getEvents().on("resetMapSolved",this.render,this),d.getEvents().on("localeChanged",this.render,this),e.wait||this.show()},render:function(){y.__super__.render.apply(this,arguments),this.buildSequences()},positive:function(){if(!this.selectedID)return;this.loadLevelID(this.selectedID)},left:function(){if(this.turnOnKeyboardSelection())return;this.leftOrRight(-1)},leftOrRight:function(e){this.deselectIconByID(this.selectedID),this.selectedIndex=this.wrapIndex(this.selectedIndex+e,this.getCurrentSequence()),this.selectedID=this.getSelectedID(),this.selectIconByID(this.selectedID)},right:function(){if(this.turnOnKeyboardSelection())return;this.leftOrRight(1)},up:function(){if(this.turnOnKeyboardSelection())return;this.selectedSequence=this.getPreviousSequence(),this.downOrUp()},down:function(){if(this.turnOnKeyboardSelection())return;this.selectedSequence=this.getNextSequence(),this.downOrUp()},downOrUp:function(){this.selectedIndex=this.boundIndex(this.selectedIndex,this.getCurrentSequence()),this.deselectIconByID(this.selectedID),this.selectedID=this.getSelectedID(),this.selectIconByID(this.selectedID)},turnOnKeyboardSelection:function(){return this.selectedID?!1:(this.selectFirst(),!0)},turnOffKeyboardSelection:function(){if(!this.selectedID)return;this.deselectIconByID(this.selectedID),this.selectedID=undefined,this.selectedIndex=undefined,this.selectedSequence=undefined},wrapIndex:function(e,t){return e=e>=t.length?0:e,e=e<0?t.length-1:e,e},boundIndex:function(e,t){return e=e>=t.length?t.length-1:e,e=e<0?0:e,e},getNextSequence:function(){var e=this.getSequenceIndex(this.selectedSequence),t=this.wrapIndex(e+1,this.sequences);return this.sequences[t]},getPreviousSequence:function(){var e=this.getSequenceIndex(this.selectedSequence),t=this.wrapIndex(e-1,this.sequences);return this.sequences[t]},getSequenceIndex:function(e){var t=this.sequences.indexOf(e);if(t<0)throw new Error("didnt find");return t},getIndexForID:function(e){return d.getLevelArbiter().getLevel(e).index},selectFirst:function(){var e=this.sequenceToLevels[this.sequences[0]][0].id;this.selectIconByID(e),this.selectedIndex=0,this.selectedSequence=this.sequences[0]},getCurrentSequence:function(){return this.sequenceToLevels[this.selectedSequence]},getSelectedID:function(){return this.sequenceToLevels[this.selectedSequence][this.selectedIndex].id},selectIconByID:function(e){this.toggleIconSelect(e,!0)},deselectIconByID:function(e){this.toggleIconSelect(e,!1)},toggleIconSelect:function(e,t){this.selectedID=e;var n="#levelIcon-"+e;$(n).toggleClass("selected",t)},negative:function(){this.hide()},testOption:function(e){return this.currentCommand&&(new RegExp("--"+e)).test(this.currentCommand.get("rawStr"))},show:function(e,t){this.currentCommand=t,this.updateSolvedStatus(),this.showDeferred=e,this.keyboardListener.listen(),y.__super__.show.apply(this)},hide:function(){this.showDeferred&&this.showDeferred.resolve(),this.showDeferred=undefined,this.keyboardListener.mute(),this.turnOffKeyboardSelection(),y.__super__.hide.apply(this)},loadLevelID:function(e){if(!this.testOption("noOutput")){d.getEventBaton().trigger("commandSubmitted","level "+e);var t=d.getLevelArbiter().getLevel(e),n=t.name.en_US;h.levelSelected(n)}this.hide()},updateSolvedStatus:function(){u.each(this.seriesViews,function(e){e.updateSolvedStatus()},this)},buildSequences:function(){this.seriesViews=[],u.each(this.sequences,function(e){this.seriesViews.push(new b({destination:this.$el,name:e,navEvents:this.navEvents}))},this)}}),b=g.extend({tagName:"div",className:"seriesView box flex1 vertical",template:u.template($("#series-view").html()),events:{"click div.levelIcon":"click","mouseenter div.levelIcon":"enterIcon","mouseleave div.levelIcon":"leaveIcon"},initialize:function(e){this.name=e.name||"intro",this.navEvents=e.navEvents,this.info=d.getLevelArbiter().getSequenceInfo(this.name),this.levels=d.getLevelArbiter().getLevelsInSequence(this.name),this.levelIDs=[],u.each(this.levels,function(e){this.levelIDs.push(e.id)},this),this.destination=e.destination,this.JSON={displayName:c.getIntlKey(this.info,"displayName"),about:c.getIntlKey(this.info,"about")||"&nbsp;",ids:this.levelIDs},this.render(),this.updateSolvedStatus()},updateSolvedStatus:function(){var e=this.$("div.levelIcon").each(function(e,t){var n=$(t).attr("data-id");$(t).toggleClass("solved",d.getLevelArbiter().isLevelSolved(n))})},getEventID:function(e){var t=e.target;return $(t).attr("data-id")},resetAbout:function(){this.$("p.about").text(c.getIntlKey(this.info,"about")).css("font-style","inherit")},setAbout:function(e){this.$("p.about").text(e).css("font-style","italic")},enterIcon:function(e){var t=this.getEventID(e),n=d.getLevelArbiter().getLevel(t);this.setAbout(c.getName(n))},leaveIcon:function(){this.resetAbout()},click:function(e){var t=this.getEventID(e);this.navEvents.trigger("clickedID",t)}});n.LevelDropdownView=y}),e("/src/js/views/levelDropdownView.js"),e.define("/src/js/views/multiView.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("../util").isBrowser()?window.Backbone:e("backbone"),l=e("../views").ModalTerminal,c=e("../views").ContainedBase,h=e("../views").ConfirmCancelView,p=e("../views").LeftRightView,d=e("../views").ModalAlert,v=e("../views/gitDemonstrationView").GitDemonstrationView,m=e("../views/builderViews"),g=m.MarkdownPresenter,y=e("../util/keyboard").KeyboardListener,b=e("../util/errors").GitError,w=f.View.extend({tagName:"div",className:"multiView",navEventDebounce:550,deathTime:700,typeToConstructor:{ModalAlert:d,GitDemonstrationView:v,MarkdownPresenter:g},initialize:function(e){e=e||{},this.childViewJSONs=e.childViews||[{type:"ModalAlert",options:{markdown:"Woah wtf!!"}},{type:"GitDemonstrationView",options:{command:"git checkout -b side; git commit; git commit"}},{type:"ModalAlert",options:{markdown:"Im second"}}],this.deferred=e.deferred||a.defer(),this.childViews=[],this.currentIndex=0,this.navEvents=u.clone(f.Events),this.navEvents.on("negative",this.getNegFunc(),this),this.navEvents.on("positive",this.getPosFunc(),this),this.navEvents.on("quit",this.finish,this),this.navEvents.on("exit",this.finish,this),this.keyboardListener=new y({events:this.navEvents,aliasMap:{left:"negative",right:"positive",enter:"positive",esc:"quit"}}),this.render(),e.wait||this.start()},onWindowFocus:function(){},getAnimationTime:function(){return 700},getPromise:function(){return this.deferred.promise},getPosFunc:function(){return u.debounce(u.bind(function(){this.navForward()},this),this.navEventDebounce,!0)},getNegFunc:function(){return u.debounce(u.bind(function(){this.navBackward()},this),this.navEventDebounce,!0)},lock:function(){this.locked=!0},unlock:function(){this.locked=!1},navForward:function(){if(this.locked)return;if(this.currentIndex===this.childViews.length-1){this.hideViewIndex(this.currentIndex),this.finish();return}this.navIndexChange(1)},navBackward:function(){if(this.currentIndex===0)return;this.navIndexChange(-1)},navIndexChange:function(e){this.hideViewIndex(this.currentIndex),this.currentIndex+=e,this.showViewIndex(this.currentIndex)},hideViewIndex:function(e){this.childViews[e].hide()},showViewIndex:function(e){this.childViews[e].show()},finish:function(){this.keyboardListener.mute(),u.each(this.childViews,function(e){e.die()}),this.deferred.resolve()},start:function(){this.showViewIndex(this.currentIndex)},createChildView:function(e){var t=e.type;if(!this.typeToConstructor[t])throw new Error('no constructor for type "'+t+'"');var n=new this.typeToConstructor[t](u.extend({},e.options,{wait:!0}));return n},addNavToView:function(e,t){var n=new p({events:this.navEvents,destination:e.getDestination(),showLeft:t!==0,lastNav:t===this.childViewJSONs.length-1});e.receiveMetaNav&&e.receiveMetaNav(n,this)},render:function(){u.each(this.childViewJSONs,function(e,t){var n=this.createChildView(e);this.childViews.push(n),this.addNavToView(n,t)},this)}});n.MultiView=w}),e("/src/js/views/multiView.js"),e.define("/src/js/views/rebaseView.js",function(e,t,n,r,i,s,o){var u=e("../util/errors").GitError,a=e("underscore"),f=e("q"),l=e("../util").isBrowser()?window.Backbone:e("backbone"),c=e("../views").ModalTerminal,h=e("../views").ContainedBase,p=e("../views").ConfirmCancelView,d=e("../views").LeftRightView,v=h.extend({tagName:"div",template:a.template($("#interactive-rebase-template").html()),initialize:function(e){this.deferred=e.deferred,this.rebaseMap={},this.entryObjMap={},this.options=e,this.rebaseEntries=new g,e.toRebase.reverse(),a.each(e.toRebase,function(e){var t=e.get("id");this.rebaseMap[t]=e,this.entryObjMap[t]=new m({id:t}),this.rebaseEntries.add(this.entryObjMap[t])},this),this.container=new c({title:"Interactive Rebase"}),this.render(),this.show(),e.aboveAll&&$("#canvasHolder").css("display","none")},restoreVis:function(){$("#canvasHolder").css("display","inherit")},confirm:function(){this.die(),this.options.aboveAll&&this.restoreVis();var e=[];this.$("ul.rebaseEntries li").each(function(t,n){e.push(n.id)});var t=[];a.each(e,function(e){this.entryObjMap[e].get("pick")&&t.unshift(this.rebaseMap[e])},this),t.reverse(),this.deferred.resolve(t),this.$el.html("")},render:function(){var e={num:a.keys(this.rebaseMap).length},t=this.container.getInsideElement();this.$el.html(this.template(e)),$(t).append(this.el);var n=this.$("ul.rebaseEntries");this.rebaseEntries.each(function(e){new y({el:n,model:e})},this),n.sortable({axis:"y",placeholder:"rebaseEntry transitionOpacity ui-state-highlight",appendTo:"parent"}),this.makeButtons()},cancel:function(){this.hide(),this.options.aboveAll&&this.restoreVis(),this.deferred.resolve([])},makeButtons:function(){var e=f.defer();e.promise.then(a.bind(function(){this.confirm()},this)).fail(a.bind(function(){this.cancel()},this)).done(),new p({destination:this.$(".confirmCancel"),deferred:e})}}),m=l.Model.extend({defaults:{pick:!0},toggle:function(){this.set("pick",!this.get("pick"))}}),g=l.Collection.extend({model:m}),y=l.View.extend({tagName:"li",template:a.template($("#interactive-rebase-entry-template").html()),toggle:function(){this.model.toggle(),this.listEntry.toggleClass("notPicked",!this.model.get("pick"))},initialize:function(e){this.render()},render:function(){var e=this.model.toJSON();this.$el.append(this.template(this.model.toJSON())),this.listEntry=this.$el.children(":last"),this.listEntry.delegate("#toggleButton","click",a.bind(function(){this.toggle()},this))}});n.InteractiveRebaseView=v}),e("/src/js/views/rebaseView.js"),e.define("/src/js/visuals/animation/animationFactory.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=e("q"),l=e("./index").Animation,c=e("./index").PromiseAnimation,h=e("../../util/constants").GRAPHICS,p={},d=function(e,t){var n=h.defaultAnimationTime*1,r=n*2,i=function(){e.refreshTree(n),t.setBirth(),t.parentInFront(),e.visBranchesFront(),t.animateUpdatedPosition(r,"bounce"),t.animateOutgoingEdges(n)};return{animation:i,duration:Math.max(n,r)}},v=function(e,t){var n=h.defaultAnimationTime*.66,r=n*2;return{animation:function(){e.highlightTo(t,r,"easeInOut")},duration:r*1.5}};p.genCommitBirthAnimation=function(e,t,n){if(!e)throw new Error("Need animation queue to add closure to!");var r=t.get("visNode"),i=d(n,r);e.add(new l({closure:i.animation,duration:i.duration}))},p.genCommitBirthPromiseAnimation=function(e,t){var n=e.get("visNode");return new c(d(t,n))},p.highlightEachWithPromise=function(e,t,n){return u.each(t,function(t){e=e.then(u.bind(function(){return this.playHighlightPromiseAnimation(t,n)},this))},this),e},p.playCommitBirthPromiseAnimation=function(e,t){var n=this.genCommitBirthPromiseAnimation(e,t);return n.play(),n.getPromise()},p.playRefreshAnimationAndFinish=function(e,t){var n=new c({closure:function(){e.refreshTree()}});n.play(),t.thenFinish(n.getPromise())},p.genRefreshPromiseAnimation=function(e){return new c({closure:function(){e.refreshTree()}})},p.playRefreshAnimationSlow=function(e){var t=h.defaultAnimationTime;return this.playRefreshAnimation(e,t*2)},p.playRefreshAnimation=function(e,t){var n=new c({duration:t,closure:function(){e.refreshTree(t)}});return n.play(),n.getPromise()},p.refreshTree=function(e,t){e.add(new l({closure:function(){t.refreshTree()}}))},p.genHighlightPromiseAnimation=function(e,t){var n=t.get("visBranch")||t.get("visNode"),r=e.get("visNode");return new c(v(r,n))},p.playHighlightPromiseAnimation=function(e,t){var n=this.genHighlightPromiseAnimation(e,t);return n.play(),n.getPromise()},p.getDelayedPromise=function(e){var t=f.defer();return setTimeout(t.resolve,e||1e3),t.promise},p.delay=function(e,t){t=t||h.defaultAnimationTime,e.add(new l({closure:function(){},duration:t}))},n.AnimationFactory=p}),e("/src/js/visuals/animation/animationFactory.js"),e.define("/src/js/visuals/animation/index.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("q"),f=e("backbone"),l=e("../../util/constants").GLOBAL,c=e("../../util/constants").GRAPHICS,h=f.Model.extend({defaults:{duration:c.defaultAnimationTime,closure:null},validateAtInit:function(){if(!this.get("closure"))throw new Error("give me a closure!")},initialize:function(e){this.validateAtInit()},run:function(){this.get("closure")()}}),p=f.Model.extend({defaults:{animations:null,index:0,callback:null,defer:!1,promiseBased:!1},initialize:function(e){this.set("animations",[]),e.callback||console.warn("no callback")},thenFinish:function(e,t){e.then(u.bind(function(){this.finish()},this)),e.fail(function(e){throw console.log("uncaught error",e),e}),this.set("promiseBased",!0),t&&t.resolve()},add:function(e){if(!e instanceof h)throw new Error("Need animation not something else");this.get("animations").push(e)},start:function(){this.set("index",0),l.isAnimating=!0,this.next()},finish:function(){l.isAnimating=!1,this.get("callback")()},next:function(){var e=this.get("animations"),t=this.get("index");if(t>=e.length){this.finish();return}var n=e[t],r=n.get("duration");n.run(),this.set("index",t+1),setTimeout(u.bind(function(){this.next()},this),r)}}),d=f.Model.extend({defaults:{deferred:null,closure:null,duration:c.defaultAnimationTime},initialize:function(e){if(!e.closure&&!e.animation)throw new Error("need closure or animation");this.set("closure",e.closure||e.animation),this.set("duration",e.duration||this.get("duration")),this.set("deferred",e.deferred||a.defer())},getPromise:function(){return this.get("deferred").promise},play:function(){this.get("closure")(),setTimeout(u.bind(function(){this.get("deferred").resolve()},this),this.get("duration"))},then:function(e){return this.get("deferred").promise.then(e)}});d.fromAnimation=function(e){return new d({closure:e.get("closure"),duration:e.get("duration")})},n.Animation=h,n.PromiseAnimation=d,n.AnimationQueue=p}),e("/src/js/visuals/animation/index.js"),e.define("/src/js/visuals/index.js",function(e,t,n,r,i,s,o){function w(t){t=t||{},this.options=t,this.visualization=t.visualization,this.commitCollection=t.commitCollection,this.branchCollection=t.branchCollection,this.visNodeMap={},this.visEdgeCollection=new b,this.visBranchCollection=new g,this.commitMap={},this.rootCommit=null,this.branchStackMap=null,this.upstreamBranchSet=null,this.upstreamHeadSet=null,this.paper=t.paper,this.gitReady=!1,this.branchCollection.on("add",this.addBranchFromEvent,this),this.branchCollection.on("remove",this.removeBranch,this),this.deferred=[],this.flipFraction=.65;var n=e("../app");n.getEvents().on("refreshTree",this.refreshTree,this)}function E(e){var t=0,n=0,r=0,i=0,s=e.length;u.each(e,function(e){var s=e.split("(")[1];s=s.split(")")[0],s=s.split(","),r+=parseFloat(s[1]),i+=parseFloat(s[2]);var o=parseFloat(s[0]),u=o*Math.PI*2;t+=Math.cos(u),n+=Math.sin(u)}),t/=s,n/=s,r/=s,i/=s;var o=Math.atan2(n,t)/(Math.PI*2);return o<0&&(o+=1),"hsb("+String(o)+","+String(r)+","+String(i)+")"}var u=e("underscore"),a=e("q"),f=e("backbone"),l=e("../util/constants").GRAPHICS,c=e("../util/constants").GLOBAL,h=e("../models/collections"),p=h.CommitCollection,d=h.BranchCollection,v=e("../visuals/visNode").VisNode,m=e("../visuals/visBranch").VisBranch,g=e("../visuals/visBranch").VisBranchCollection,y=e("../visuals/visEdge").VisEdge,b=e("../visuals/visEdge").VisEdgeCollection;w.prototype.defer=function(e){this.deferred.push(e)},w.prototype.deferFlush=function(){u.each(this.deferred,function(e){e()},this),this.deferred=[]},w.prototype.resetAll=function(){var e=this.visEdgeCollection.toArray();u.each(e,function(e){e.remove()},this);var t=this.visBranchCollection.toArray();u.each(t,function(e){e.remove()},this),u.each(this.visNodeMap,function(e){e.remove()},this),this.visEdgeCollection.reset(),this.visBranchCollection.reset(),this.visNodeMap={},this.rootCommit=null,this.commitMap={}},w.prototype.tearDown=function(){this.resetAll(),this.paper.remove()},w.prototype.assignGitEngine=function(e){this.gitEngine=e,this.initHeadBranch(),this.deferFlush()},w.prototype.getVisualization=function(){return this.visualization},w.prototype.initHeadBranch=function(){this.addBranchFromEvent(this.gitEngine.HEAD)},w.prototype.getScreenPadding=function(){return{widthPadding:l.nodeRadius*1.5,topHeightPadding:l.nodeRadius*1.5,bottomHeightPadding:l.nodeRadius*5}},w.prototype.getPosBoundaries=function(){return this.gitEngine.hasOrigin()?{min:0,max:.5}:this.gitEngine.isOrigin()?{min:.5,max:1}:{min:0,max:1}},w.prototype.getFlipPos=function(){var e=this.getPosBoundaries(),t=e.min,n=e.max;return this.flipFraction*(n-t)+t},w.prototype.getIsGoalVis=function(){return!!this.options.isGoalVis},w.prototype.getLevelBlob=function(){return this.visualization.options.levelBlob||{}},w.prototype.toScreenCoords=function(e){if(!this.paper.width)throw new Error("being called too early for screen coords");var t=this.getScreenPadding(),n=function(e,t,n){return n+e*(t-n*2)},r=function(e,t,n,r){return n+e*(t-r-n)};return{x:n(e.x,this.paper.width,t.widthPadding),y:r(e.y,this.paper.height,t.topHeightPadding,t.bottomHeightPadding)}},w.prototype.animateAllAttrKeys=function(e,t,n,r){var i=a.defer(),s=function(i){i.animateAttrKeys(e,t,n,r)};this.visBranchCollection.each(s),this.visEdgeCollection.each(s),u.each(this.visNodeMap,s);var o=n!==undefined?n:l.defaultAnimationTime;return setTimeout(function(){i.resolve()},o),i.promise},w.prototype.finishAnimation=function(){var e=this,t=a.defer(),n=a.defer(),r=l.defaultAnimationTime,i=l.nodeRadius,s="Solved!!\n:D",o=null,f=u.bind(function(){o=this.paper.text(this.paper.width/2,this.paper.height/2,s),o.attr({opacity:0,"font-weight":500,"font-size":"32pt","font-family":"Monaco, Courier, font-monospace",stroke:"#000","stroke-width":2,fill:"#000"}),o.animate({opacity:1},r)},this);return t.promise.then(u.bind(function(){return this.animateAllAttrKeys({exclude:["circle"]},{opacity:0},r*1.1)},this)).then(u.bind(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{r:i*2},r*1.5)},this)).then(u.bind(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{r:i*.75},r*.5)},this)).then(u.bind(function(){return f(),this.explodeNodes()},this)).then(u.bind(function(){return this.explodeNodes()},this)).then(u.bind(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{},r*1.25)},this)).then(u.bind(function(){return o.animate({opacity:0},r,undefined,undefined,function(){o.remove()}),this.animateAllAttrKeys({},{})},this)).then(function(){n.resolve()}).fail(function(e){console.warn("animation error"+e)}).done(),t.resolve(),n.promise},w.prototype.explodeNodes=function(){var e=a.defer(),t=[];u.each(this.visNodeMap,function(e){t.push(e.getExplodeStepFunc())});var n=setInterval(function(){var r=[];u.each(t,function(e){e()&&r.push(e)});if(!r.length){clearInterval(n),e.resolve();return}t=r},.025);return e.promise},w.prototype.animateAllFromAttrToAttr=function(e,t,n){var r=function(r){var i=r.getID();if(u.include(n,i))return;if(!e[i]||!t[i])return;r.animateFromAttrToAttr(e[i],t[i])};this.visBranchCollection.each(r),this.visEdgeCollection.each(r),u.each(this.visNodeMap,r)},w.prototype.genSnapshot=function(){this.fullCalc();var e={};return u.each(this.visNodeMap,function(t){e[t.get("id")]=t.getAttributes()},this),this.visBranchCollection.each(function(t){e[t.getID()]=t.getAttributes()},this),this.visEdgeCollection.each(function(t){e[t.getID()]=t.getAttributes()},this),e},w.prototype.refreshTree=function(e){if(!this.gitReady||!this.gitEngine.rootCommit)return;this.fullCalc(),this.animateAll(e)},w.prototype.refreshTreeHarsh=function(){this.fullCalc(),this.animateAll(0)},w.prototype.animateAll=function(e){this.zIndexReflow(),this.animateEdges(e),this.animateNodePositions(e),this.animateRefs(e)},w.prototype.fullCalc=function(){this.calcTreeCoords(),this.calcGraphicsCoords()},w.prototype.calcTreeCoords=function(){if(!this.rootCommit)throw new Error("grr, no root commit!");this.calcUpstreamSets(),this.calcBranchStacks(),this.calcDepth(),this.calcWidth()},w.prototype.calcGraphicsCoords=function(){this.visBranchCollection.each(function(e){e.updateName()})},w.prototype.calcUpstreamSets=function(){this.upstreamBranchSet=this.gitEngine.getUpstreamBranchSet(),this.upstreamHeadSet=this.gitEngine.getUpstreamHeadSet()},w.prototype.getCommitUpstreamBranches=function(e){return this.branchStackMap[e.get("id")]},w.prototype.getBlendedHuesForCommit=function(e){var t=this.upstreamBranchSet[e.get("id")];if(!t)throw new Error("that commit doesnt have upstream branches!");return this.blendHuesFromBranchStack(t)},w.prototype.blendHuesFromBranchStack=function(e){var t=[];return u.each(e,function(e){var n=e.obj.get("visBranch").get("fill");if(n.slice(0,3)!=="hsb"){var r=Raphael.color(n);n="hsb("+String(r.h)+","+String(r.l),n=n+","+String(r.s)+")"}t.push(n)}),E(t)},w.prototype.getCommitUpstreamStatus=function(e){if(!this.upstreamBranchSet)throw new Error("Can't calculate this yet!");var t=e.get("id"),n=this.upstreamBranchSet,r=this.upstreamHeadSet;return n[t]?"branch":r[t]?"head":"none"},w.prototype.calcBranchStacks=function(){var e=this.gitEngine.getBranches(),t={};u.each(e,function(e){var n=e.target.get("id");t[n]=t[n]||[],t[n].push(e),t[n].sort(function(e,t){var n=e.obj.get("id"),r=t.obj.get("id");return n=="master"||r=="master"?n=="master"?-1:1:n.localeCompare(r)})}),this.branchStackMap=t},w.prototype.calcWidth=function(){this.maxWidthRecursive(this.rootCommit);var e=this.getPosBoundaries();this.assignBoundsRecursive(this.rootCommit,e.min,e.max)},w.prototype.maxWidthRecursive=function(e){var t=0;u.each(e.get("children"),function(n){if(n.isMainParent(e)){var r=this.maxWidthRecursive(n);t+=r}},this);var n=Math.max(1,t);return e.get("visNode").set("maxWidth",n),n},w.prototype.assignBoundsRecursive=function(e,t,n){var r=(n+t)/2;e.get("visNode").get("pos").x=r;if(e.get("children").length===0)return;var i=n-t,s=0,o=e.get("children");u.each(o,function(t){t.isMainParent(e)&&(s+=t.get("visNode").getMaxWidthScaled())},this);var a=t;u.each(o,function(t,n){if(!t.isMainParent(e))return;var r=t.get("visNode").getMaxWidthScaled(),o=r/s*i,u=a,f=u+o;this.assignBoundsRecursive(t,u,f),a=u+o},this)},w.prototype.calcDepth=function(){var e=this.calcDepthRecursive(this.rootCommit,0);e>15&&console.warn("graphics are degrading from too many layers");var t=this.getDepthIncrement(e);u.each(this.visNodeMap,function(e){e.setDepthBasedOn(t,this.getHeaderOffset())},this)},w.prototype.animateNodePositions=function(e){u.each(this.visNodeMap,function(t){t.animateUpdatedPosition(e)},this)},w.prototype.addBranchFromEvent=function(e,t,n){var r=u.bind(function(){this.addBranch(e)},this);!this.gitEngine||!this.gitReady?this.defer(r):r()},w.prototype.addBranch=function(e){var t=new m({branch:e,gitVisuals:this,gitEngine:this.gitEngine});this.visBranchCollection.add(t),this.gitReady?t.genGraphics(this.paper):this.defer(u.bind(function(){t.genGraphics(this.paper)},this))},w.prototype.removeVisBranch=function(e){this.visBranchCollection.remove(e)},w.prototype.removeVisNode=function(e){delete this.visNodeMap[e.getID()]},w.prototype.removeVisEdge=function(e){this.visEdgeCollection.remove(e)},w.prototype.animateRefs=function(e){this.visBranchCollection.each(function(t){t.animateUpdatedPos(e)},this)},w.prototype.animateEdges=function(e){this.visEdgeCollection.each(function(t){t.animateUpdatedPath(e)},this)},w.prototype.getMinLayers=function(){return this.options.smallCanvas?2:7},w.prototype.getDepthIncrement=function(e){e=Math.max(e,this.getMinLayers());var t=1-this.getHeaderOffset(),n=t/e;return n},w.prototype.shouldHaveHeader=function(){return this.gitEngine.isOrigin()||this.gitEngine.hasOrigin()},w.prototype.getHeaderOffset=function(){return this.shouldHaveHeader()?.05:0},w.prototype.calcDepthRecursive=function(e,t){e.get("visNode").setDepth(t);var n=e.get("children"),r=t;return u.each(n,function(e){var n=this.calcDepthRecursive(e,t+1);r=Math.max(n,r)},this),r},w.prototype.canvasResize=function(e,t){this.resizeFunc||this.genResizeFunc(),this.resizeFunc(e,t)},w.prototype.genResizeFunc=function(){this.resizeFunc=u.debounce(u.bind(function(t,n){this.refreshTree()},this),200,!0)},w.prototype.addNode=function(e,t){this.commitMap[e]=t,t.get("rootCommit")&&(this.rootCommit=t);var n=new v({id:e,commit:t,gitVisuals:this,gitEngine:this.gitEngine});return this.visNodeMap[e]=n,this.gitReady&&n.genGraphics(this.paper),n},w.prototype.addEdge=function(e,t){var n=this.visNodeMap[e],r=this.visNodeMap[t];if(!n||!r)throw new Error("one of the ids in ("+e+", "+t+") does not exist");var i=new y({tail:n,head:r,gitVisuals:this,gitEngine:this.gitEngine});this.visEdgeCollection.add(i),this.gitReady&&i.genGraphics(this.paper)},w.prototype.zIndexReflow=function(){this.visNodesFront(),this.visBranchesFront()},w.prototype.visNodesFront=function(){u.each(this.visNodeMap,function(e){e.toFront()})},w.prototype.visBranchesFront=function(){this.visBranchCollection.each(function(e){e.nonTextToFront(),e.textToFront()}),this.visBranchCollection.each(function(e){e.textToFrontIfInStack()})},w.prototype.drawTreeFromReload=function(){this.gitReady=!0,this.deferFlush(),this.calcTreeCoords()},w.prototype.drawTreeFirstTime=function(){this.gitReady=!0,this.calcTreeCoords(),u.each(this.visNodeMap,function(e){e.genGraphics(this.paper)},this),this.visEdgeCollection.each(function(e){e.genGraphics(this.paper)},this),this.visBranchCollection.each(function(e){e.genGraphics(this.paper)},this),this.zIndexReflow()},n.GitVisuals=w}),e("/src/js/visuals/index.js"),e.define("/src/js/visuals/tree.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=a.Model.extend({removeKeys:function(e){u.each(e,function(e){this.get(e)&&this.get(e).remove()},this)},animateAttrKeys:function(e,t,n,r){e=u.extend({},{include:["circle","arrow","rect","path","text"],exclude:[]},e||{});var i=this.getAttributes();u.each(e.include,function(e){i[e]=u.extend({},i[e],t)}),u.each(e.exclude,function(e){delete i[e]}),this.animateToAttr(i,n,r)}});n.VisBase=f}),e("/src/js/visuals/tree.js"),e.define("/src/js/visuals/visBase.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=a.Model.extend({removeKeys:function(e){u.each(e,function(e){this.get(e)&&this.get(e).remove()},this)},getNonAnimateKeys:function(){return["stroke-dasharray"]},getIsInOrigin:function(){return this.get("gitEngine")?this.get("gitEngine").isOrigin():!1},animateToAttr:function(e,t,n){if(t===0){this.setAttr(e,!0);return}var r=t!==undefined?t:this.get("animationSpeed"),i=n||this.get("animationEasing");this.setAttr(e,!1,r,i)},setAttrBase:function(e,t,n,r,i){u.each(e,function(e){n?this.get(e).attr(t[e]):(this.get(e).stop(),this.get(e).animate(t[e],r,i),u.forEach(this.getNonAnimateKeys(),function(n){t[e]&&t[e][n]!==undefined&&this.get(e).attr(n,t[e][n])},this)),t.css&&$(this.get(e).node).css(t.css)},this)},animateAttrKeys:function(e,t,n,r){e=u.extend({},{include:["circle","arrow","rect","path","text"],exclude:[]},e||{});var i=this.getAttributes();u.each(e.include,function(e){i[e]=u.extend({},i[e],t)}),u.each(e.exclude,function(e){delete i[e]}),this.animateToAttr(i,n,r)}});n.VisBase=f}),e("/src/js/visuals/visBase.js"),e.define("/src/js/visuals/visBranch.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=e("../util/constants").GRAPHICS,l=e("../visuals/visBase").VisBase,c=e("../git/treeCompare").TreeCompare,h=function(){var e=Math.random(),t="hsb("+String(e)+",0.7,1)";return t},p=l.extend({defaults:{pos:null,text:null,rect:null,arrow:null,isHead:!1,flip:1,fill:f.rectFill,stroke:f.rectStroke,"stroke-width":f.rectStrokeWidth,offsetX:f.nodeRadius*4.75,offsetY:0,arrowHeight:14,arrowInnerSkew:0,arrowEdgeHeight:6,arrowLength:14,arrowOffsetFromCircleX:10,vPad:5,hPad:5,animationSpeed:f.defaultAnimationTime,animationEasing:f.defaultEasing},validateAtInit:function(){if(!this.get("branch"))throw new Error("need a branch!")},getID:function(){return this.get("branch").get("id")},initialize:function(){this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine");if(!this.gitEngine)throw new Error("asd wtf");this.get("branch").set("visBranch",this);var e=this.get("branch").get("id");e=="HEAD"?(this.set("isHead",!0),this.set("flip",-1),this.refreshOffset(),this.set("fill",f.headRectFill)):e!=="master"&&this.set("fill",h())},getCommitPosition:function(){var e=this.gitEngine.getCommitFromRef(this.get("branch")),t=e.get("visNode");return this.set("flip",this.getFlipValue(e,t)),this.refreshOffset(),t.getScreenCoords()},getDashArray:function(){return this.get("gitVisuals").getIsGoalVis()?this.getIsLevelBranchCompared()?"":"--":""},getIsGoalAndNotCompared:function(){return this.get("gitVisuals").getIsGoalVis()?!this.getIsLevelBranchCompared():!1},getIsLevelBranchCompared:function(){if(this.getIsMaster())return!0;var e=this.get("gitVisuals").getLevelBlob();return!c.onlyMasterCompared(e)},getIsMaster:function(){return this.get("branch").get("id")=="master"},getFlipValue:function(e,t){var n=this.get("gitVisuals").getFlipPos(),r=t.get("pos").x>n;return e.get("id")==="C0"?-1:this.get("isHead")?r?this.isBranchStackEmpty()?-1:1:this.isBranchStackEmpty()?1:-1:r?-1:1},refreshOffset:function(){var e=f.nodeRadius*4.75,t=33,n=10;this.get("flip")===1?(this.set("offsetY",-t),this.set("offsetX",e-n)):(this.set("offsetY",t),this.set("offsetX",e-n))},getArrowTransform:function(){return this.get("flip")===1?"t-2,-20R-35":"t2,20R-35"},getBranchStackIndex:function(){if(this.get("isHead"))return 0;var e=this.getBranchStackArray(),t=-1;return u.each(e,function(e,n){e.obj==this.get("branch")&&(t=n)},this),t},getBranchStackLength:function(){return this.get("isHead")?1:this.getBranchStackArray().length},isBranchStackEmpty:function(){var e=this.gitVisuals.branchStackMap[this.getCommitID()];return e?e.length===0:!0},getCommitID:function(){var e=this.get("branch").get("target");return e.get("type")==="branch"&&(e=e.get("target")),e.get("id")},getBranchStackArray:function(){var e=this.gitVisuals.branchStackMap[this.getCommitID()];return e===undefined?(this.gitVisuals.calcBranchStacks(),this.getBranchStackArray()):e},getTextPosition:function(){var e=this.getCommitPosition(),t=this.getBranchStackIndex();return{x:e.x+this.get("flip")*this.get("offsetX"),y:e.y+t*f.multiBranchY+this.get("offsetY")}},getRectPosition:function(){var e=this.getTextPosition(),t=this.get("flip"),n=this.getTextSize();return{x:e.x-.5*n.w-this.get("hPad"),y:e.y-.5*n.h-this.get("vPad")}},getArrowPath:function(){var e=function(e,t,n){return{x:e.x+t,y:e.y+n}},t=function(e){return String(Math.round(e.x))+","+String(Math.round(e.y))},n=this.get("flip"),r=e(this.getCommitPosition(),n*this.get("arrowOffsetFromCircleX"),0),i=e(r,n*this.get("arrowLength"),-this.get("arrowHeight")),s=e(r,n*this.get("arrowLength"),this.get("arrowHeight")),o=e(i,n*this.get("arrowInnerSkew"),this.get("arrowEdgeHeight")),a=e(s,n*this.get("arrowInnerSkew"),-this.get("arrowEdgeHeight")),f=49,l=e(o,n*f,0),c=e(a,n*f,0),h="";h+="M"+t(l)+" ";var p=[o,i,r,s,a,c];return u.each(p,function(e){h+="L"+t(e)+" "},this),h+="z",h},getTextSize:function(){var e=function(e){var t=e.get("text")?e.get("text").node:null;return t===null?0:t.clientWidth},t=function(e){return e.w||(e.w=75),e.h||(e.h=20),e},n=this.get("text").node;if(this.get("isHead"))return t({w:n.clientWidth,h:n.clientHeight});var r=0;return u.each(this.getBranchStackArray(),function(t){r=Math.max(r,e(t.obj.get("visBranch")))}),t({w:r,h:n.clientHeight})},getSingleRectSize:function(){var e=this.getTextSize(),t=this.get("vPad"),n=this.get("hPad");return{w:e.w+t*2,h:e.h+n*2}},getRectSize:function(){var e=this.getTextSize(),t=this.get("vPad"),n=this.get("hPad"),r=this.getBranchStackLength();return{w:e.w+t*2,h:e.h*r*1.1+n*2}},getIsRemote:function(){return this.get("branch").getIsRemote()},getName:function(){var e=this.get("branch").getName(),t=this.get("branch")===this.gitEngine.HEAD.get("target"),n=this.getIsRemote(),r=this.gitEngine.getIsHg();e==="HEAD"&&r&&(e=".");var i=t&&!this.getIsInOrigin()&&!n?"*":"";return e+i},nonTextToFront:function(){this.get("arrow").toFront(),this.get("rect").toFront()},textToFront:function(){this.get("text").toFront()},textToFrontIfInStack:function(){this.getBranchStackIndex()!==0&&this.get("text").toFront()},getFill:function(){return this.get("isHead")||this.getBranchStackLength()==1||this.getBranchStackIndex()!==0?this.get("fill"):this.gitVisuals.blendHuesFromBranchStack(this.getBranchStackArray())},remove:function(){this.removeKeys(["text","arrow","rect"]),this.gitVisuals.removeVisBranch(this)},handleModeChange:function(){},genGraphics:function(e){var t=this.getTextPosition(),n=this.getName(),r=e.text(t.x,t.y,String(n));r.attr({"font-size":14,"font-family":"Monaco, Courier, font-monospace",opacity:this.getTextOpacity()}),this.set("text",r);var i=this.getAttributes(),s=this.getRectPosition(),o=this.getRectSize(),a=e.rect(s.x,s.y,o.w,o.h,8).attr(i.rect);this.set("rect",a);var f=this.getArrowPath(),l=e.path(f).attr(i.arrow);this.set("arrow",l);var c=["text","rect","arrow"];u.each(c,function(e){$(this.get(e).node).css(i.css)},this),this.attachClickHandlers(),a.toFront(),r.toFront()},attachClickHandlers:function(){if(this.get("gitVisuals").options.noClick)return;var e=[this.get("rect"),this.get("text"),this.get("arrow")];u.each(e,function(e){e.click(u.bind(this.onClick,this))},this)},shouldDisableClick:function(){return this.get("isHead")&&!this.gitEngine.getDetachedHead()},onClick:function(){if(this.shouldDisableClick())return;var t="git checkout "+this.get("branch").get("id"),n=e("../app");n.getEventBaton().trigger("commandSubmitted",t)},updateName:function(){this.get("text").attr({text:this.getName()})},getNonTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:this.getBranchStackIndex()!==0?0:1},getTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:this.getIsGoalAndNotCompared()?this.getBranchStackIndex()===0?.7:.3:1},getStrokeWidth:function(){return this.getIsGoalAndNotCompared()?this.get("stroke-width")/5:this.get("stroke-width")},getAttributes:function(){var e=this.getTextOpacity();this.updateName();var t=this.getTextPosition(),n=this.getRectPosition(),r=this.getRectSize(),i=this.getArrowPath(),s=this.getDashArray(),o=this.shouldDisableClick()?"auto":"pointer";return{css:{cursor:o},text:{x:t.x,y:t.y,opacity:e},rect:{x:n.x,y:n.y,width:r.w,height:r.h,opacity:this.getNonTextOpacity(),fill:this.getFill(),stroke:this.get("stroke"),"stroke-dasharray":s,"stroke-width":this.getStrokeWidth()},arrow:{path:i,opacity:this.getNonTextOpacity(),fill:this.getFill(),stroke:this.get("stroke"),transform:this.getArrowTransform(),"stroke-dasharray":s,"stroke-width":this.getStrokeWidth()}}},animateUpdatedPos:function(e,t){var n=this.getAttributes();this.animateToAttr(n,e,t)},animateFromAttrToAttr:function(e,t,n,r){this.animateToAttr(e,0),this.animateToAttr(t,n,r)},setAttr:function(e,t,n,r){var i=["text","rect","arrow"];this.setAttrBase(i,e,t,n,r)}}),d=a.Collection.extend({model:p});n.VisBranchCollection=d,n.VisBranch=p,n.randomHueString=h}),e("/src/js/visuals/visBranch.js"),e.define("/src/js/visuals/visEdge.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=e("../util/constants").GRAPHICS,l=e("../visuals/visBase").VisBase,c=l.extend({defaults:{tail:null,head:null,animationSpeed:f.defaultAnimationTime,animationEasing:f.defaultEasing},validateAtInit:function(){var e=["tail","head"];u.each(e,function(e){if(!this.get(e))throw new Error(e+" is required!")},this)},getID:function(){return this.get("tail").get("id")+"."+this.get("head").get("id")},initialize:function(){this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),this.get("tail").get("outgoingEdges").push(this)},remove:function(){this.removeKeys(["path"]),this.gitVisuals.removeVisEdge(this)},genSmoothBezierPathString:function(e,t){var n=e.getScreenCoords(),r=t.getScreenCoords();return this.genSmoothBezierPathStringFromCoords(n,r)},genSmoothBezierPathStringFromCoords:function(e,t){var n=function(e){return String(Math.round(e.x))+","+String(Math.round(e.y))},r=function(e,t,n){return n=n||f.curveControlPointOffset,{x:e.x,y:e.y+n*t}},i=function(e,t,n){return{x:e.x+t,y:e.y+n}};e=r(e,-1,this.get("tail").getRadius()),t=r(t,1,this.get("head").getRadius());var s="";s+="M"+n(e)+" ",s+="C",s+=n(r(e,-1))+" ",s+=n(r(t,1))+" ",s+=n(t);var o=f.arrowHeadSize||10;return s+=" L"+n(i(t,-o,o)),s+=" L"+n(i(t,o,o)),s+=" L"+n(t),s+="C",s+=n(r(t,1))+" ",s+=n(r(e,-1))+" ",s+=n(e),s},getBezierCurve:function(){return this.genSmoothBezierPathString(this.get("tail"),this.get("head"))},getStrokeColor:function(){return f.visBranchStrokeColorNone},setOpacity:function(e){e=e===undefined?1:e,this.get("path").attr({opacity:e})},genGraphics:function(e){var t=this.getBezierCurve(),n=e.path(t).attr({"stroke-width":f.visBranchStrokeWidth,stroke:this.getStrokeColor(),"stroke-linecap":"round","stroke-linejoin":"round",fill:this.getStrokeColor()});n.toBack(),this.set("path",n)},getOpacity:function(){var e=this.gitVisuals.getCommitUpstreamStatus(this.get("tail")),t={branch:1,head:f.edgeUpstreamHeadOpacity,none:f.edgeUpstreamNoneOpacity};if(t[e]===undefined)throw new Error("bad stat");return t[e]},getAttributes:function(){var e=this.getBezierCurve(),t=this.getOpacity();return{path:{path:e,opacity:t}}},animateUpdatedPath:function(e,t){var n=this.getAttributes();this.animateToAttr(n,e,t)},animateFromAttrToAttr:function(e,t,n,r){this.animateToAttr(e,0),this.animateToAttr(t,n,r)},animateToAttr:function(e,t,n){if(t===0){this.get("path").attr(e.path);return}this.get("path").toBack(),this.get("path").stop(),this.get("path").animate(e.path,t!==undefined?t:this.get("animationSpeed"),n||this.get("animationEasing"))}}),h=a.Collection.extend({model:c});n.VisEdgeCollection=h,n.VisEdge=c}),e("/src/js/visuals/visEdge.js"),e.define("/src/js/visuals/visNode.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("backbone"),f=e("../util/constants").GRAPHICS,l=e("../visuals/visBase").VisBase,c=l.extend({defaults:{depth:undefined,maxWidth:null,outgoingEdges:null,circle:null,text:null,id:null,pos:null,radius:null,commit:null,animationSpeed:f.defaultAnimationTime,animationEasing:f.defaultEasing,fill:f.defaultNodeFill,"stroke-width":f.defaultNodeStrokeWidth,stroke:f.defaultNodeStroke},getID:function(){return this.get("id")},validateAtInit:function(){if(!this.get("id"))throw new Error("need id for mapping");if(!this.get("commit"))throw new Error("need commit for linking");this.get("pos")||this.set("pos",{x:Math.random(),y:Math.random()})},initialize:function(){this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),this.set("outgoingEdges",[])},setDepth:function(e){this.set("depth",Math.max(this.get("depth")||0,e))},setDepthBasedOn:function(e,t){if(this.get("depth")===undefined)throw new Error("no depth yet!");var n=this.get("pos");n.y=this.get("depth")*e+t},getMaxWidthScaled:function(){var e=this.gitVisuals.getCommitUpstreamStatus(this.get("commit")),t={branch:1,head:.3,none:.1};if(t[e]===undefined)throw new Error("bad stat");return t[e]*this.get("maxWidth")},toFront:function(){this.get("circle").toFront(),this.get("text").toFront()},getOpacity:function(){var e={branch:1,head:f.upstreamHeadOpacity,none:f.upstreamNoneOpacity},t=this.gitVisuals.getCommitUpstreamStatus(this.get("commit"));if(e[t]===undefined)throw new Error("invalid status");return e[t]},getTextScreenCoords:function(){return this.getScreenCoords()},getAttributes:function(){var e=this.getScreenCoords(),t=this.getTextScreenCoords(),n=this.getOpacity(),r=this.getIsInOrigin()?f.originDash:"";return{circle:{cx:e.x,cy:e.y,opacity:n,r:this.getRadius(),fill:this.getFill(),"stroke-width":this.get("stroke-width"),"stroke-dasharray":r,stroke:this.get("stroke")},text:{x:t.x,y:t.y,opacity:n}}},animatePositionTo:function(e,t,n){var r=this.getAttributes(),i=e.getAttributes();r.circle=i.circle,r.text=i.text,this.animateToAttr(r,t,n)},highlightTo:function(e,t,n){var r=e.get("fill"),i={circle:{fill:r,stroke:r,"stroke-dasharray":"","stroke-width":this.get("stroke-width")*5},text:{}};this.animateToAttr(i,t,n)},animateUpdatedPosition:function(e,t){var n=this.getAttributes();this.animateToAttr(n,e,t)},animateFromAttrToAttr:function(e,t,n,r){this.animateToAttr(e,0),this.animateToAttr(t,n,r)},animateToSnapshot:function(e,t,n){if(!e[this.getID()])return;this.animateToAttr(e[this.getID()],t,n)},setAttr:function(e,t,n,r){var i=["text","circle"];this.setAttrBase(i,e,t,n,r)},animateToAttr:function(e,t,n){l.prototype.animateToAttr.apply(this,arguments);var r=t!==undefined?t:this.get("animationSpeed"),i=n||this.get("animationEasing");n=="bounce"&&e.circle&&e.circle.cx!==undefined&&e.text&&e.text.x!==undefined&&(this.get("circle").animate(e.circle.cx,r,"easeInOut"),this.get("text").animate(e.text.x,r,"easeInOut"))},getScreenCoords:function(){var e=this.get("pos");return this.gitVisuals.toScreenCoords(e)},getRadius:function(){return this.get("radius")||f.nodeRadius},getParentScreenCoords:function(){return this.get("commit").get("parents")[0].get("visNode").getScreenCoords()},setBirthPosition:function(){var e=this.getParentScreenCoords();this.get("circle").attr({cx:e.x,cy:e.y,opacity:0,r:0}),this.get("text").attr({x:e.x,y:e.y,opacity:0})},setBirthFromSnapshot:function(e){var t=this.get("commit").get("parents")[0].get("visNode").getID(),n=e[t];this.get("circle").attr({opacity:0,r:0,cx:n.circle.cx,cy:n.circle.cy}),this.get("text").attr({opacity:0,x:n.text.x,y:n.text.y});var r={x:n.circle.cx,y:n.circle.cy};this.setOutgoingEdgesBirthPosition(r)},setBirth:function(){this.setBirthPosition(),this.setOutgoingEdgesBirthPosition(this.getParentScreenCoords())},setOutgoingEdgesOpacity:function(e){u.each(this.get("outgoingEdges"),function(t){t.setOpacity(e)})},animateOutgoingEdgesToAttr:function(e,t,n){u.each(this.get("outgoingEdges"),function(t){var n=e[t.getID()];t.animateToAttr(n)},this)},animateOutgoingEdges:function(e,t){u.each(this.get("outgoingEdges"),function(n){n.animateUpdatedPath(e,t)},this)},animateOutgoingEdgesFromSnapshot:function(e,t,n){u.each(this.get("outgoingEdges"),function(r){var i=e[r.getID()];r.animateToAttr(i,t,n)},this)},setOutgoingEdgesBirthPosition:function(e){u.each(this.get("outgoingEdges"),function(t){var n=t.get("head").getScreenCoords(),r=t.genSmoothBezierPathStringFromCoords(e,n);t.get("path").stop(),t.get("path").attr({path:r,opacity:0})},this)},parentInFront:function(){this.get("commit").get("parents")[0].get("visNode").toFront()},getFontSize:function(e){return e.length<3?12:e.length<5?10:8},getFill:function(){var e=this.gitVisuals.getCommitUpstreamStatus(this.get("commit"));return e=="head"?f.headRectFill:e=="none"?f.orphanNodeFill:this.gitVisuals.getBlendedHuesForCommit(this.get("commit"))},attachClickHandlers:function(){if(this.get("gitVisuals").options.noClick)return;var t="git checkout "+this.get("commit").get("id"),n=e("../app");u.each([this.get("circle"),this.get("text")],function(e){e.click(function(){n.getEventBaton().trigger("commandSubmitted",t)}),$(e.node).css("cursor","pointer")})},setOpacity:function(e){e=e===undefined?1:e;var t=["circle","text"];u.each(t,function(t){this.get(t).attr({opacity:e})},this)},remove:function(){this.removeKeys(["circle"],["text"]);var e=this.get("text");e&&e.remove(),this.gitVisuals.removeVisNode(this)},removeAll:function(){this.remove(),this.removeAllEdges()},removeAllEdges:function(){u.each(this.get("outgoingEdges"),function(e){e.remove()},this)},getExplodeStepFunc:function(){var e=this.get("circle"),t=20,n=Math.PI+Math.random()*1*Math.PI,r=.2,i=.01,s=t*Math.cos(n),o=t*Math.sin(n),u=e.attr("cx"),a=e.attr("cy"),f=this.gitVisuals.paper.width,l=this.gitVisuals.paper.height,c=.8,h=1,p=function(){o+=r*h-i*o,s-=i*s,u+=s*h,a+=o*h;if(u<0||u>f)s=c*-s,u=u<0?0:f;if(a<0||a>l)o=c*-o,a=a<0?0:l;return e.attr({cx:u,cy:a}),s*s+o*o<.01&&Math.abs(a-l)===0?!1:!0};return p},makeCircle:function(e){var t=this.getScreenCoords();return e.circle(t.x,t.y,this.getRadius()).attr(this.getAttributes().circle)},makeText:function(e){var t=this.getTextScreenCoords();return e.text(t.x,t.y,String(this.get("id")))},genGraphics:function(){var e=this.gitVisuals.paper,t=this.makeCircle(e),n=this.makeText(e);n.attr({"font-size":this.getFontSize(this.get("id")),"font-weight":"bold","font-family":"Monaco, Courier, font-monospace",opacity:this.getOpacity()}),this.set("circle",t),this.set("text",n),this.attachClickHandlers()}});n.VisNode=c}),e("/src/js/visuals/visNode.js"),e.define("/src/js/visuals/visualization.js",function(e,t,n,r,i,s,o){var u=e("underscore"),a=e("../util").isBrowser()?a=window.Backbone:a=e("backbone"),f=e("../models/collections"),l=f.CommitCollection,c=f.BranchCollection,h=e("../util/eventBaton").EventBaton,p=e("../visuals").GitVisuals,d=a.View.extend({initialize:function(e){e=e||{},this.options=e,this.customEvents=u.clone(a.Events),this.containerElement=e.containerElement;var t=this,n=e.containerElement||$("#canvasHolder")[0];new Raphael(n,200,200,function(){var n=this;s.nextTick(function(){t.paperInitialize(n,e)})})},paperInitialize:function(t,n){this.treeString=n.treeString,this.paper=t;var r=e("../app");this.eventBaton=n.noKeyboardInput?new h:r.getEventBaton(),this.commitCollection=new l,this.branchCollection=new c,this.gitVisuals=new p({commitCollection:this.commitCollection,branchCollection:this.branchCollection,paper:this.paper,noClick:this.options.noClick,isGoalVis:this.options.isGoalVis,smallCanvas:this.options.smallCanvas,visualization:this});var i=e("../git").GitEngine;this.gitEngine=new i({collection:this.commitCollection,branches:this.branchCollection,gitVisuals:this.gitVisuals,eventBaton:this.eventBaton}),this.gitEngine.init(),this.gitVisuals.assignGitEngine(this.gitEngine),this.myResize(),$(window).on("resize",u.bind(function(){this.myResize()},this)),this.gitVisuals.drawTreeFirstTime(),this.treeString&&this.gitEngine.loadTreeFromString(this.treeString),this.options.zIndex&&this.setTreeIndex(this.options.zIndex),this.shown=!1,this.setTreeOpacity(0),s.nextTick(u.bind(this.fadeTreeIn,this)),this.customEvents.trigger("gitEngineReady"),this.customEvents.trigger("paperReady")},clearOrigin:function(){delete this.originVis},makeOrigin:function(e){return this.originVis=new d(u.extend({},this.options,{noKeyboardInput:!0,noClick:!0,treeString:e.treeString})),this.originVis.customEvents.on("paperReady",u.bind(function(){var e=$(this.paper.canvas).css("z-index");this.originVis.setTreeIndex(e)},this)),this.originVis},originToo:function(e,t){if(!this.originVis)return;var n=u.bind(function(){this.originVis[e].apply(this.originVis,t)},this);if(this.originVis.paper){n();return}this.originVis.customEvents.on("paperReady",n)},setTreeIndex:function(e){$(this.paper.canvas).css("z-index",e),this.originToo("setTreeIndex",arguments)},setTreeOpacity:function(e){e===0&&(this.shown=!1),$(this.paper.canvas).css("opacity",e),this.originToo("setTreeOpacity",arguments)},getAnimationTime:function(){return 300},fadeTreeIn:function(){this.shown=!0,$(this.paper.canvas).animate({opacity:1},this.getAnimationTime()),this.originToo("fadeTreeIn",arguments)},fadeTreeOut:function(){this.shown=!1,$(this.paper.canvas).animate({opacity:0},this.getAnimationTime()),this.originToo("fadeTreeOut",arguments)},hide:function(){this.fadeTreeOut(),setTimeout(u.bind(function(){$(this.paper.canvas).css("visibility","hidden")},this),this.getAnimationTime()),this.originToo("hide",arguments)},show:function(){$(this.paper.canvas).css("visibility","visible"),setTimeout(u.bind(this.fadeTreeIn,this),10),this.originToo("show",arguments)},showHarsh:function(){$(this.paper.canvas).css("visibility","visible"),this.setTreeOpacity(1),this.originToo("showHarsh",arguments)},resetFromThisTreeNow:function(e){this.treeString=e;var t=this.getOriginInTreeString(e);if(t){var n=this.gitEngine.printTree(t);this.originToo("resetFromThisThreeNow",[n])}},getOriginInTreeString:function(e){var t=JSON.parse(unescape(e));return t.originTree},reset:function(e){var t=e||this.treeString;this.setTreeOpacity(0),t?this.gitEngine.loadTreeFromString(t):this.gitEngine.defaultInit(),this.fadeTreeIn();if(this.originVis)if(t){var n=this.getOriginInTreeString(t);this.originToo("reset",[JSON.stringify(n)])}else this.originToo("reset",arguments)},tearDown:function(){this.gitEngine.tearDown(),this.gitVisuals.tearDown(),delete this.paper,this.originToo("tearDown",arguments)},die:function(){this.fadeTreeOut(),setTimeout(u.bind(function(){this.shown||this.tearDown()},this),this.getAnimationTime()),this.originToo("die",arguments)},myResize:function(){if(!this.paper)return;var e=1,t=this.el,n=t.clientWidth-e,r=t.clientHeight-e;if(!this.containerElement){var i=t.offsetLeft,s=t.offsetTop;$(this.paper.canvas).css({position:"absolute",left:i+"px",top:s+"px"})}else $(this.paper.canvas).css({position:"absolute"});this.paper.setSize(n,r),this.gitVisuals.canvasResize(n,r)}});n.Visualization=d}),e("/src/js/visuals/visualization.js"),e.define("/src/levels/advanced/multipleParents.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C7","id":"master"},"bugWork":{"target":"C2","id":"bugWork"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C4","C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git branch bugWork master^^2^",startTree:'{"branches":{"master":{"target":"C7","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C4","C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Multiple parents",zh_CN:"多个父提交记录"},hint:{en_US:"Use `git branch bugWork` with a target commit to create the missing reference.",zh_CN:"使用`git branch bugWork`加上一个目标提交记录来创建消失的引用。"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Specifying Parents","","Like the `~` modifier, the `^` modifier also accepts an optional number after it.","","Rather than specifying the number of generations to go back (what `~` takes), the modifier on `^` specifies which parent reference to follow from a merge commit. Remember that merge commits have multiple parents, so the path to choose is ambiguous.","",'Git will normally follow the "first" parent upwards from a merge commit, but specifying a number with `^` changes this default behavior.',"","Enough talking, let's see it in action.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have a merge commit. If we checkout `master^` without the modifier, we will follow the first parent after the merge commit. ","","(*In our visuals, the first parent is positioned directly above the merge commit.*)"],afterMarkdowns:["Easy -- this is what we are all used to."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now let's try specifying the second parent instead..."],afterMarkdowns:["See? We followed the other parent upwards."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["The `^` and `~` modifiers can make moving around a commit tree very powerful:"],afterMarkdowns:["Lightning fast!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Even crazier, these modifiers can be chained together! Check this out:"],afterMarkdowns:["The same movement as before, but all in one command."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Put it to practice","","To complete this level, create a new branch at the specified destination.","","Obviously it would be easy to specify the commit directly (with something like `C6`), but I challenge you to use the modifiers we talked about instead!"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 选择父提交","","和`~`修改符一样，`^`修改符之后也可以跟一个（可选的）数字。","","这不是用来指定向上返回几代（`~`的作用），`^`后的数字指定跟随合并提交记录的哪一个父提交。还记得一个合并提交有多个父提交吧，所有选择哪条路径不是那么清晰。","",'Git默认选择跟随合并提交的"第一个"父提交，使用`^`后跟一个数字来改变这一默认行为。',"","废话不多说，举个例子。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这里有一个合并提交。如果不加数字修改符直接切换到`master^`，会回到第一个父提交。","","(*在我们的图示中，第一个父提交是指合并提交正上方的那个父提交。*)"],afterMarkdowns:["OK--这恰好是我们想要的。"],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在来试试选择第二个父提交……"],afterMarkdowns:["看见了吧？我们回到了第二个父提交。"],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用`^`和`~`可以自由在在提交树中移动："],afterMarkdowns:["快若闪电！"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["再疯狂点，这些修改符支持链式操作！试一下这个："],afterMarkdowns:["和前面的结果一样，但只用了一条命令。"],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### 实践一下","","要完成此关，在指定的目标位置创建一个新的分支。","","很明显可以简单的直接使用提交记录的hash值（比如`C6`），但我要求你使用刚刚讲到的相对引用修饰符！"]}}]}}}}),e("/src/levels/advanced/multipleParents.js"),e.define("/src/levels/index.js",function(e,t,n,r,i,s,o){n.levelSequences={intro:[e("../../levels/intro/commits").level,e("../../levels/intro/branching").level,e("../../levels/intro/merging").level,e("../../levels/intro/rebasing").level],rampup:[e("../../levels/rampup/detachedHead").level,e("../../levels/rampup/relativeRefs").level,e("../../levels/rampup/relativeRefs2").level,e("../../levels/rampup/reversingChanges").level],move:[e("../../levels/rampup/cherryPick").level,e("../../levels/rampup/interactiveRebase").level],mixed:[e("../../levels/mixed/grabbingOneCommit").level,e("../../levels/mixed/jugglingCommits").level,e("../../levels/mixed/jugglingCommits2").level],advanced:[e("../../levels/rebase/manyRebases").level,e("../../levels/advanced/multipleParents").level,e("../../levels/rebase/selectiveRebase").level]},typeof window!="undefined"&&window.location&&window.location.href.indexOf("showRemote")!==-1&&(n.levelSequences.remote=[e("../../levels/remote/clone").level]),n.sequenceInfo={intro:{displayName:{en_US:"Introduction Sequence",ja:"まずはここから",fr_FR:"Séquence d'introduction",zh_CN:"基础篇",ko:"기본 명령어"},about:{en_US:"A nicely paced introduction to the majority of git commands",ja:"gitの基本的なコマンド群をほどよいペースで学ぶ",fr_FR:"Une introduction en douceur à la majorité des commandes git",zh_CN:"循序渐进介绍git主要命令",ko:"브랜치 관련 주요 git 명령어를 깔끔하게 알려드립니다"}},rampup:{displayName:{en_US:"Ramping Up",ja:"次のレベルに進もう",fr_FR:"Montée en puissance",zh_CN:"进阶篇"},about:{en_US:"The next serving of 100% git awesomes-ness. Hope you're hungry",ja:"更にgitの素晴らしさを堪能しよう",fr_FR:"Le prochain service git 100% excellence. J'espère que vous êtes affamés",zh_CN:"接下来是git的超赞特性。迫不及待了吧！"}},remote:{displayName:{en_US:"Push & Pull -- Git Remotes!"},about:{en_US:"Time to share your 1's and 0's kids; coding just got social"}},move:{displayName:{en_US:"Moving Work Around",ja:"Rebaseをモノにする",fr_FR:"Maîtrise Rebase, Luke!",zh_CN:"精通Rebase！",ko:"리베이스 완전정복!"},about:{en_US:"Get comfortable with modifying the source tree",ja:"話題のrebaseってどんなものだろう？って人にオススメ",fr_FR:"Qu'est-ce que ce rebase dont tout le monde parle ? Découvrez-le !",ko:"그 좋다고들 말하는 rebase에 대해 알아봅시다!",zh_CN:"大家都在说的rebase究竟是神马？看看吧！"}},mixed:{displayName:{en_US:"A Mixed Bag",ja:"様々なtips",fr_FR:"Un assortiment",ko:"종합선물세트",zh_CN:"大杂烩？"},about:{en_US:"A mixed bag of Git techniques, tricks, and tips",ja:"gitを使う上での様々なtipsやテクニックなど",fr_FR:"Un assortiment de techniques et astuces pour utiliser Git",ko:"Git을 다루는 다양한 팁과 테크닉을 다양하게 알아봅니다",zh_CN:"Git技术，技巧与贴士杂烩"}},advanced:{displayName:{en_US:"Advanced Topics",fr_FR:"Sujets Avancés",zh_CN:"高级主题"},about:{en_US:"For the truly brave!",fr_FR:"Pour les plus courageux !",zh_CN:"只为真正的勇士！"}}}}),e("/src/levels/index.js"),e.define("/src/levels/intro/branching.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master"},"bugFix":{"target":"C1","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',solutionCommand:"git branch bugFix;git checkout bugFix",name:{en_US:"Branching in Git",ja:"Gitのブランチ",ko:"Git에서 브랜치 쓰기",fr_FR:"Gérer les branches avec Git",zh_CN:"建立Git分支"},hint:{en_US:'Make a new branch with "git branch [name]" and check it out with "git checkout [name]"',ja:'ブランチの作成（"git branch [ブランチ名]"）と、チェックアウト（"git checkout [ブランチ名]"）',fr_FR:'Faites une nouvelle branche avec "git branch [nom]" positionnez-vous dans celle-ci avec "git checkout [nom]"',zh_CN:"用 'git branch [分支名]' 来创建分支，用 'git checkout [分支名]' 切换到分支",ko:'"git branch [브랜치명]"으로 새 브랜치를 만들고, "git checkout [브랜치명]"로 그 브랜치로 이동하세요'},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Branches","","Branches in Git are incredibly lightweight as well. They are simply references to a specific commit -- nothing more. This is why many Git enthusiasts chant the mantra:","","```","branch early, and branch often","```","","Because there is no storage / memory overhead with making many branches, it's easier to logically divide up your work than have big beefy branches.","",'When we start mixing branches and commits, we will see how these two features combine. For now though, just remember that a branch essentially says "I want to include the work of this commit and all parent commits."']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see what branches look like in practice.","","Here we will create a new branch named `newImage`"],afterMarkdowns:["There, that's all there is to branching! The branch `newImage` now refers to commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's try to put some work on this new branch. Hit the button below"],afterMarkdowns:["Oh no! The `master` branch moved but the `newImage` branch didn't! That's because we weren't \"on\" the new branch, which is why the asterisk (*) was on `master`"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's tell git we want to checkout the branch with","","```","git checkout [name]","```","","This will put us on the new branch before committing our changes"],afterMarkdowns:["There we go! Our changes were recorded on the new branch"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ok! You are all ready to get branching. Once this window closes,","make a new branch named `bugFix` and switch to that branch"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitのブランチ","","Gitではコミットだけでなく、ブランチもまた信じられないほど軽量です。ブランチとは単に特定のコミットを指示したポインタにしか過ぎません。Gitの達人は決まってこう言うのは、そのためです：","","```","早めに、かつ頻繁にブランチを切りなさい","```","","どれほど多くのブランチを作ってもストレージやメモリを全然使わないので、ブランチを肥大化させるよりも論理的に分割していく方が簡単なのです。","","ブランチとコミットをあわせて使い始めると、これら2つのフィーチャがどのように連動して機能するかがわかるでしょう。ここではとりあえず、ブランチは基本的には「あるコミットとその親のコミットたちを含めた全てのコミット」のことを呼ぶと覚えておいてください。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["では実際にブランチがどのようなものかを見ていきましょう。","","`newImage`という名前の新しいブランチを切ってみることにします。"],afterMarkdowns:["以上。必要な手順はこれだけです。いま作成された`newImage`ブランチは`C1`コミットを指しています。"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["この新しいブランチに何か変更を加えてみましょう。次のボタンを押してください。"],afterMarkdowns:["あれ？`newImage`ではなくて`master`ブランチが移動してしまいました。これは、私たちが`newImage`のブランチ上で作業していなかったためです。どのブランチで作業しているかは、アスタリスク(*)がついてるかどうかで分かります。"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["今度は作業したいブランチ名をgitに伝えてみましょう。","","```","git checkout [ブランチ名]","```","","このようにして、コミットする前に新しいブランチへと作業ブランチを移動することができます。"],afterMarkdowns:["できましたね。今度は新しいブランチに対して変更を記録することができました。"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["OK! もうどんなブランチでも切れますね。このウィンドウを閉じて、","`bugFix`という名前のブランチを作成し、そのブランチをチェックアウトしてみましょう。"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches Git","","Les branches sous Git sont incroyablement légères aussi. Elles sont simplment des références un commit spécifique -- rien de plus. C'est pourquoi beaucoup d'enthousiastes répètent en cœur :","","```","n'attendez pas pour faire des branches, et faites souvent des branches","```","","Parce qu'il n'y a pas de surcoût (stockage/mémoire) associés aux branches, il est facile de diviser son travail en de nombreuses branches plutôt que d'avoir quelques grosses branches.","","Nous verrons comment les banches et les commits interagissent quand nous les utiliserons ensemble. Pour l'instant, souvenez-vous qu'une branche est un moyen d'exprimer \"Je veux inclure le contenu de ce commit et de tous les commits parents.\""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Regardons à quoi ressemblent les branches en pratique.","","Nous allons nous positionner (checkout) dans une nouvelle branche appellée `newImage`"],afterMarkdowns:["Et voilà, c'est tout ! La branche `newImage` se réfère désormais au commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Travaillons mainenant dans cette branche. Appuyez sur le bouton ci-dessous."],afterMarkdowns:["Oh non! La branche `master` a bougé mais pas la branche `newImage` ! C'est parce aue nous n'étions pas  \"sur\" la nouvelle branche, comme indiqué par l'asterisque (*) sur `master`"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Indiquons à git que nous voulons nous positionner sur la branche avec ","","```","git checkout [nom]","```","","Ceci nous positionne sur la nouvelle branche avant de faire un commit avec nos modifications"],afterMarkdowns:["C'est parti ! Nos modifications ont été enregistrées sur la nouvelle branche"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ok! Vous êtes fin prêt pour faire des branches. Après la fermeture de cette fenêtre,","faites une nouvelle branche nommée `bugFix` et positionnez-vous sur cette branche"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Branches",""," Git 的分支非常轻量。它们只是简单地指向某个提交纪录——仅此而已。所以许多Git爱好者会念叨：","","```","早点建分支！经常建分支！","```","","创建分支没有储存或内存上的开销，所以按逻辑分解工作比维护单一的代码树要简单。","","同时使用分支和提交时，我们会看到两者如何配合。现在，只要记住使用分支其实就是在说：“我想包含本次提交及所有的父提交记录。”"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["举个例子看看分支究竟是什么。","","这里，我们切换到到名为`newImage`的新分支。"],command:"git branch newImage",afterMarkdowns:["看，这就是建立分支所需的操作啦！`newImage`分支现在指向提交记录`C1`。"],beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在让我们修改一下新分支。点击下面的按钮。"],command:"git commit",afterMarkdowns:["啊摔！`master`分支前进了，但`newImage`分支没有哇！这是因为我们没有“在”这个新分支上，这也是为什么星号（*）只在 `master` 上。"],beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用如下命令告诉git我们想要切换到新的分支","","```","git checkout [name]","```","","这可以让我们在提交修改之前切换到新的分支。"],command:"git checkout newImage; git commit",afterMarkdowns:["好的嘞！新的分支已经记录了我们的修改。"],beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["好啦，你已经准备好使用分支了。当前窗口关闭后，","创建一个叫 `bugFix` 的新分支，然后切换过去。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 브랜치","","깃의 브랜치도 놀랍도록 가볍습니다. 브랜치는 특정 커밋에 대한 참조(reference)에 지나지 않습니다. 이런 사실 때문에 수많은 Git 애찬론자들이 자주 이렇게 말하곤 합니다:","","```","브랜치를 서둘러서, 그리고 자주 만드세요","```","","브랜치를 많이 만들어도 메모리나 디스크 공간에 부담이 되지 않기 때문에, 여러분의 작업을 커다른 브랜치로 만들기 보다, 작은 단위로 잘게 나누는 것이 좋습니다.","",'브랜치와 커밋을 같이 쓸 때, 어떻게 두 기능이 조화를 이루는지 알아보겠습니다. 하지만 우선은, 단순히 브랜치를 "하나의 커밋과 그 부모 커밋들을 포함하는 작업 내역"이라고 기억하시면 됩니다.']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["브랜치가 어떤 것인지 연습해보죠.","","`newImage`라는 브랜치를 살펴보겠습니다."],afterMarkdowns:["저 그림에 브랜치의 모든 것이 담겨있습니다! 브랜치 `newImage`가 커밋 `C1`를 가리킵니다"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["이 새로운 브랜치에 약간의 작업을 더해봅시다. 아래 버튼을 눌러주세요"],afterMarkdowns:["앗! `master` 브랜치가 움직이고, `newImage` 브랜치는 이동하지 않았네요! 그건 우리가 새 브랜치 위에 있지 않았었기 때문입니다. 별표(*)가 `master`에 있었던 것이죠."],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["아래의 명령으로 새 브랜치로 이동해 봅시다.","","```","git checkout [브랜치명]","```","","이렇게 하면 변경분을 커밋하기 전에 새 브랜치로 이동하게 됩니다."],afterMarkdowns:["이거죠! 이제 우리의 변경이 새 브랜치에 기록되었습니다!"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["좋아요! 이제 직접 브랜치 작업을 연습해봅시다. 이 창을 닫고,","`bugFix`라는 새 브랜치를 만드시고, 그 브랜치로 이동해보세요"]}}]}}}}),e("/src/levels/intro/branching.js"),e.define("/src/levels/intro/commits.js",function(e,t,n,r,i,s,o){n.level={name:{en_US:"Introduction to Git Commits",fr_FR:"Introduction aux commits avec Git",ja:"Gitのコミット",ko:"Git 커밋 소개",zh_CN:"Git Commits简介"},goalTreeString:'{"branches":{"master":{"target":"C3","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git commit;git commit",startTree:'{"branches":{"master":{"target":"C1","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',hint:{en_US:"Just type in 'git commit' twice to finish!",fr_FR:"Il suffit de saisir 'git commit' deux fois pour réussir !",zh_CN:"敲两次 'git commit' 就好啦！",ja:"'git commit'コマンドを2回打てば完成!",ko:"'git commit'이라고 두 번 치세요!"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","A commit in a git repository records a snapshot of all the files in your directory. It's like a giant copy and paste, but even better!","","Git wants to keep commits as lightweight as possible though, so it doesn't just copy the entire directory every time you commit. It actually stores each commit as a set of changes, or a \"delta\", from one version of the repository to the next. That's why most commits have a parent commit above them -- you'll see this later in our visualizations.","",'In order to clone a repository, you have to unpack or "resolve" all these deltas. That\'s why you might see the command line output:',"","`resolving deltas`","","when cloning a repo.","","It's a lot to take in, but for now you can think of commits as snapshots of the project. Commits are very light and switching between them is wicked fast!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see what this looks like in practice. On the right we have a visualization of a (small) git repository. There are two commits right now -- the first initial commit, `C0`, and one commit after that `C1` that might have some meaningful changes.","","Hit the button below to make a new commit"],afterMarkdowns:["There we go! Awesome. We just made changes to the repository and saved them as a commit. The commit we just made has a parent, `C1`, which references which commit it was based off of."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Go ahead and try it out on your own! After this window closes, make two commits to complete the level"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitのコミット","コミットによって、ディレクトリ中の全てのファイルのスナップショットを記録します。巨大なコピー＆ペーストのようなものですが、実はそれよりずっと良いものです。","","Gitではコミットを可能な限り軽量に保つために、コミット毎にフォルダ全体をコピーしません。実際にはGitは、コミットを直前のバージョンから一つ先のバージョンへの「変更の固まり」あるいは「差分」として記録します。後で出てきますが、ほとんどのコミットが親を持っているのはそういう理由からです。","","リポジトリをcloneする時には、内部動作としてはコミットの差分をたどって全ての変更を取得しています。cloneした時に以下のような表示が出るのは：","","`resolving deltas`（訳：差分を解決中）","","このためです。","","もっと説明したいところですが、しばらくはコミットをスナップショットのようなものだと考えてください。コミットは非常に軽量であり、コミット間の移動も非常に高速です。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["これがどういうことか、動きを見ていきましょう。図には（小さな）gitリポジトリが描かれています。コミットが2つあります ― `C0`という名前の初回のコミットがあり、`C1`という名前の次のコミットが続きます。これは何か意味のある変更かもしれません。","","下のボタンを押下して新しいコミットを作ってみましょう。"],afterMarkdowns:["できました! 良いですね。いまリポジトリに新しい変更が加えられ、1つのコミットとして保存されました。作成したコミットには親がいて、このコミットの出発点となった`C1`を指しています。"],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["実際に手を動かしてみましょう。このウィンドウを閉じたら、試しに2回コミットをしてみましょう。"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits Git","Un commit dans un dépôt (repository) git enregistre une image (snapshot) de tous les fichiers du repertoire. Comme un Copier-Coller géant, mais en bien mieux !","","Git fait en sorte que les commits soient aussi légers que possible donc il ne recopie pas tous le répertoire à chaque commit. En fait, git n'enregistre que l'ensemble des changments (\"delta\") depuis la version précédante du dépôt. C'est pour cette raison que la plupart des commits ont un commit parent -- ainsi que nous le verrons plus tard.","",'Pour cloner un dépôt, il faut décompresser ("résoudre") tous ces deltas. C\'est la raison pour laquelle la commande écrit :',"","`resolving deltas`","","lorsque l'on clone un dépôt.","","C'est beaucoup à absorber, mais pour l'instant vous pouvez considérer les commits comme des snapshots du projet. Les commits sont très légers et passer de l'un à l'autre est très rapide !"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons à quoi cela ressemble en pratique. Sur la droite, on peut visualiser un (petit) dépôt git. Il y a pour l'instant deux commits -- le premier commit initial, `C0`, et un commit suivant `C1` qui aurait des changements significatifs.","","Appuyez sur le bouton ci-dessous pour faire un nouveau commit"],afterMarkdowns:["C'est parti ! Super. Nous venons de faire des modifications sur le dépôt et de saugevarder celles-ci dans un commit. Ce commit que nous venons de faire a un parent, `C1`, qui référence le commit sur lequel il est basé."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Allez-y et essayez par vous-même ! Après la fermeture de cettefenêtre, faites deux commits pour terminer ce niveau."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 커밋","커밋은 Git 저장소에 여러분의 디렉토리에 있는 모든 파일에 대한 스냅샷을 기록하는 것입니다. 디렉토리 전체에 대한 복사해 붙이기와 비슷하지만 훨씬 유용합니다!","",'Git은 커밋을 가능한한 가볍게 유지하고자 해서, 커밋할 때마다 디렉토리 전체를 복사하는 일은 하지 않습니다. 각 커밋은 저장소의 이전 버전과 다음 버전의 변경내역("delta"라고도 함)을 저장합니다. 그래서 대부분의 커밋이 그 커밋 위에 부모 커밋을 가리키고 있게 되는 것입니다. -- 곧 그림으로 된 화면에서 살펴보게 될 것입니다.',"","저장소를 복제(clone)하려면, 그 모든 변경분(delta)를 풀어내야하는데, 그 때문에 명령행 결과로 아래와 같이 보게됩니다. ","","`resolving deltas`","","알아야할 것이 꽤 많습니다만, 일단은 커밋을 프로젝트의 각각의 스냅샷들로 생각하시는 걸로 충분합니다. 커밋은 매우 가볍고 커밋 사이의 전환도 매우 빠르다는 것을 기억해주세요!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["연습할 때 어떻게 보이는지 확인해보죠. 오른쪽 화면에 git 저장소를 그림으로 표현해 놓았습니다. 현재 두번 커밋한 상태입니다 -- 첫번째 커밋으로 `C0`, 그 다음으로 `C1`이라는 어떤 의미있는 변화가 있는 커밋이 있습니다.","","아래 버튼을 눌러 새로운 커밋을 만들어보세요"],afterMarkdowns:["이렇게 보입니다! 멋지죠. 우리는 방금 저장소 내용을 변경해서 한번의 커밋으로 저장했습니다. 방금 만든 커밋은 부모는 `C1`이고, 어떤 커밋을 기반으로 변경된 것인지를 가리킵니다."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["계속해서 직접 한번 해보세요! 이 창을 닫고, 커밋을 두 번 하면 다음 레벨로 넘어갑니다"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","git仓库中的一次提交（commit）记录目录下所有文件的快照。感觉像是大量的复制和粘贴，但 git 做的不只这么简单！","",'Git 希望提交记录尽可能地轻量，所以每次进行提交时，它不会简单地复制整个目录。实际上它把每次提交记录保存为从代码库的一个版本到下一个版本的变化集，或者说一个"增量（delta）"。所以，大部分提交记录都有一个父提交（parent commit）-- 我们会很快演示这一点。',"","克隆（clone）代码库时，需要解包（unpack）或者“解析（resolve）”所有的差异。所以在克隆代码库时，可能会看见如下命令行输出：","","`resolving deltas`","","要学的东西有很多，但现在你可以把提交记录看作是项目的快照。提交记录非常轻量且可以快速切换！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在实践中学习commit。右边是一个（小）git代码库的图示。当前有两个提交记录—— 初始提交`C0`和其后可能包含有用修改的提交`C1`。","","点击下面的按钮生成新的提交记录。"],command:"git commit",afterMarkdowns:["看！好玩吧！我们修改了代码，并保存为一次提交记录。刚刚做的提交`C2`有一个父提交（parent）`C1`，代表此次修改的基础。"],beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["接下来你可以随便测试。当前窗口关闭后，完成两次提交就可以过关！"]}}]}}}}),e("/src/levels/intro/commits.js"),e.define("/src/levels/intro/merging.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C4","id":"master"},"bugFix":{"target":"C2","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3","C2"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git checkout -b bugFix;git commit;git checkout master;git commit;git merge bugFix",name:{en_US:"Merging in Git",fr_FR:"Faire des 'merge' (fusions de branches) avec Git",ko:"Git에서 브랜치 합치기(Merge)",ja:"ブランチとマージ",zh_CN:"分支与合并"},hint:{en_US:"Remember to commit in the order specified (bugFix before master)",ja:"指示された順番でコミットすること（masterの前にbugFixで）",fr_FR:"Pensez à faire des commits dans l'ordre indiqué (bugFix avant master)",zh_CN:"记住按指定的顺序提交（bugFix先于master）",ko:"말씀드린 순서대로 커밋해주세요 (bugFix에 먼저 커밋하고 master에 커밋)"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches and Merging","","Great! We now know how to commit and branch. Now we need to learn some kind of way of combining the work from two different branches together. This will allow us to branch off, develop a new feature, and then combine it back in.","",'The first method to combine work that we will examine is `git merge`. Merging in Git creates a special commit that has two unique parents. A commit with two parents essentially means "I want to include all the work from this parent over here and this one over here, *and* the set of all their parents."',"","It's easier with visuals, let's check it out in the next view"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches; each has one commit that's unique. This means that neither branch includes the entire set of \"work\" in the repository that we have done. Let's fix that with merge.","","We will `merge` the branch `bugFix` into `master`"],afterMarkdowns:["Woah! See that? First of all, `master` now points to a commit that has two parents. If you follow the arrows upstream from `master`, you will hit every commit along the way to the root. This means that `master` contains all the work in the repository now.","","Also, see how the colors of the commits changed? To help with learning, I have included some color coordination. Each branch has a unique color. Each commit turns a color that is the blended combination of all the branches that contain that commit.","","So here we see that the `master` branch color is blended into all the commits, but the `bugFix` color is not. Let's fix that..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's merge `master` into `bugFix`:"],afterMarkdowns:["Since `bugFix` was downstream of `master`, git didn't have to do any work; it simply just moved `bugFix` to the same commit `master` was attached to.","","Now all the commits are the same color, which means each branch contains all the work in the repository! Woohoo!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["To complete this level, do the following steps:","","* Make a new branch called `bugFix`","* Checkout the `bugFix` branch with `git checkout bugFix`","* Commit once","* Go back to `master` with `git checkout`","* Commit another time","* Merge the branch `bugFix` into `master` with `git merge`","",'*Remember, you can always re-display this dialog with "help level"!*']}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ブランチとマージ","","いい調子ですね。これまでにコミットとブランチについて学びました。そろそろ2つのブランチを1つにまとめるやり方について見ていきましょう。これができれば新しいフィーチャの開発のために新しいブランチを切って、開発が終わったら変更を元のブランチへ統合することができるようになります。","","はじめに紹介するのは、`git merge`を使ったマージのやり方です。mergeコマンドによって、2つの独立した親を持つ特別なコミットを作ることができます。2つの親を持つコミットが持つ意味とは、「全く別々の場所にいるこの親とその親（*かつ*、それらの親の祖先全て）が持つ全ての変更を含んでいますよ」ということです。","","見てみた方が早いので、次の画面で確認してみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["それぞれ別のコミットを指している2つのブランチがあります。変更が別々のブランチに分散していて統合されていないケースです。これをマージで1つにまとめてみましょう。","","`bugFix`ブランチを`master`ブランチにマージしてみます。"],afterMarkdowns:["わあ。見ましたか？まず初めに、`master`ブランチが2つのコミットを親に持つ新しいコミットを指してますね。`master`から親をたどっていくと、最も古いコミットにたどり着くまでに全てのコミットを含んでいる様が確認できます。これで、全ての変更を含む`master`が完成しました。","","色がどう変わったかにも注目して下さい。学習を助けるために、ブランチ毎に色をつけています。それぞれのブランチは自分の色を持っていて、どのブランチから派生して出てくるか次第でコミットごとの色が決まります。","","今回のコミットには`master`ブランチの色が使われました。しかし`bugFix`ブランチの色がまだ変わってないようなので、これを変えてみましょう。"],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`master`ブランチを`bugFix`ブランチにマージしてみます。"],afterMarkdowns:["`bugFix`ブランチは`master`ブランチの派生元だったので、gitは実際大したことはしていません：`bugFix`ブランチを指していたポインタを`master`が指していたコミットへと移動させただけです。","","これで全てのコミットが同じ色になりました。つまり、リポジトリの中の全ての変更をそれぞれのブランチが持ったことになります。やったね！"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["以下の作業で理解度の確認をしてみましょう。 steps:","","* `bugFix`という名前で新しいブランチを切る","* `git checkout bugFix`コマンドで`bugFix`ブランチをチェックアウトする","* 一回だけコミット","* `git checkout`で`master`へ戻る","* もう1回コミットする","* `git merge`コマンドを使って、`bugFix`ブランチを`master`ブランチへとマージする","",'*注："help level"コマンドでこのヘルプにいつでも戻ってこれます*']}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches et Merges","","Super! Nous savons désormais comment faire des commits et de branches. Maintenant nous devons apprendre comment combiner ensemble les contenus de deux branches différentes. Ceci nous permettra de créer une nouvelle branche, développer une nouvelle fonctionnalité sur cette dernière, puis intégrer cette fonctionnalité en combinant le contenu de cette branche de développement à la branche d'origine(master par exemple).","","La première méthode que nous alons voir pour combiner le conenu de deux branches est `git merge`. Faire un 'merge' en git Git crée un commit spécial qui a deux parents. Un commit avec deux parents indique en susbtance \"Je veux inclure le contenu de ce parent et le conenu de cet autre parent, *et* l'ensemble de leurs parents.\"","","C'est plus facile en visualisant, regardons dans la vue suivante"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches; each has one commit that's unique. This means that neither branch includes the entire set of \"work\" in the repository that we have done. Let's fix that with merge.","","We will `merge` the branch `bugFix` into `master`"],afterMarkdowns:["Woah! See that? First of all, `master` now points to a commit that has two parents. If you follow the arrows upstream from `master`, you will hit every commit along the way to the root. This means that `master` contains all the work in the repository now.","","Also, see how the colors of the commits changed? To help with learning, I have included some color coordination. Each branch has a unique color. Each commit turns a color that is the blended combination of all the branches that contain that commit.","","So here we see that the `master` branch color is blended into all the commits, but the `bugFix` color is not. Let's fix that..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Faisons un merge  de `master` dans `bugFix`:"],afterMarkdowns:["Puisque `bugFix` était un descendant de `master`, git n'avait aucun travail à effectuer; il a simplement déplacé `bugFix` au même commit auquel `master` est attaché.","","Maintenant tous les commits sont de la même couleur, ce qui indique que chaque branche contient tout le contenu du dépôt ! Woohoo!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Pour accomplir ce niveau, effectuez les opérations suivantes :","","* Faites une nouvelle branche appelée `bugFix`","* Positionnez-vous sur la branche `bugFix` avec `git checkout bugFix`","* Faites un commit","* Retournez sur la branche `master` (commande `git checkout`)","* Faites un nouveau commit","* Fusionnez la branche `bugFix` dans `master` avec `git merge`","",'*Rappelez-vous que vous pouvez à tout moment réafficher ces indications avec "help level"!*']}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches and Merging","","Great! 我们已经知道怎么提交和使用分支了。接下来要学的一招是如何合并两个不同分支的工作。这让我们可以新建一个分支，在其上开发新功能，然后合并回主线。","","`git merge`是我们要学习的合并工作的第一个方法。合并产生一个特殊的提交记录，它包含两个唯一父提交。有两个父提交的提交记录本质上是：“我想把这两个父提交本身及它们的父提交集合都包含进来。”","","有图有真相，看看下面的图示就明白了。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["当前有两个分支：各有一个唯一的提交。这意味着没有一个分支包含我们对代码库的所有修改。让我们合并这两个分支来解决这个问题。","","我们要把 `bugFix` 合并到 `master` "],command:"git merge bugFix",afterMarkdowns:["哇！看见木有？首先，`master` 现在指向一个拥有两个父提交的提交记录。假如从 `master` 开始沿着箭头向上游走，在到达起点的路上会经过所有的提交记录。这说明有 `master` 包含了对代码库的所有修改。","","还有，看见各个提交记录的颜色变化了吗？为了帮助学习，我使用了颜色混合。每个分支都有特定的颜色。每个提交记录都变成了含有此提交的所有分支的混合色。","","所以，`master` 分支的颜色被混入到所有的提交记录，但 `bugFix` 没有。接下来就改一下这里吧。"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["让我们把 `master` 分支合并到 `bugFix` 吧。"],command:"git checkout bugFix; git merge master",afterMarkdowns:["因为 `bugFix` 分支在 `master` 分支的下游，git什么都不用做，只是简单地把`bugfix`分支移动到`master`指向的提交记录。","","现在所有的提交记录的颜色都是一样的啦，这表明每一个分支都包含了代码库的所有修改！继续！"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["想完成此关，执行收下操作：","","* 创建新分支 `bugFix` ","* 用 `git checkout bugFix` 切换到 `bugFix`分支","* 提交一次","* 用 `git checkout` 切换回 `master` ","* 再提交一次","* 用 `git merge` 合并 `bugFix`分支进 `master`","",'*记住，总是可以用 "help level" 命令来重新显示这个对话框！*']}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 브랜치와 합치기(Merge)","","좋습니다! 지금까지 커밋하고 브랜치를 만드는 방법을 알아봤습니다. 이제 두 별도의 브랜치를 합치는 몇가지 방법을 알아볼 차례입니다. 이제부터 배우는 방법으로 브랜치를 따고, 새 기능을 개발 한 다음 합칠 수 있게 될 것입니다.","",'처음으로 살펴볼 방법은 `git merge`입니다. Git의 합치기(merge)는 두 개의 부모(parent)를 가리키는 특별한 커밋을 만들어 냅니다. 두개의 부모가 있는 커밋이라는 것은 "한 부모의 모든 작업내역과 나머지 부모의 모든 작업, *그리고* 그 두 부모의 모든 부모들의 작업내역을 포함한다"라는 의미가 있습니다. ',"","그림으로 보는게 이해하기 쉬워요. 다음 화면을 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기에 브랜치가 두 개 있습니다. 각 브랜치에 독립된 커밋이 하나씩 있구요. 그 말은 이 저장소에 지금까지 작업한 내역이 나뉘어 담겨 있다는 얘기입니다. 두 브랜치를 합쳐서(merge) 이 문제를 해결해 볼까요?","","`bugFix` 브랜치를 `master` 브랜치에 합쳐(merge) 보겠습니다."],afterMarkdowns:["보셨어요? 우선, `master`가 두 부모가 있는 커밋을 가리키고 있습니다. ","","또, 커밋들의 색이 바뀐 것을 눈치 채셨나요? 이해를 돕기위해 색상으로 구분해 표현했습니다. 각 브랜치는 그 브랜치만의 색상으로 그렸습니다. 브랜치가 합쳐지는 커밋의 경우에는, 그 브랜치들의 색을 조합한 색상으로 표시 했습니다.","","그런식으로 여기에 `bugFix`브랜치 쪽을 제외한 나머지 커밋만 `master` 브랜치의 색으로 칠해져 있습니다. 이걸 고쳐보죠..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["이제 `master` 브랜치에 `bugFix`를 합쳐(merge) 봅시다:"],afterMarkdowns:["`bugFix`가 `master`의 부모쪽에 있었기 때문에, git이 별다른 일을 할 필요가 없었습니다; 간단히 `bugFix`를 `master`가 붙어 있는 커밋으로 이동시켰을 뿐입니다.","","짜잔! 이제 모든 커밋의 색이 같아졌고, 이는 두 브랜치가 모두 저장소의 모든 작업 내역을 포함하고 있다는 뜻입니다."],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["아래 작업을 해서 이 레벨을 통과하세요:","","* `bugFix`라는 새 브랜치를 만듭니다","* `git checkout bugFix`를 입력해 `bugFix` 브랜치로 이동(checkout)합니다.","* 커밋 한 번 하세요","* `git checkout` 명령어를 이용해 `master`브랜치로 돌아갑니다","* 커밋 또 하세요","* `git merge` 명령어로 `bugFix`브랜치를 `master`에 합쳐 넣습니다.","",'*아 그리고, "help level" 명령어로 이 안내창을 다시 볼 수 있다는 것을 기억해 두세요!*']}}]}}}}),e("/src/levels/intro/merging.js"),e.define("/src/levels/intro/rebasing.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22bugFix%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C2%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22bugFix%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout -b bugFix;git commit;git checkout master;git commit;git checkout bugFix;git rebase master",name:{en_US:"Rebase Introduction",ja:"Rebaseの解説",fr_FR:"Introduction à rebase",ko:"리베이스(rebase)의 기본",zh_CN:"Rebase简介"},hint:{en_US:"Make sure you commit from bugFix first",ja:"初めにbugFixを指した状態でコミットする",fr_FR:"Assurez-vous de bien faire votre en premier votre commit sur bugFix",ko:"bugFix 브랜치에서 먼저 커밋하세요",zh_CN:"确保你先在 bugFix 分支进行提交"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'The second way of combining work between branches is *rebasing.* Rebasing essentially takes a set of commits, "copies" them, and plops them down somewhere else.',"","While this sounds confusing, the advantage of rebasing is that it can be used to make a nice linear sequence of commits. The commit log / history of the repository will be a lot cleaner if only rebasing is allowed.","","Let's see it in action..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches yet again; note that the bugFix branch is currently selected (note the asterisk)","","We would like to move our work from bugFix directly onto the work from master. That way it would look like these two features were developed sequentially, when in reality they were developed in parallel.","","Let's do that with the `git rebase` command"],afterMarkdowns:["Awesome! Now the work from our bugFix branch is right on top of master and we have a nice linear sequence of commits.","",'Note that the commit C3 still exists somewhere (it has a faded appearance in the tree), and C3\' is the "copy" that we rebased onto master.',"","The only problem is that master hasn't been updated either, let's do that now..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now we are checked out on the `master` branch. Let's go ahead and rebase onto `bugFix`..."],afterMarkdowns:["There! Since `master` was downstream of `bugFix`, git simply moved the `master` branch reference forward in history."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["To complete this level, do the following","","* Checkout a new branch named `bugFix`","* Commit once","* Go back to master and commit again","* Check out bugFix again and rebase onto master","","Good luck!"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","","ブランチを一つにまとめる方法として前回はマージを紹介しましたが、今回紹介するリベースを使うこともできます。リベースの動作は、マージするコミットのコピーをとって、どこかにストンと落とすというイメージです。","","ピンと来ないかもしれませんが、リベースのメリットは一本の連続したシーケンシャルなコミットに整形できることです。リベースだけ使っていると、コミットのログや履歴が非常にクリーンな状態に保たれます。","","早速実際にどう動くのかを見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["前回と同様の2つのブランチを考えます：仮にいまbugFixブランチをチェックアウトしているとします。（アスタリスクつきのもの）","","bugFixに入ってる作業内容をそのまま直接masterブランチ上の内容に移動したいとします。こうすることで、実際には並行して開発された2つの別々のブランチ上のフィーチャを、あたかも1本のブランチ上でシーケンシャルに開発されていたかのように見せることができます。","","`git rebase`コマンドでそれをやってみましょう。"],afterMarkdowns:["できた！これでbugFixブランチの作業内容はmasterブランチのすぐ先に移動したので、見た目が一本になってスッキリしました。","","気を付けてほしいのは、C3コミットはどこかに残ってるということ（ツリーの中で半透明にしてあります）、そしてC3'は（C3との接続が切れているC3の）コピーがmasterブランチ上に作られているということです。","","一つ問題が残ってて、masterブランチがまだ最新化されていませんね。ちょっと直してみましょう。。"],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["masterブランチはチェックアウトしてあります。この状態からmasterブランチを`bugFix`へとリベースしてみましょう。"],afterMarkdowns:["できた！`master`は`bugFix`の直前のコミットだったので、gitは単純に`master`ブランチのポインタを前に進めただけでした。"],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["以下の作業で理解度の確認をしてみましょう。","","* `bugFix`という名前の新しいブランチをチェックアウトする","* 一回だけコミット","* masterブランチに戻ってもう1回コミット","* bugFixをもう1回チェックアウトして、master上にリベース","","幸運を祈る！"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'La seconde façon de combiner les contenus de deux branches est *rebase*. Rebase prend un enselble de commits, les "recopie", et les ajoute en bout de chaine à un autre endroit.',"","Bien que cela puisse sembler compliqué, l'avantage de rebase est de permettre d'obtenir une simple séquence linéeire de commits. Les logs/l'historique du dépôt seront bien plus propres si seul rebase est autorisé (plutôt que merge).","","Voyons rebase en action…"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ici nous avons encore une fois deux branches; notez que nous sommes sur la branche bugFix (cf. l'asterisque)","","Nous voudrions transferer notre travail sur la branche 'bugFix' directement sur le travail dans 'master'. Ainsi on aurait l'impression que ces deux travaux ont été développés séquentiellement alors qu'en réalité ils ont été réalisés en parallèle.","","Faisons cela avec la commande `git rebase`"],afterMarkdowns:["Super! Désormais, le travail de la branche 'bugFix' est juste en haut de la branche 'master' et non avons une belle séquence linéaire de commits.","","Notez que le commit C3 existe toujours quelquepart (il est en grisé sur l'arbre), et C3' est la  \"copie\" que nous avons créée sur master avec rebase.","","Le seul problème est que master n'a pas été mis à jour, faisons cela maintenant…"],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nous sommes désormais positionnés sur la branche `master`. Continuons en faisant le rebase sur `bugFix`…","Et voilà ! Puisque `master` était un ascendant de `bugFix`, git a simplement déplacé la référence de la branche `master` en avant dans le temps."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Pour acomplir ce niveau, faites les opérations suivantes","","* Positionnez-vous (checkout) sur une nouvelle branche nommée `bugFix`","* Faites un commit","* Retournez sur master et faites un nouveau commit","* Positionnez-vous à nouveau sur bugFix et faites un rebase sur master","","Bonne chance !"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'*rebasing*是在分支之间合并工作的第二种方法。Rebasing就是取出一系列的提交记录，"复制"它们，然后把在别的某个地方放下来。',"","虽然听上去难以理解，rebasing 的优势是可以创造更线性的提交历史。假如只允许使用rebasing，代码库的提交日志/历史会更好看。","","让我们亲身体会下……"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这里，还是有两个分支；注意当前分支是 bugFix（看那颗星）","","我们想要把 bugfix 里面的工作直接移到 master 分支上。使用这个方法，两个分支的功能看起来像是按顺序开发，实际上它们是平行开发的。","","用 `git rebase`实现此目标"],command:"git rebase master",afterMarkdowns:["好完吧，现在 bugFix 分支上的工作在 master 的最前端，同时我们也得到了一个更线性的提交序列。","","注意，提交记录 C3 仍然存在（阴影的那货就是你了，还看什么看），而我们已经将 C3 复制到了master。","","现在唯一的问题是 master 分支还没有更新……下面就来更新它吧"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在，切换到 `master` 分支。接下来就把它 rebase 到 `bugFix` 吧……"],command:"git rebase bugFix",afterMarkdowns:["完成！因为 `master` 是 `bugFix` 的下游，所以 git 只把 `master` 分支的记录前移到 `bugFix` 上。"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["想完成此关，执行以下操作：","","* 新建`bugFix`分支","* 提交一次","* 切换回 master 分支再提交一次","* 再次切换到 bugFix 分支，rebase 到 master 上","","祝你好运啦！"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 리베이스(Rebase)","","브랜치끼리의 작업을 접목하는 두번째 방법은 *리베이스(rebase)*입니다. 리베이스는 기본적으로 커밋들을 모아서 복사한 뒤, 다른 곳에 떨궈 놓는 것입니다.","","조금 어려게 느껴질 수 있지만, 리베이스를 하면 커밋들의 흐름을 보기 좋게 한 줄로 만들 수 있다는 장점이 있습니다. 리베이스를 쓰면 저장소의 커밋 로그와 이력이 한결 깨끗해집니다.","","어떻게 동작하는지 살펴볼까요..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기 또 브랜치 두 개가 있습니다; bugFix브랜치가 현재 선택됐다는 점 눈여겨 보세요 (별표 표시)","","bugFix 브랜치에서의 작업을 master 브랜치 위로 직접 옮겨 놓으려고 합니다. 그렇게 하면, 실제로는 두 기능을 따로따로 개발했지만, 마치 순서대로 개발한 것처럼 보이게 됩니다.","","`git rebase` 명령어로 함께 해보죠."],afterMarkdowns:["오! 이제 bugFix 브랜치의 작업 내용이 master의 바로 위에 깔끔한 한 줄의 커밋으로 보이게 됐습니다.","","C3 커밋은 어딘가에 아직 남아있고(그림에서 흐려짐), C3'는 master 위에 올려 놓은 복사본입니다.","","master가 아직 그대로라는 문제가 남아있는데요, 바로 해결해보죠..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["우리는 지금 `master` 브랜치를 선택한 상태입니다. `bugFix` 브랜치쪽으로 리베이스 해보겠습니다..."],afterMarkdowns:["보세요! `master`가 `bugFix`의 부모쪽에 있었기 때문에, 단순히 그 브랜치를 더 앞쪽의 커밋을 가리키게 이동하는 것이 전부입니다."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["이하 작업을 하면 이번 레벨을 통과합니다","","* `bugFix`라는 새 브랜치를 만들어 선택하세요","* 커밋 한 번 합니다","* master로 돌아가서 또 커밋합니다","* bugFix를 다시 선택하고 master에 리베이스 하세요","","화이팅!"]}}]}}}}),e("/src/levels/intro/rebasing.js"),e.define("/src/levels/mixed/grabbingOneCommit.js",function(e,t,n,r,i,s,o){n.level={compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(e){return e.C4>e.C1}]},disabledMap:{"git revert":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22master%22%7D%2C%22debug%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22debug%22%7D%2C%22printf%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22printf%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22bugFix%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout master;git cherry-pick C4",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"debug":{"target":"C2","id":"debug"},"printf":{"target":"C3","id":"printf"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',name:{ko:"딱 한개의 커밋만 가져오기",en_US:"Grabbing Just 1 Commit",ja:"Grabbing Just 1 Commit",zh_CN:"只取一个提交"},hint:{en_US:"Remember, interactive rebase or cherry-pick is your friend here",ja:"このレベルではインタラクティブモードのrebaseやcherry-pickがクリアのカギです",ko:"대화식 리베이스(rebase -i)나 or 체리픽(cherry-pick)을 사용하세요",zh_CN:"记住，交互式 rebase 或者 cherry-pick 会很有帮助"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Locally stacked commits","","Here's a development situation that often happens: I'm trying to track down a bug but it is quite elusive. In order to aid in my detective work, I put in a few debug commands and a few print statements.","","All of these debugging / print statements are in their own branches. Finally I track down the bug, fix it, and rejoice!","","Only problem is that I now need to get my `bugFix` back into the `master` branch. If I simply fast-forwarded `master`, then `master` would get all my debug statements which is undesirable. There has to be another way..."]}},{type:"ModalAlert",options:{markdowns:["We need to tell git to copy only one of the commits over. This is just like the levels earlier on moving work around -- we can use the same commands:","","* `git rebase -i`","* `git cherry-pick`","","To achieve this goal."]}},{type:"ModalAlert",options:{markdowns:["This is a later level so we will leave it up to you to decide which command you want to use, but in order to complete the level, make sure `master` receives the commit that `bugFix` references."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ローカルに積み上がったコミット","","実際の開発ではこういうケースがよくあります：「バグの原因調査を試みているがバグの再現性がかなり低い。調査の補助のために、いくつかのデバッグ用の命令やprint文を差し込んでいる。」","","これらのデバッグ用のコードはバグ修正用のブランチにコミットされています。そしてついにバグの原因を突き止めて、修正した！やった！","","あとは`bugFix`ブランチを`master`ブランチに統合できればOK。そこで単純に`master`をfast-forwardすればよいかというと、それでは`master`ブランチの中にデバッグ用のコードも混入してしまいます。"]}},{type:"ModalAlert",options:{markdowns:["ここでGitの魔法が力を発揮します。解決のためにはいくつかの方法がありますが、最も素直な解決方法は2つあって：","","* `git rebase -i`","* `git cherry-pick`","","インタラクティブモードの（`-i`オプションつきの）rebaseによって、保持したいコミットと破棄したいコミットを選り分けることができます。コミットの順序を変更することも可能です。この方法は、一部の変更をどこかへやってしまいたい時に便利です。","","もう一方のcherry-pickを使うと、持っていきたいコミットを選んで`HEAD`の先にストンと落とすことができます。"]}},{type:"ModalAlert",options:{markdowns:["後半の章ですのでどう解決するかをもう自分で考えることができると思います。このレベルをクリアするためには、`bugFix`が持っているコミットを`master`ブランチが受け取る必要がある点には注意してください。"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 本地栈式提交 (Locally stacked commits)","","设想一下一个经常发生的场景：我在追踪一个有点棘手的 bug，为了更好地排查，我添加了一些调试命令和打印语句。","","所有的这些调试和打印语句都只在它们自己的分支里。最终我终于找到这个 bug，揪出来 fix 掉，然后撒花庆祝！","","现在唯一的问题就是要把我在 `bugFix` 分支里的工作合并回 `master` 分支。我可以简单地把 `master` 分支快进（fast-forward），但这样的话 `master` 分支就会包含我这些调试语句了。"]}},{type:"ModalAlert",options:{markdowns:["现在就是 Git 大显神通的时候啦。解决这个问题的方法不止一个，但最直接的两个方法是：","","* `git rebase -i`","* `git cherry-pick`","","交互（`-i`）衍合允许你选择哪些提交是要被保留，哪些要被舍弃。它允许你将提交重新排序。假如你要舍弃一些工作，这个会帮上很大的忙。","","Cherry-picking 能让你选择单独一个提交并且把它放到 `HEAD` 的最前端。"]}},{type:"ModalAlert",options:{markdowns:["本关是可选关卡，玩不玩随便你。但是如果你坚持要刷，确保 `master` 分支能拿到 `bugFix` 分支的相关提交（references）。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 로컬에 쌓인 커밋들","","개발중에 종종 이런 상황이 생깁니다: 잘 띄지 않는 버그를 찾아서 해결하려고, 어떤 부분의 문제인지를 찾기 위해 디버그용 코드와 화면에 정보를 프린트하는 코드 몇 줄 넣습니다. ","","디버깅용 코드나 프린트 명령은 그 브랜치에 들어있습니다. 마침내 버그를 찾아서 고쳤고, 원래 작업하는 브랜치에 합치면 됩니다!","","이제 `bugFix`브랜치의 내용을 `master`에 합쳐 넣으려 하지만, 한 가지 문제가 있습니다. 그냥 간단히 `master`브랜치를 최신 커밋으로 이동시킨다면(fast-forward) 그 불필요한 디버그용 코드들도 함께 들어가 버린다는 문제죠."]}},{type:"ModalAlert",options:{markdowns:["여기에서 Git의 마법이 드러납니다. 이 문제를 해결하는 여러가지 방법이 있습니다만, 가장 간단한 두가지 방법 아래와 같습니다:","","* `git rebase -i`","* `git cherry-pick`","","대화형 (-i 옵션) 리베이스(rebase)로는 어떤 커밋을 취하거나 버릴지를 선택할 수 있습니다. 또 커밋의 순서를 바꿀 수도 있습니다. 이 커맨드로 어떤 작업의 일부만 골라내기에 유용합니다.","","체리픽(cherry-pick)은 개별 커밋을 골라서 `HEAD`위에 떨어뜨릴 수 있습니다."]}},{type:"ModalAlert",options:{markdowns:["이번 레벨을 통과하기 위해 어떤 방법을 쓰시든 자유입니다만, `master`브랜치가 `bugFix` 브랜치의 커밋을 일부 가져오게 해주세요."]}}]}}}}),e("/src/levels/mixed/grabbingOneCommit.js"),e.define("/src/levels/mixed/jugglingCommits.js",function(e,t,n,r,i,s,o){n.level={disabledMap:{"git cherry-pick":!0,"git revert":!0},compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(e){return e.C2>e.C3},function(e){return e.C2>e.C1}]},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%27%22%2C%22id%22%3A%22master%22%7D%2C%22newImage%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22newImage%22%7D%2C%22caption%22%3A%7B%22target%22%3A%22C3%27%27%22%2C%22id%22%3A%22caption%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%2C%22C2%27%27%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%27%27%22%7D%2C%22C3%27%27%22%3A%7B%22parents%22%3A%5B%22C2%27%27%27%22%5D%2C%22id%22%3A%22C3%27%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase -i HEAD~2;git commit --amend;git rebase -i HEAD~2;git rebase caption master",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"newImage":{"target":"C2","id":"newImage"},"caption":{"target":"C3","id":"caption"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"caption","id":"HEAD"}}',name:{ko:"커밋들 갖고 놀기",en_US:"Juggling Commits",ja:"Juggling Commits",zh_CN:"有趣的提交(commits)"},hint:{en_US:"The first command is git rebase -i HEAD~2",ja:"最初に打つコマンドはgit rebase -i HEAD~2",ko:"첫번째 명령은 git rebase -i HEAD~2 입니다",zh_CN:"第一个命令是 'git rebase -i HEAD~2'"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Juggling Commits","","Here's another situation that happens quite commonly. You have some changes (`newImage`) and another set of changes (`caption`) that are related, so they are stacked on top of each other in your repository (aka one after another).","","The tricky thing is that sometimes you need to make a small modification to an earlier commit. In this case, design wants us to change the dimensions of `newImage` slightly, even though that commit is way back in our history!!"]}},{type:"ModalAlert",options:{markdowns:["We will overcome this difficulty by doing the following:","","* We will re-order the commits so the one we want to change is on top with `git rebase -i`","* We will `commit --amend` to make the slight modification","* Then we will re-order the commits back to how they were previously with `git rebase -i`","* Finally, we will move master to this updated part of the tree to finish the level (via the method of your choosing)","","There are many ways to accomplish this overall goal (I see you eye-ing cherry-pick), and we will see more of them later, but for now let's focus on this technique."]}},{type:"ModalAlert",options:{markdowns:["Lastly, pay attention to the goal state here -- since we move the commits twice, they both get an apostrophe appended. One more apostrophe is added for the commit we amend, which gives us the final form of the tree ","","That being said, I can compare levels now based on structure and relative apostrophe differences. As long as your tree's `master` branch has the same structure and relative apostrophe differences, I'll give full credit"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commitsをやりくりする","","開発中に頻繁に起こるケースをもう1つ考えます。ある変更（`newImage`）とまた別の変更（`caption`）があって、それらに依存関係があるとします。この一連の変更が一列に積み重なっているとします。","","ここでトリッキーなのは、以前のコミットに対して微修正をかけなければならないケースがあるということです。今回の教材でも、過去のコミットであるにも関わらず`newImage`ブランチに僅かな修正を加えるような設計の修正が入ったとしましょう。"]}},{type:"ModalAlert",options:{markdowns:["この困難な状況を、以下の手順で克服することを考えます：","","* `git rebase -i`を使って順番を変更する。これで、変更をかけたいコミットを一番先頭に持ってくる。","* `commit --amend`コマンドで僅かな変更を行う","* `git rebase -i`コマンドを再度使って、先頭に持ってきていたコミットを元に戻す","* 最後に、レベルクリアのためにmasterブランチを先頭に持ってくる","","クリアのための方法はいくつもありますが（cherry-pickを使うこともできます）、別の回答はまた後程の章で見ることにんして、今回は上記の方法でやってみることにしましょう。"]}},{type:"ModalAlert",options:{markdowns:["最後に、ゴール時点での状態に気を付けてください。今回2回ほどコミットを動かしますから、コミットへのポインタにはアポストロフィ（'）が追加されます。commit --amendコマンドの実行でできたコミットには更にもう1つのアポストロフィが追加されます。 "]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 有趣的提交(commits)","","下面这种情况也是经常出现的。例如你之前已经在 `newImage` 分支上做了一些提交，然后又在 `caption` 分支上做了一些相关的提交，因此它们看起来是一个连一个的（stacked on top of each other in your repository）。","","有点棘手的就是有时候你又想往先前的提交里做些小改动。呐，现在就是设计师想要我们去轻微改变下 `newImage` 的内容（change the dimensions slightly），尽管那个提交是很久很久以前的了。"]}},{type:"ModalAlert",options:{markdowns:["为了实现他的愿望，我们可以按照下面的方法来做：","","* 先用 `git rebase -i` 将提交重新排序，然后把我们想要修改的提交挪到最前","* 然后用 `commit --amend` 来进行一些小修改","* 接着再用 `git rebase -i` 来将他们按最开始的顺序重新排好","* 最后我们把 master 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！","","当然还有许多方法可以完成这个任务（我知道你在看 cherry-pick 啦），之后我们会多点关注这些技巧啦，但现在暂时只专注上面这种方法。"]}},{type:"ModalAlert",options:{markdowns:["啊最后还要提醒你一下最终的形式 —— 因为我们把这个提交移动了两次，所以会分别产生一个省略提交（both get an apostrophe appended）。还有一个省略提交是因为我们为了实现最终效果去修改提交而添加的。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 커밋들 갖고 놀기","","이번에도 꽤 자주 발생하는 상황입니다. `newImage`와 `caption` 브랜치에 각각의 변경내역이 있고 서로 약간 관련이 있어서, 저장소에 차례로 쌓여있는 상황입니다.","","때로는 이전 커밋의 내용을 살짝 바꿔야하는 골치아픈 상황에 빠지게 됩니다. 이번에는 디자인 쪽에서 우리의 작업이력(history)에서는 이미 한참 전의 커밋 내용에 있는 `newImage`의 크기를 살짝 바꿔달라는 요청이 들어왔습니다."]}},{type:"ModalAlert",options:{markdowns:["이 문제를 다음과 같이 풀어봅시다:","","* `git rebase -i` 명령으로 우리가 바꿀 커밋을 가장 최근 순서로 바꾸어 놓습니다","* `commit --amend` 명령으로 커밋 내용을 정정합니다","* 다시 `git rebase -i` 명령으로 이 전의 커밋 순서대로 되돌려 놓습니다","* 마지막으로, master를 지금 트리가 변경된 부분으로 이동합니다. (편하신 방법으로 하세요)","","이 목표를 달성하기 위해서는 많은 방법이 있는데요(체리픽을 고민중이시죠?), 체리픽은 나중에 더 살펴보기로 하고, 우선은 위의 방법으로 해결해보세요."]}},{type:"ModalAlert",options:{markdowns:["최종적으로, 목표 결과를 눈여겨 보세요 -- 우리가 커밋을 두 번 옮겼기 때문에, 두 커밋 모두 따옴표 표시가 붙어있습니다. 정정한(amend) 커밋은 따옴표가 추가로 하나 더 붙어있습니다."]}}]}}}}),e("/src/levels/mixed/jugglingCommits.js"),e.define("/src/levels/mixed/jugglingCommits2.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%7D%2C%22newImage%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22newImage%22%7D%2C%22caption%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22caption%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%27%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout master;git cherry-pick C2;git commit --amend;git cherry-pick C3",disabledMap:{"git revert":!0},startTree:'{"branches":{"master":{"target":"C1","id":"master"},"newImage":{"target":"C2","id":"newImage"},"caption":{"target":"C3","id":"caption"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"caption","id":"HEAD"}}',compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(e){return e.C2>e.C3},function(e){return e.C2>e.C1}]},name:{ko:"커밋 갖고 놀기 #2",en_US:"Juggling Commits #2",ja:"コミットをやりくりする その2",zh_CN:"有趣的提交(commits) #2"},hint:{en_US:"Don't forget to forward master to the updated changes!",ja:"masterのポインタを先に進めることを忘れずに！",ko:"master를 변경 완료한 커밋으로 이동(forward)시키는 것을 잊지 마세요!",zh_CN:"别忘记了将 master 快进到最新的更新上！"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Juggling Commits #2","","*If you haven't completed Juggling Commits #1 (the previous level), please do so before continuing*","","As you saw in the last level, we used `rebase -i` to reorder the commits. Once the commit we wanted to change was on top, we could easily --amend it and re-order back to our preferred order.","","The only issue here is that there is a lot of reordering going on, which can introduce rebase conflicts. Let's look at another method with `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Remember that git cherry-pick will plop down a commit from anywhere in the tree onto HEAD (as long as that commit isn't upstream).","","Here's a small refresher demo:"],afterMarkdowns:["Nice! Let's move on"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["So in this level, let's accomplish the same objective of amending `C2` once but avoid using `rebase -i`. I'll leave it up to you to figure it out! :D","","Remember, the exact number of apostrophe's (') on the commit are not important, only the relative differences. For example, I will give credit to a tree that matches the goal tree but has one extra apostrophe everywhere"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## コミットをやりくりする その2","","*注意 この一つ前のレベル「コミットをやりくりする」をクリアしていない人は、まずそちらの問題をクリアしてきてください*","","前回見てきたように、コミット順序の変更のために、私たちは`rebase -i`コマンドを利用しました。ツリーの先頭に変更対象のコミットがあれば、--amendオプションを使うことで容易に変更を書きかえて、元の順序に戻すことができます。","","この場合に心配なことが一つだけあって、それは複数回の順序の変更が行われるので、rebaseのコンフリクト（衝突）が起こりうることです。こういうケースへの対策として、`git cherry-pick`を使った別の解決法について考えてみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git cherry-pickを使うと、ツリーの中から複数のコミットを選んで、HEADの下に新しく作ることができましたね。","","簡単なデモを見てみましょう："],afterMarkdowns:["できました！次へ進みましょう"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルでは、`C2`をamendすることで前回と同じ目的を達成しましょう。但し`rebase -i`は使わずにクリアしてください。どんな方法で進めるかはあなたにおまかせします！:D"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 有趣的提交(commits) #2","","*假如你还没有完成有趣的提交(commits) #1（前一关），这关不让玩哦！*","","如你在上一关所见，我们使用 `rebase -i` 来重排那些提交。只要把我们想要的提交挪到最顶端，我们就可以很容易地改变它，然后把它们重新排成我们想要的顺序。","","但唯一的问题就是这样做就要排很多次，有可能造成衍合冲突（rebase conflicts）。下面就看看用另外一种方法 `git cherry-pick` 是怎么做的吧。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["要在心理牢记 cherry-pick 可以从提交树的任何地方拿一个提交来放在 HEAD 上（尽管那个提交不在上游）。","","下面是一个小小的演示："],command:"git cherry-pick C2",afterMarkdowns:["好滴咧，我们继续"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["那么这关呢，和上一关一样要改变提交 `C2`，但你要避免使用 `rebase -i`。自己想想要怎么解决吧，骚年！ :D"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 커밋 갖고 놀기 #2","","*만약 이전 레벨의 커밋 갖고 놀기 #1을 풀지 않으셨다면, 계속하기에 앞서서 꼭 풀어보세요*","","이전 레벨에서 보셨듯이 `rebase -i` 명령으로 커밋의 순서를 바꿀 수 있습니다. 정정할 커밋이 바로 직전(top)에 있으면 간단히 --amend로 수정할 수 있고, 그리고 나서 다시 원하는 순서로 되돌려 놓으면 됩니다.","","이번에 한가지 문제는 순서를 꽤 많이 바꿔야한다는 점인데요, 그러다가 리베이스중에 충돌이 날 수 있습니다. 이번에는 다른 방법인 `git cherry-pick`으로 해결해 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git cherry-pick으로 HEAD에다 어떤 커밋이든 떨어 뜨려 놓을 수 있다고 알려드린것 기억나세요? (단, 그 커밋이 현재 가리키고 있는 커밋이 아니어야합니다)","","간단한 데모로 다시 알려드리겠습니다:"],afterMarkdowns:["좋아요! 계속할게요"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["그럼 이번 레벨에서는 아까와 마찬가지로 `C2` 커밋의 내용을 정정하되, `rebase -i`를 쓰지 말고 해보세요. ^.~"]}}]}}}}),e("/src/levels/mixed/jugglingCommits2.js"),e.define("/src/levels/rampup/cherryPick.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22bugFix%22%7D%2C%22side%22%3A%7B%22target%22%3A%22C5%22%2C%22id%22%3A%22side%22%7D%2C%22another%22%3A%7B%22target%22%3A%22C7%22%2C%22id%22%3A%22another%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C6%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git cherry-pick C3 C4 C7",compareOnlyMasterHashAgnostic:!0,disabledMap:{"git rebase":!0},startTree:'{"branches":{"master":{"target":"C1","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"side":{"target":"C5","id":"side"},"another":{"target":"C7","id":"another"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C1"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{fr_FR:"Introduction à cherry-pick",en_US:"Cherry-pick Intro",de_DE:"Einführung Cherry-picking",ja:"cherry-pick入門",es_AR:"Introducción a cherry-pick",pt_BR:"Introdução ao cherry-pick",zh_CN:"介绍 Cherry-pick",zh_TW:"介紹 cherry-pick",ru_RU:"Введение в Cherry-pick",ko:"Cherry-pick 소개",uk:"Знайомство з cherry-pick"},hint:{fr_FR:"git cherry-pick suivis par les noms de commits",en_US:"git cherry-pick followed by commit names!",de_DE:"git cherry-pick gefolgt von Commit-Namen.",ja:"git cherry-pickの後にコミット名を追加",es_AR:"git cherry-pick seguido de los nombres de los commits",pt_BR:"git cherry-pick seguido dos nomes dos commits",zh_CN:"git cherry-pick 后面跟着 commit 的名字",zh_TW:"git cherry-pick 後面要接著 commit 的名稱",ru_RU:"git cherry-pick основывается на именах коммитов!",ko:"커밋의 이름들로 git cherry-pick 하세요!",uk:"git cherry-pick базується на іменах комітів!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moving Work Around","","So far we've covered the basics of git -- committing, branching, and moving around in the source tree. Just these concepts are enough to leverage 90% of the power of git repositories and cover the main needs of developers.","",'That remaining 10%, however, can be quite useful during complex workflows (or when you\'ve gotten yourself into a bind). The next concept we\'re going to cover is "moving work around" -- in other words, it\'s a way for developers to say "I want this work here and that work there" in precise, eloquent, flexible ways.',"","This may seem like a lot, but it's a simple concept."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","The first command in this series is called `git cherry-pick`. It takes on the following form:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","It's a very straightforward way of saying that you would like to copy a series of commits below your current location (`HEAD`). I personally love `cherry-pick` because there is very little magic involved and it's easy to understand.","","Let's see a demo!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here's a repository where we have some work in branch `side` that we want to copy to `master`. This could be accomplished through a rebase (which we have already learned), but let's see how cherry-pick performs."],afterMarkdowns:["That's it! We wanted commits `C2` and `C4` and git plopped them down right below us. Simple as that!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["To complete this level, simply copy some work from the three branches shown into master. You can see which commits we want by looking at the goal visualization.",""]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Déplacer votre travail","","Nous avons maintenant pratiqué les bases de git -- commits, branches, et déplacements dans l'arbre des commits. Ces seuls concepts sont suffisants pour utiliser 90% du pouvoir des dépôt git et satisfaire les principaux besoins des développeurs.","",'Les 10% restants, cependant, peuvent être assez utiles pour systèmes assez complexes (ou quand vous vous êtes mis tout seul dans le pétrin). Le prochain concept que nous allons aborder est "le déplacement de travail" (moving work around) -- en d\'autres termes, c\'est une façon des développeurs de dire  "Je veux ce travail ici et cet autre là.".',"","Cela peut sembler compliqué, mais c'est un concept simple."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","La première commande de cette série est `git cherry-pick`. Elle a le prototype suivant :","","* `git cherry-pick <Commit1> <Commit2> <...>`","","C'est une manière simple de dire qu'on voudrait copier une série de commits en-dessous de notre emplacement actuel (`HEAD`). Personnellement, j'adore `cherry-pick` parce qu'il y a un petit peu de magie dedans, et parce que c'est facile à comprendre.","","Faisons une démonstration !",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ici le dépôt que nous avons contient du travail dans la branche `side`, que nous voulons copier dans `master`. Cela pourrait être fait avec un rebase (que nous avons déjà appris), mais voyons comment cherry-pick fonctionne."],afterMarkdowns:["Voilà ! Nous voulions les commits `C2` et `C4` et git les a fait apparaître juste sous nos jambes. Aussi simple que ça !"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, copiez simplement le travail désigné dans la branche master. Vous pouvez voir les commits que nous souhaitons avoir en regardant dans la fenêtre d'objectif.",""]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moviendo el trabajo por ahí","","Hasta ahora cubrimos lo básico de git -- commitear, branchear, y movernos por el árbol de commits. Estos conceptos alcanzan para aprovechar el 90% del poder de los repositorios de git y cubrir las necesidades principales de los desarrolladores.","",'El 10% restante, sin embargo, puede ser bastante útil en flujos de trabajo complejos (o cuando te metiste en algún problema complicado). El próximo concepto que vamos a cubrir es el de "mover el trabajo por ahí" -- en otras palabras, una forma que tienen los desarrolladores de decir "Quiero este trabajo allá y este otro allá" de una manera precisa, elocuente y flexible.',"","Puede parecer un montón, pero es un concepto bastante simple."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","El primer comando en esta serie se llama `git cherry-pick`. Tiene la siguiente forma:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Es una manera bastante directa de decir que querés copiar una serie de commits sobre tu ubicación actual (`HEAD`). Personalmente amo `cherry-pick` porque hay muy poca magia involucrada y es bastante simple de entender.","","¡Veamos una demo!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Acá tenemos un repositorio con algo de trabajo en la rama `side` que queremos copiar a `master`. Podríamos lograrlo con un rebase (y ya aprendimos cómo), pero veamos cómo se comporta cherry-pick."],afterMarkdowns:["¡Eso es todo! Queríamos los commits `C2` y `C4` y git los aplicó justo donde estábamos. ¡Tan simple como eso!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente copiá algo de trabajo desde otras tres ramas a master. Podés ver qué commits queremos en la visualización del objetivo.",""]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Movendo trabalho por aí","","Por enquanto nós abordamos o básico do Git -- commitar, criar ramos, e mover-se pela árvore. Apenas esses conceitos já são suficientes para utilizar 90% do poder dos repositórios Git, e cobrem as principais necessidades dos desenvolvedores.","",'Os 10% restantes, entretanto, podem ser extremamente úteis em fluxos de trabalho complexos (ou quando você estiver em uma enrascada). O próximo conceito que vamos abordar é "movendo trabalho por aí" -- em outras palavras, veremos as formas como o desenvolvedor pode dizer "eu quero este trabalho aqui, e aquele ali" de formas precisas, eloquentes e flexíveis.',"","Isso pode parecer muito, mas os conceitos são simples."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","O primeiro comando desta série é o `git cherry-pick`. Ele é chamado da seguinte forma:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Trata-se de uma forma bastante direta de dizer que você gostaria de copiar uma série de commits abaixo do seu local atual (`HEAD`). Eu pessoalmente amo o  `cherry-pick` porque há muito pouca mágica envolvida e é fácil de entender o funcionamento.","","Vejamos uma demonstração!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aqui está um repositório onde temos algum trabalho no ramo `side` que desejamos copiar para o `master`. Isso poderia ser obtido por meio de um rebase (que já aprendemos), mas vamos ver como o cherry-pick se sai."],afterMarkdowns:["É isso! Queríamos os commits `C2` e `C4` e o git os inseriu logo abaixo de nós. Simples assim!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, simplesmente copie algum trabalho dos outros três ramos para o master. Você pode ver quais commits queremos copiar na visualização do objetivo.",""]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["移動 commit","","目前為止我們已經講了 git 的基礎，這些基礎包括 commit、branch 以及在 commit tree 中移動，只要有這些概念你就能發揮 git 90% 的功力，而且對於程式設計師來說，這樣就很夠了。","",'而剩下的 10%，在很複雜的專案上面，是非常有用的（或者當你陷入困惑時），我們下一個要講的概念是 "移動 commit"，換句話說，當你會這個非常有彈性的招數之後，你就可以說"我想要把這個 commit 放這裡，而那個 commit 放在那裡"。',"","這看起來很複雜，但其實它很簡單。"]}},{type:"ModalAlert",options:{markdowns:["## git cherry-pick","","我們要講的第一個指令叫作 `git cherry-pick`，它的用法如下：","","* `git cherry-pick <Commit1> <Commit2> <...>`","","當你想要複製幾個 commit 並且接在你目前的位置（`HEAD`）下面的時候，這會是一個非常直接的方式。我個人非常喜歡用 `cherry-pick`，因為它並不複雜，很容易就可以了解。","","讓我們來看一個例子！",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["這裡有一個 repo，在 `side` branch 中，我們有一些 commit 想要複製到 `master` branch 上，這可以透過一個 rebase 來完成（我們之前已經學到了），但是讓我們看看 `git cherry-pick` 怎麼做。"],afterMarkdowns:["就是那樣！我們複製了 `C2` 以及 `C4` 並且把它們放到我們的後面，很簡單吧！"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["要完成這個關卡，只需要從三個 branch 複製幾個 commit 到 `master` 下面，你可以從視覺化的目標看到我們需要哪些 commit。",""]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 转移提交(commits)","","到现在我们已经学习了 Git 的基础命令 -- commit, branch, checkout. 这些概念实现了 Git 90% 的功能, 同样也满足了开发者的主要需求 ","","然而, 剩余的 10% 可能在处理复杂的工作流时(或者当你陷入困惑时), 非常的重要. 我们会在下一个概念中涉及'转移工作区', 换句话说, 这是开发者表达'我想要把这个工作放这里, 那个工作也放这里', 精确地说, 这是很灵活的方式    ","","看起来内容很多, 其实概念相当简单"]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","本系列的第一个命令是 `git cherry-pick`, 命令形式为: ","","* `git cherry-pick <Commit1> <Commit2> <...>`","","这是一种很直接的推进方式 -- 如果你想将一些提交复制到你当前的位置 `HEAD` 下面, 我个人喜欢 `cherry-pick` 的原因是, 其概念非常简单 ",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在有一个仓库, 我们想将 `side` 分支下的工作复制到 `master` 分支, 我们可以通过 `rebase` 完成这一点(已经学过了哈), 但是这里我们想通过 `cherry-pick` 来完成."],afterMarkdowns:["这是它啦, 我们需要的是提交对象`C2` 和 `C4` ,所以 Git 将被它们抓取到当前分支下了. 就是这么简单!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["完成这节测试, 只需要简单的将分支的工作复制到 master.  如果想看我们所需要的提交对象, 你可以打开虚拟目标窗口 (`show goal`)",""]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Inhalte verschieben","","Bis jetzt haben wir uns die Grundlagen von Git angeschaut -- comitten, verzweigen und sich im Commit-Baum bewegen. Nur damit lässt sich schon 90% der Macht von Git-Repositories nutzen und die meisten Anforderungen von Entwicklern erfüllen.","",'Die übrigen 10% jedoch können in komplexeren Abläufen sehr hilfreich sein (oder wenn man sich in eine schwierige Lage manövriert hat). Das nächste was wir uns anschauen, ist, Inhalte durch den Commit-Baum zu schieben. Es gibt dem Entwickler die Möglichkeit in präziser, eloquenter Manier zu sagen "Ich will diese Inhalte hier und diese dort haben".',"","Das klingt vielleicht nach einer Menge, aber es ist sehr einfach."]}},{type:"ModalAlert",options:{markdowns:["## git cherry-pick","","Der erste Befehl in dieser Serie ist `git cherry-pick`. Er sieht so aus:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Er ist eine einfache Möglichkeit um auszudrücken, dass du eine Folge von Commits unter deinen aktuellen Checkout (also `HEAD`) hängen möchtest. Ich persönlich liebe `cherry-pick`, weil es wenig Magic enthält und einfach zu verstehen ist.","","Schauen wir's uns mal an.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir ein Repository mit einigem Zeugs im Branch `side`, das wir in den Branch `master` kopieren wollen. Das könnten wir mit einem Rebase machen (wie bereits gesehen), aber schauen wir mal wie das mit `cherry-pick` geht."],afterMarkdowns:["Das war's! Wir wollten die commits `C2` und `C4` und Git hat die einfach unter unseren aktuellen Checkout kopiert. So einfach ist das."],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu schaffen musst du einfach nur einige Commits aus den drei gezeigten Branches in den `master` kopieren. Der Zielbaum zeigt dir, welche.",""]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## コードの移動","","今まででは、gitの基本をひたすら見てきました -- コミットしたりブランチを派生したり、そしてソースツリーの中の色々な場所に移動することなどです。これらの概念だけで、gitリポジトリの力を90%使いこなすことができ、開発者の主な需要を満たしています。","","しかし最後の10%はより複雑なワークフローやちょっとトラブった時にとても役にたちます。これから取り上げる次の課題は「作業内容の移動」 –- 詳しく言えば、「この作業はここに置き、その作業はそこに置きたい」と言う開発者のために、優しく具体的で正確にその方法をお教えしましょう。","","ちょっと複雑に聞こえるかもしれませんが、概念は簡単です。"]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","このシリーズの一つ目のコマンドは、`git cherry-pick`。このコマンドの使い方は、次の形になります:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","現在の位置(`HEAD`)の下に一連のコミットをコピーしたいという意を単純に表す方法です。分かりにくいところが少ないので、個人的に私がとても好きなコマンドです。","","デモを見ていきましょう!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["このリポジトリには、現在`side`ブランチから`master`にコピーしたいコードがあります。この前に学んだrebaseコマンドでも実現可能ですが、ここではcherry-pickの動作を見ていきましょう。"],afterMarkdowns:["これだけで終わりです！コミット`C2` と `C4`を取得したかったわけですが、gitが現在の位置の直下に落としてくれました。単純ですね！"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするには、３つのブランチからmasterにコードをコピーしてください。どのコミットを取得するかについてはゴールのツリーをみてください。",""]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Поперемещаем изменения","","Итак, мы уже освоили основы Git: коммиты, ветки, перемещение по дереву изменений. Уже этих знаний достаточно, чтобы овладеть 90% мощью Git-репозиториев и покрыть нужды разработчиков.","",'А оставшиеся 10% будут очень полезны при сложных workflow (или если ты попал в сложную ситуацию). Теперь речь пойдёт о перемещении изменений — возможности, позволяющей разработчику сказать "Хочу, чтобы эти изменения были вот тут, а вот эти — вон там" и получить точные, правильные результаты, не теряя при этом гибкости разработки.',"","На первый взгляд запутанно, но на самом деле всё просто."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","Первая из таких команд - это `git cherry-pick`. Она выглядит вот так:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Это очень простой и прямолинейный способ сказать, что ты хочешь копировать несколько коммитов на место, где сейчас находишься (`HEAD`). Мы обожаем `cherry-pick` за то, что в нём очень мало магии и его очень просто понять и применять.","","Посмотрим на демонстрацию.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Вот репозиторий, где есть некие изменения в ветке `side`, которые мы хотим применить и в ветку `master`. Мы можем сделать это при помощи команды rebase, которую мы уже прошли, но давай посмотрим, как cherry-pick справится с этой задачей."],afterMarkdowns:["Вуаля! Мы хотели перенести коммиты `C2` и `C4`, Git дал нам их там, где они нужны. Всё просто!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти этот уровень, просто скопируй изменения из этих трёх веток в мастер. Чтобы понять, какие коммиты копировать, посмотри на визуализацию уровня.",""]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 작업을 여기저기로 옮기기","","지금까지 우리는 git의 기초를 배웠습니다. -- 커밋을하고, 브랜치를 만들고, 소스 트리 여기저기를 돌아다녔습니다. 이런 개념들을 아는 것만으로도 git repository의 힘을 90%이상 사용하고 개발자들이 필요로하는 작업의 대부분을 할 수 있습니다.","",'그 나머지 10% 기능이, 복잡한 작업(또는 작업중 막혔을때)중에 꽤 유용할 수 있습니다. 이제 배워 볼 다음 개념은 "작업을 여기저로 올기기" 다시 말해, 개발자들의 언어로 "이 일은 여기에 저 일은 저기에 두고 싶어" 정확하고 우아하고 유연하게.',"","다소 과해 보일 수 있는데, 간단한 개념입니다."]}},{type:"ModalAlert",options:{markdowns:["## Git 체리-픽 (Cherry-pick)","","이 시리즈의 첫 명령어는 `git cherry-pick` 입니다. 다음 과 같은 형태로 사용합니다:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","현재 위치(`HEAD`) 아래에 있는 일련의 커밋들에대한 복사본을 만들겠다는 것을 간단히 줄인 말입니다. 개인적으로 저는 `cherry-pick`을 아주 좋아합니다 왜냐하면 조금의 마법이 첨가되있고 이해하기 쉽기 때문입니다.","","데모를 확인해봅시다",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기 repository가 있습니다. `master`와 master로 복사하고 싶은 작업이 있는 브랜치 `side`가 있습니다. 이것은 rebase를 통해서 할 수 있습니다(이미 배운), 하지만 체리-픽이 이 작업을 어떻게 수행하는지 확인해 봅시다."],afterMarkdowns:["됬습니다! 우리는 `C2`와 `C4` 커밋을 원했고 git이 우리가 원하는 곳 바로 밑에 톡 떨어뜨려 줬습니다. 아주 간단하죠!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["이 레벨을 통과하기 위해서는 몇개의 작업을 세개의 브랜치들에서 master로 복사해와야합니다. 어떤 커밋들이 필요한지는 goal을 보고 확인하면 됩니다.",""]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Переміщуємо зміни","","Поки що ми розглядали основи git -- як працювати з комітами та гілками й переміщення по дереву комітів. Цього вже достатньо щоб використовувати 90% фунцкій гіт та мати змогу ефективно працювати з гіт як розробник.","",'Решта 10%, тим не менш, можуть бути надзвичайно корисними при роботі зі складними робочими процесами (workflow), чи коли ти чи ще хтось щось зробили не так і ти хочеш це виправити. Наступна концепція з якою ми познайомимось це "перенесення змін" -- іншими словами, це можливість розробника переміщувати коміти між гілками в простий та зручний спосіб.',"","Це може видаватися складним, але насправді це дуже проста концепція."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","Перша команда в цій серії називається `git cherry-pick`. Вона має наступну форму:","","* `git cherry-pick <Коміт1> <Коміт2> <...>`","","Це надзвичайно простий спосіб вказати гіту що потрібно скопіювати серію комітів до поточного розташування (`HEAD`). Персонально я обожнюю `cherry-pick` за його прямолінійнсть, це дуже зрозуміла концепція що не використовує прихованої магії","","Давайте подивимось на практиці!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ми бачимо репозиторій де є певні зміни в гілці `side` які ми хочемо скопіювати в  `master`. Для цього можна використати rebase (який ми вже вивчили), але подивимось як з цим впорається cherry-pick."],afterMarkdowns:["Оба-на! Ми хотіли коміти `C2` та `C4` і git додав їх до поточного розташування. Просто й доступно!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Щоб пройти це рівень, просто скопіюй якісь зміни з трьох гілок показаних на діаграмі в master. В візуалізації видно які коміти потрібно скопіювати.",""]}}]}}}}),e("/src/levels/rampup/cherryPick.js"),e.define("/src/levels/rampup/detachedHead.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"C4","id":"HEAD"}}',solutionCommand:"git checkout C4",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Detach yo' HEAD",zh_CN:"分离HEAD"},hint:{en_US:"Use the label (hash) on the commit for help!",zh_CN:"使用提交记录上的标签(hash)来求助！"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moving around in Git","","Before we get to some of the more advanced features of Git, it's important to understand different ways to move through the commit tree that represents your project.","","Once you're comfortable moving around, your powers with other git commands will be amplified!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","","First we have to talk about \"HEAD\". HEAD is the symbolic name for the currently checked out commit -- it's essentially what commit you're working on top of.","","HEAD always points to the most recent commit which is reflected in the working tree. Most git commands which make changes to the working tree will start by changing HEAD.","","Normally HEAD points to a branch name (like bugFix). When you commit, the status of bugFix is altered and this change is visible through HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see this in action. Here we will reveal HEAD before and after a commit."],afterMarkdowns:["See! HEAD was hiding underneath our `master` branch all along."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Detaching HEAD","","Detaching HEAD just means attaching it to a commit instead of a branch. This is what it looks like beforehand:","","HEAD -> master -> C1",""],afterMarkdowns:["And now it's","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["To complete this level, let's detach HEAD from `bugFix` and attach it to the commit instead.","","Specify this commit by its hash. The hash for each commit is displayed on the circle that represents the commit."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 在Git中前后移动","","在接触Git的更多高级主题之前，我们先学习用不同的方法在代表你的项目的提交记录树上前后移动。","","一旦能够熟练地在Git中前进后退，你使用其他git命令的威力也会被放大！","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'我们首先看一下"HEAD". HEAD是当前提交记录的符号名称 -- 其实就是你正在其基础进行工作的提交记录。',"","HEAD总是指向最近一次提交记录，表现为当前工作树。大多数修改工作树的git命令都开始于改变HEAD指向。","","HEAD通常指向分支名（比如bugFix）。你提交时，改变了bugFix的状态，这一变化通过HEAD变得可见。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在实例中看一下。我们将会观察提交前后HEAD的位置。"],afterMarkdowns:["看! HEAD一直藏在`master`分支后面。"],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### 分离 HEAD","","分离HEAD就是让其指向一个提交记录而不是分支名。这是命令执行之前的样子： ","","HEAD -> master -> C1",""],afterMarkdowns:["现在变成了","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["想完成此关，从`bugFix`分离出HEAD并让其指向一个提交记录。","","通过hash值指定提交记录。每个提交记录的hash值显示在代表提交记录的圆圈中。"]}}]}}}}),e("/src/levels/rampup/detachedHead.js"),e.define("/src/levels/rampup/interactiveRebase.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22master%22%7D%2C%22overHere%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22overHere%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase -i overHere --solution-ordering C3,C5,C4",compareOnlyMasterHashAgnostic:!0,disabledMap:{"git cherry-pick":!0},startTree:'{"branches":{"master":{"target":"C5","id":"master"},"overHere":{"target":"C1","id":"overHere"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"}}',hint:{en_US:"you can use either branches or relative refs (HEAD~) to specify the rebase target",es_AR:"podés usar tanto ramas como referencias relativas (HEAD~) para especificar el objetivo del rebase",pt_BR:"Você pode usar ou ramos ou referências relativas (HEAD~) para especificar o alvo do rebase",de_DE:"Du kannst entweder Branches oder relative Ref-Angaben (z.B. HEAD~) benutzen, um das Ziel des Rebase anzugeben.",fr_FR:"Vous pouvez utiliser soit les branches, soit les références relatives (HEAD~) pour spéficier la cible à rebaser",zh_CN:"你可以使用 branch 或者是相对位置（HEAD~）來指定 rebase 的目标",zh_TW:"你可以指定 branch 或者是相對位置（HEAD~）來表示 rebase 的目標",ru_RU:"Можно использовать либо ветки, либо относительные ссылки (HEAD~), чтобы указать цель для Rebase",ja:"リベースする対象の指定には、ブランチ名や相対リファレンス(HEAD~)が使えます",ko:"리베이스할 타겟으로 브랜치나 상대 참조(HEAD~)를 사용할 수 있습니다",uk:"ти можеш використовувати гілки чи відносні посилання (HEAD~) щоб вказувати ціль для rebase"},name:{en_US:"Interactive Rebase Intro",es_AR:"Introducción al rebase interactivo",pt_BR:"Introdução ao rebase interativo",de_DE:"Einführung Interactive Rebase",ja:"インタラクティブrebase入門",fr_FR:"Introduction à rebase",zh_CN:"Rebase 交互命令介绍 ",zh_TW:"介紹互動式的 rebase",ru_RU:"Введение в интерактивный Rebase",ko:"인터랙티브 리베이스 소개",uk:"Знайомство з інтерактивним rebase"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","Git cherry-pick is great when you know which commits you want (_and_ you know their corresponding hashes) -- it's hard to beat the simplicity it provides.","","But what about the situation where you don't know what commits you want? Thankfully git has you covered there as well! We can use interactive rebasing for this -- it's the best way to review a series of commits you're about to rebase.","","Let's dive into the details..."]}},{type:"ModalAlert",options:{markdowns:["All interactive rebase means is using the `rebase` command with the `-i` option.","","If you include this option, git will open up a UI to show you which commits are about to be copied below the target of the rebase. It also shows their commit hashes and messages, which is great for getting a bearing on what's what.","",'For "real" git, the UI window means opening up a file in a text editor like `vim`. For our purposes, I\'ve built a small dialog window that behaves the same way.']}},{type:"ModalAlert",options:{markdowns:["When the interactive rebase dialog opens, you have the ability to do 3 things:","","* You can reorder commits simply by changing their order in the UI (in our window this means dragging and dropping with the mouse).","* You can choose to completely omit some commits. This is designated by `pick` -- toggling `pick` off means you want to drop the commit.","* Lastly, you can squash commits. Unfortunately our levels don't support this for a few logistical reasons, so I'll skip over the details of this. Long story short, though -- it allows you to combine commits.","","Great! Let's see an example."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["When you hit the button, an interactive rebase window will appear. Reorder some commits around (or feel free to unpick some) and see the result!"],afterMarkdowns:["Boom! Git copied down commits in the exact same way you specified through the UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["To finish this level, do an interactive rebase and achieve the order shown in the goal visualization. Remember you can always `undo` or `reset` to fix mistakes :D"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","Git cherry-pick est pratique quand vous savez exactement quels commits vous voulez (_et_ que vous connaissez leurs identifiants) -- il est difficile de battre la simplicité qu'il procure.","","Mais que faire quand vous ne connaissez pas les identifiants des commits ? Heureusement git a pensé à vous dans pour ce cas-là ! Nous pouvons utiliser un rebase interactif pour cela -- c'est la meilleure façon de reconsidérer une série de commits que vous vous apprêtez à rebaser.","","Allons un peu plus dans les détails ..."]}},{type:"ModalAlert",options:{markdowns:["Tout rebase interactif signifie utiliser la commande `rebase` avec l'option `-i`.","","Si vous mettez cette option, git va ouvrir une interface graphique pour vous montrer quels commits vont être copiés en dessous de la cible sur laquelle vous rebasez. Elle vous montre aussi les identifiants et commentaires des commits, ce qui est pratique pour s'orienter parmi les commits.","","Pour le \"vrai\" git, l'interface graphique correspond en fait à ouvrir un fichier dans un éditeur de texte comme `vim`. Pour notre exemple, j'ai construit une petite fenêtre de dialogue qui se comporte de la même façon."]}},{type:"ModalAlert",options:{markdowns:["Quand le rebase interactif s'ouvre, vous avez la possibilité de faire 3 choses :","","* Vous pouvez réarranger les commits simplement en changeant leur ordre dans l'interface graphique (dans notre fenêtre de dialogue, cela signifie déplacer les objets dedans avec la souris -- drag and drop).","* Vous pouvez omettre certains commits. Cela est désigné par `pick` : cliquer sur `pick` désélectionne/resélectionne le commit.","* Enfin, vous pouvez écraser des commits. Malheureusement notre niveau ne supporte pas cette option, nous allons donc sauter les détails concernant cette possibilité. Pour faire court, cela vous permet de mélanger des commits.","","Super ! Voyons un exemple."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Quand vous activez le bouton, une fenêtre de rebase interactif va s'ouvrir. Reordonnez quelques commits (ou supprimez-en certains) et regardez le résultat !"],afterMarkdowns:["Boum ! Git a copié les commits de la même manière que vous l'aviez spécifié."],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, faites un rebase interactif et atteignez l'ordre indiqué dans le fenêtre d'objectif. Souvenez-vous que vous pouvez toujours exécuter les commandes `undo` ou `reset` pour réparer vos erreurs :D"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git interactive rebase","","當你知道你要複製哪些 commit（而且你也知道他們所對應的 hash 值），那麼 `git cherry-pick`  很適合你。","","但是如果你不知道你要的是哪些 commit 呢？ 很幸運的是，git 也有考慮到這個問題喔！我們可以用互動式的 rebase 來做到，當你想要檢查你想要的 commit 的時候，這會是最好的方法。","","讓我們來看一下這些細節..."]}},{type:"ModalAlert",options:{markdowns:["互動式的 rebase 相當於使用 rebase 這個指令的時候，後面加上一個 `-i` 的選項。","","如果你有包含了這個選項，git 就會打開一個 UI，讓你知道說有哪些 commit 會被複製下來，它也會告訴你它們的 hash 值以及可以讓你知道它們是什麼的訊息。","",'在"實務上"，UI 會利用一個編輯器（例如 vim）打開一個檔案，對於我們來說，我已經設計了一個有同樣功能的對話視窗。']}},{type:"ModalAlert",options:{markdowns:["當互動式的 rebase 的對話視窗打開之後，你就可以做到三件事情：","","* 你可以藉由改變這些 commit 在 UI 的位置（在我們的視窗中，可以透過滑鼠去拖拉），來重新排序它們的順序。","* 你可以選擇完全忽略掉某些 commit，可以用滑鼠按一下，使它變暗，就表示你要忽略掉該 commit。","* 最後, 你可以把 commit 合併在一起，但基於某些理由，在我們的關卡裡面並沒有這個功能。","","太棒了！讓我們來看一個例子！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["當你按下按鈕的時候，一個互動式的 rebase 的視窗就會跳出來，重新排序一些 commit（大膽忽略掉某些 commit），然後看一下結果吧！"],afterMarkdowns:["看吧！ git 根據你所選擇的 commit，把它們複製了下來。"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成這個關卡，使用互動式的 rebase，並且完成視覺化目標所表示 commit 的順序，記住！你可以經常使用 `undo` 或者 `reset` 來修正你的一些錯誤:D"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 交互式的 Rebase","","如果你知道你所需要的提交对象(相应的 hash), 那用 Git cherry-pick 就非常方便了 -- 很难有简单的方式了","","但是如果你不清楚你想要的提交对象的 hash 呢? 幸好 Git 帮你想到了这一点, 我们可以利用交互 rebase -- 如果你想衍合一系列的提交, 这就是最方便的方法了","","让我们看看细节.."]}},{type:"ModalAlert",options:{markdowns:["交互式 rebase 指的是 rebase 后跟一个参数: `-i`","","如果你包含了这个选项, Git 会开启一个 UI 并 展示出将要被复制到目标的提交对象, 它也会显示它们的提交 hash 和信息","","真实的 Git, UI 窗口指的是在类似于 Vim 的文本编辑器中打开一个文件. 考虑到我们的目标, 我建立了一个小型的会话窗口以完成相同的事儿."]}},{type:"ModalAlert",options:{markdowns:["当 rebase 会话窗口打开时, 你能做3件事:","","* 你可以在 UI 中做 提交对象的排序(在我们的窗口中, 这意味着你可以拖放完成这点)","* 你可以忽略某些提交 -- pick 会变暗","* 最后, 你可以合并提交. 遗憾的是我们的课程不支持此功能.","","好! 看看例子"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["当你点这个按钮时, 一个交互式的 rebase 窗口就会出现. 对提交对象做个排序, 再看看结果"],afterMarkdowns:["按照你指定的方式, Git 克隆了这些提交"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成本节, 做一个交互式的 rebase , 实现虚拟目标窗口中提示的提交顺序. 记住,  你随时都可以用 `undo`, `reset` 修复你的错误"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## git rebase interactivo","","git cherry-pick es genial cuando sabés cuáles commits querés (_y_ sabés sus hashes) -- es dificil superar la simpleza que provee.","","Pero ¿qué pasa cuando no sabés qué commits querés? Por suerte ¡git te cubre en esta situación, también! Podemos usar el rebase interactivo para esto -- es la mejor manera de revisar una serie de commits que estás por rebasear.","","Entremos en los detalles..."]}},{type:"ModalAlert",options:{markdowns:["Todo rebase interactivo significa usar el comando `rebase` con la opción `-i`.","","Si incluís esta opción, git abrirá una UI para mostrarte qué commits están a punto de ser copiados sobre el objetivo del rebase. También muestra sus hashes y mensajes, que ayuda mucho para saber qué es cada commit.","",'Para el git "de verdad", la UI signfica abrir un archivo en un editor de textos como `vim`. Para nuestro propósito, hice una pequeña interfaz que se comporta de ese mismo modo.']}},{type:"ModalAlert",options:{markdowns:["Cuando el diálogo de rebase interactivo se abre, tenés la capacidad de hacer 3 cosas:","","* Podés reordenar los commits con solamente cambiar su orden en la UI (en nuestra ventana, eso significa hacer drag & drop con el mouse).","* Podés elegir ignorar completamente algunos commits. Esto se designa con `pick` -- no hacerle `pick` a algún commit significa que querés ignorarlo.","* Finalmente, podés _squashear_ commits. Desafortunadamente, nuestros niveles no soportan esto por cuestiones logísticas, por lo que voy a ahorrarte los detalles. Haciéndola corta, te permite combinar varios commits en uno solo.","","¡Genial! Veamos un ejemplo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Cuando apretes el botón, va a aparecer una ventana de rebase interactivo. Reordená los commits (sentite libre de ignorar alguno, también) ¡y mirá el resultado!"],afterMarkdowns:["¡Boom! Git copió los commits exactamente de la misma manera que lo especificaste en la UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar el nivel, hacé un rebase interactivo y alcanzá el orden que se muestra en la visualización objetivo. Acordate que siempre podés hacer `undo` y `reset` para arreglar errores :D"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Rebase Interativo do Git","","O cherry-pick é ótimo quando você sabe de antemão quais commits você quer (_e_ você sabe os hashes correspondentes) -- é difícil bater a simplicidade que ele oferece.","","Mas e quando você não sabe quais commits você quer? Felizmente o git pode te ajudar nesta situação também! Podemos usar o rebase interativo para isso -- trata-se da melhor forma de rever uma série de commits sobre os quais você está prestes a fazer um rebase.","","Mergulhemos nos detalhes..."]}},{type:"ModalAlert",options:{markdowns:["O rebase interativo é simplesmente o comando `rebase` com a opção `-i`.","","Se você incluir essa opção, o git abrirá uma interface para mostrar quais commits estão prestes a serem copiados abaixo do alvo do rebase. Ele também mostra os hashes e as mensagens dos commits, o que é ótimo para ter noção do que é o que.","",'No git "de verdade", a interface nada mais é que um arquivo aberto em um editor de texto (por exemplo o `vim`). Para os nossos propósitos, eu montei uma pequena janela que se comporta da mesma forma.']}},{type:"ModalAlert",options:{markdowns:["Quando a janela de rebase interativo abrir, você pode fazer 3 coisas diferentes:","","* Você pode reordenar os commits simplesmente mudando sua ordem na interface (na nossa janela isso significa arrastar e soltar com o mouse).","* Você pode escolher simplesmente omitir alguns commits. Para isso, clique no botão `pick` -- deixar o `pick` desligado significa que você quer descartar o commit.",'* Por fim, você pode "esmagar" (fazer squash) nos commits. Infelizmente, nosso tutorial não será capaz de cobrir essa funcionalidade por alguns motivos logísticos, então vamos pular os detalhes disto. Em resumo, no entanto, o squash permite que você combine commits.',"","Ótimo! Vejamos um exemplo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Quando você clicar o botão, uma janela de rebase interativo se abrirá. Reordene alguns commits da forma como você preferir (ou sinta-se livre para desmarcar o `pick` de alguns) e veja o resultado!"],afterMarkdowns:["Boom! O Git copiou alguns commits exatamente da mesma forma que você os especificou na janela"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para finalizar este nível, faça um rebase interativo e obtenha a ordem mostrada na visualização do objetivo. Lembre-se que você pode usar os comandos `undo` ou `reset` para corrigir erros :D"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Interaktiver Rebase","","Cherry-pick ist großartig wenn du genau weißt, welche Commits du willst (_und_ ihre jeweiligen Hashes kennst) -- es ist dann schwer an Einfachheit zu überbieten.","","Aber wie sieht es aus, wenn du die Commits nicht genau kennst, die du brauchst? Zum Glück bietet Git auch dafür eine Lösung an. Das können wir mit interaktivem Rebase machen -- die beste Art sich eine Serie von Commits in einem Rebase genau anzusehen.","","Schauen wir uns die Details an ..."]}},{type:"ModalAlert",options:{markdowns:["Interaktives Rebase bedeutet einfach nur, dass man dem `rebase` Befehl die Option `-i` hinzufügt.","","Wenn du das machst, zeigt Git dir jeden einzelnen Commit, der durch den Rebase kopiert werden würde. Es zeigt dir die Hashes und Kommentare, was gut ist um einen Überblick zu bekommen.","","In echtem Git besteht dieser Dialog daraus, die Commits in einem Text-Editor angezeigt zu bekommen. Für unsere Zwecke hab ich ein kleines Dialog-Fenster gebaut, dass sich ähnlich verhält."]}},{type:"ModalAlert",options:{markdowns:["Wenn sich der Dialog für den interaktiven Rebase öffnet, kannst du drei Dinge tun:","","* Du kannst die Reihenfolge der Commits durch Ziehen und Ablegen ändern.","* Du kannst Git sagen, einen Commit beim Rebase zu ignorieren -- im Dialog durch die Schaltfläche `pick` dargestellt.","* Außerdem kannst du Commit zusammenfassen (squash). Leider wird das hier nicht unterstützt, aber in echtem Git fasst es Commits zu einem zusammen.","","Super! Schauen wir uns ein Beispiel an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wenn du die Schaltfläche anklickst wird sich der Rebase-Dialog öffnen. Veränder die Reihenfolge der Commits oder klick bei einigen auf `pick` und schau dir das Ergebnis an."],afterMarkdowns:["Bämm! Git hat die Commits genau so kopiert, wie du es ausgewählt hast."],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level zu schaffen mach einen interaktiven Rebase, um genau die Reihenfolge zu erzeugen die im Ziel-Baum angezeigt wird. Denk daran, dass du jederzeit mit `undo` oder `reset` Fehler rückgängig machen kannst. :D"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git インタラクティブrebase","","どのコミットを操りたいか（そしてそれを指定するハッシュ）がわかる時に`git cherry-pick`はとても便利で、その簡単さはとてもありがたいです。 ","","しかし、どのコミットを操りたいかがわからない時はどうでしょう？ありがたいことに、そんな時にぴったりのコマンドがgitに備わっています。このためにgitのインタラクティブrebaseを使えます。rebaseしたい一連のコミットを一括で見るベストな方法です。","","具体的に見てみましょう..."]}},{type:"ModalAlert",options:{markdowns:["インタラクティブrebaseとは単に、`rebase`コマンドに`-i`オプションを合わせて使うことです。","","このオプションをつければ、gitがインタフェースを開き、どのコミットがrebase対象の下にコピーされるかを確認できます。それらのコミットのハッシュやメッセージも表示され、rebaseの概要を一眼で見るのに便利です。","",'"ホンモノ"のgitでは、その「インターフェース」とは`vim`などのテキストエディタの中でファイルが開くだけです。ここでコンセプトを見せるために同じような動作をする小さなダイアログウィンドウを作りました。']}},{type:"ModalAlert",options:{markdowns:["インタラクティブrebaseダイアログが開くと、３つの操作から選べます:","","* UIウィンドウのなかで順番を調整するだけでコミットの順番を変えられます（こちらのダイアログでは、マウスでドラッグアンドドロップで操作します）。","* 特定のコミットを丸ごと除くこともできます。除きたいコミットを指定するには`pick`をオフにします。","* 最後に、コミットを組み合わせられます。技術的に制限があり再現できないのでその詳細な説明を省きますが、短く言いますと、複数のコミットを一つにまとめることができる機能です。","","さて、例を見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["ボタンを押せば、インタラクティブrebaseウィンドウが現れます。コミットの順番を変更したり、`pick`を外したりしてみて、その結果を見てみましょう！"],afterMarkdowns:["よっしゃー。gitがUIで指定されたようにコミットをコピーしました！"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするにはインタラクティブrebaseを実行し、ゴールのビジュアライズに表示されている順番を実現しましょう。ミスがあれば`undo`や`reset`で修正できるのをお忘れなく。"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","Git cherry-pick прекрасен, когда точно известно, какие коммиты нужны (и известны их точные хеши)","","Но как быть в случае, когда точно не известно какие коммиты нужны? К счастью, Git позаботился о таких ситуациях! Можно использовать интерактивный rebase для этого - лучший способ отобрать набор коммитов для rebase.","","Углубимся в детали."]}},{type:"ModalAlert",options:{markdowns:["Всё, что нужно для интерактивного rebase - это опция `-i`","","Если добавить эту опцию, Git откроет интерфейс просмотра того, какие коммиты готовы к копированию на цель rebase (target). Также показываются хеши коммитов и комментарии к ним, так что можно легко понять что к чему.","",'Для "реального" Git, этот интерфейс означает просто открытие файла в редакторе типа vim. Для этой обучалки, я сделал небольшое диалоговое окно, которое по сути делает то же, что и редактор.']}},{type:"ModalAlert",options:{markdowns:["После открытия окна интерактивного rebase есть три варианта для каждого коммита:","","* Можно сменить положение коммита по порядку, переставив строчку с ним в редакторе (у нас в окошке строку с коммитом можно перенести просто мышкой).",'* Можно "выкинуть" коммит из ребейза. Для этого есть `pick` - переключение его означает, что нужно выкинуть коммит.',"* Наконец, можно соединить коммиты. В этом уровне игры у нас не реализована эта возможность, но, вкратце, при помощи этой функции можно объединять изменения двух коммитов.","","Ну что ж, посмотрим на примеры!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["После нажатия на эту кнопку появится окно интерактивного rebase. Переставь несколько коммитов (или удали кое-какие) и посмотри, что получится в итоге!"],afterMarkdowns:["Бах! Git скопировал коммиты в точности так, как было указано через интерфейс!"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти этот уровень, переставь коммиты при помощи интерактивного rebase в таком порядке, как указано на визуализации. На всякий случай, помни, что всегда можно исправить ошибку, вызвав команду undo или reset."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 인터렉티브 리베이스(Interactive Rebase)","","Git 체리-픽은 여러분이 원하는 커밋이 무엇인지 알때(각각의 해시값도) 아주 유용합니다 -- 체리-픽이 제공하는 간단함은 아주 매력적입니다.","","하지만 원하는 커밋을 모르는 상황에는 어쩌죠? 고맙게도 git은 이런상황에 대한 대안이 있습니다. 우리는 이럴 때 인터렉티브 리베이스를 사용하면됩니다 -- 리베이스할 일련의 커밋들을 검토할 수 있는 가장 좋은 방법입니다.","","자세히 알아보죠..."]}},{type:"ModalAlert",options:{markdowns:["인터렉티브 리베이스가 의미하는 뜻은 `rebase` 명령어를 사용할 때 `-i` 옵션을 같이 사용한다는 것입니다.","","이 옵션을 추가하면, git은 리베이스의 목적지가 되는 곳 아래에 복사될 커밋들을 보여주는 UI를 띄울것 입니다. 각 커밋을 구분할 수 있는 각각의 해시들과 메시지도 보여줍니다.","",'"실제"git 에서는 UI창을 띄우는것 대신에 `vim`과 같은 텍스트 편집기에서 파일을 엽니다. 저희는 배우는것이 목적이기에 같은 역할을 하는 작은 대화창을 만들어서 대신했습니다.']}},{type:"ModalAlert",options:{markdowns:["인터렉티브 리베이스 대화창이 열리면, 3가지를 할 수 있습니다:","","* 적용할 커밋들의 순서를 UI를 통해 바꿀수 있습니다(여기서는 마우스 드래그앤 드롭으로 가능합니다)","* 원하지 않는 커밋들을 뺄 수 있습니다. 이것은 `pick`을 이용해 지정할 수 있습니다(여기서는 `pick`토글 버튼을 끄는것으로 가능합니다)","* 마지막으로, 커밋을 스쿼시(squash)할 수 있습니다. 불행히도 저희 레벨은 몇개의 논리적 문제들 때문에 지원을 하지 않습니다. 이거에 대해서는 넘어가겠습니다. 요약하자면 커밋을 합칠 수 있습니다","","자! 예시를 확인해 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["버튼을 누르면 인터렉티브 리베이스 대화창이 뜰것 입니다. 커밋들의 순서를 바꿔보고(커밋을 빼 봐도 됩니다) 결과를 확인해봅시다!"],afterMarkdowns:["Boom! Git이 UI를 통해 명시한 그대로 커밋들을 복사했습니다."],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["이번 레벨을 통과하기 위해서 goal에 나타난 순서대로 만들기 위해 인터렉티브 리베이스를 사용해봅시다. `undo`와 `reset`을 통해 했던 실수들은 되돌릴 수 있습니다 :D"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Інтерактивний Rebase","","Git cherry-pick зручно користуватись коли ти знаєш які коміти тобі потрібні (_і_ ти знаєш їхні хеші) -- важко вигадати щось простіше.","","Але що робити в ситуації коли ти не знаєш які коміти потрібні? На щастя git може впоратись і з цим! Для цього випадку використовують інтерактивний rebase -- це найкращий спосіб перевірити серію комітів які потрібно заребейсити.","","Розглянемо це детальніше..."]}},{type:"ModalAlert",options:{markdowns:["Інтерактивний rebase це насправді команда  `rebase` з опцією `-i`.","","Якщо додати цю опцію, git відкриє діалог в якому покаже які коміти будуть скопійовані до кінцевого призначення. Він також покаже хеші комітів та їхні повідомлення, що допоможе розібратися що й до чого.","",'В "справжньому" git, замість UI вікна відкриється файл в сконфігурованому текстовому редакторі, можливо `vim`. Для цього туторіалу я створив невеличке діалогове вікно що поводиться приблизно так само.']}},{type:"ModalAlert",options:{markdowns:["Коли відкриється вікно інтерактивного rebase ти можеш зробити три речі:","","* Ти можеш переставити коміти між собою просто змінивши їх порядок в діалозі (в нашому вікні ти зможеш перетягнути їх мишкою).","* Ти можеш повністю пропустити якісь коміти. В туторіалі потрібно вимкнути опцію `pick`, але в справжньому гіт потрібно просто видалити відповідний рядок.","* Також можна розчавити (squash) якісь коміти. На жаль наш туторіал не підтримує цю фічу (так як ми не підтримуємо роботу з файлами), але це дуже зручна опція в справжньому гіт. За її допомогою можна декілька різніх комітів об’єднати в один","","Чудово! Давайте розберемо це на прикладі"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Коли ти натиснеш кнопку відкриється вікно інтерактивного rebase. Перестав якісь коміти (можеш пропустити якісь якщо хочеш) і подивись що вийде!"],afterMarkdowns:["Ка-бум! Git cкопіював коміти відповідно до того що було вказано в UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Щоб пройти цей рівень за допомогою інтерактивного rebase впорядкуй коміти як показано на візуалізації. Пам’ятай що ти завжди можеш використати `undo` чи `reset` щоб виправити помилку :D"]}}]}}}}),e("/src/levels/rampup/interactiveRebase.js"),e.define("/src/levels/rampup/relativeRefs.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"C3","id":"HEAD"}}',solutionCommand:"git checkout bugFix^",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Relative Refs (^)",zh_CN:"相对引用(^)"},hint:{en_US:"Remember the Caret (^) operator!",zh_CN:"记住插入(^)操作符!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Relative Refs","","Moving around in Git by specifying commit hashes can get a bit tedious. In the real world you won't have a nice commit tree visualization next to your terminal, so you'll have to use `git log` to see hashes.","","Furthermore, hashes are usually a lot longer in the real Git world as well. For instance, the hash of the commit that introduced the previous level is `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Doesn't exactly roll off the tongue...","","The upside is that Git is smart about hashes. It only requires you to specify enough characters of the hash until it uniquely identifies the commit. So I can type `fed2` instead of the long string above."]}},{type:"ModalAlert",options:{markdowns:["Like I said, specifying commits by their hash isn't the most convenient thing ever, which is why Git has relative refs. They are awesome!","","With relative refs, you can start somewhere memorable (like the branch `bugFix` or `HEAD`) and work from there.","","Relative commits are powerful, but we will introduce two simple ones here:","","* Moving upwards one commit at a time with `^`","* Moving upwards a number of times with `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's look at the Caret (^) operator first. Each time you append that to a ref name, you are telling Git to find the parent of the specified commit.","",'So saying `master^` is equivalent to "the first parent of `master`".',"","`master^^` is the grandparent (second-generation ancestor) of `master`","","Let's check out the commit above master here"],afterMarkdowns:["Boom! Done. Way easier than typing the commit hash"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["You can also reference `HEAD` as a relative ref. Let's use that a couple of times to move upwards in the commit tree"],afterMarkdowns:["Easy! We can travel backwards in time with `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["To complete this level, check out the parent commit of `bugFix`. This will detach `HEAD`.","","You can specify the hash if you want, but try using relative refs instead!"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 相对引用","","用指定提交记录hash值的方式在Git中移动会变得比较乏味。在现实中，你不会有漂亮的可视化的提交记录树放在终端旁边，所以你不得不用`git log`来查看hasn值。","","另外，hash值在真实的Git环境中也会更长。举个例子，前一关的介绍中的提交记录的hash值是`fed2da64c0efc5293610bdd892f82a58e8cbc5d8`。不要把舌头闪了...","","好的一面是，Git对hash的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。所以，我可以仅输入`fed2`而不是上面的一长串字符。"]}},{type:"ModalAlert",options:{markdowns:["我说过，通过hash指定提交记录不是很方便，所以Git引入了相对引用。这个就很牛掰了!","","使用相对引用，你可以从一个易于记忆的地方（比如分支名`bugFix`或`HEAD`）开始工作。","","相对引用非常给力，这里我介绍两个简单的用法：","","* 使用`^`向上移动1个提交记录","* 使用`~<num>`向上移动多个提交记录"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["首先看看插入(^)操作符。把插入符跟在引用名后面，表示让Git寻找指定提交记录的父提交。","",'所以`master^`相当于"`master`的父提交"。',"","`master^^`是`master`的父父提交（上上代祖先）","","切换到master的父提交"],afterMarkdowns:["唰！搞定。这种方式比输入提交记录的hash值简单多了！"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["你也可以`HEAD`把用作相对引用。以下命令使用`HEAD`在提交树中向上移动几次。"],afterMarkdowns:["简单！我们可以一直使用`HEAD^`向上移动。"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成此关，切换到`bugFix`的父提交。这会分离出`HEAD`.","","如果你愿意的话，使用hash值也可以过关，但为何不试试使用相对引用呢？"]}}]}}}}),e("/src/levels/rampup/relativeRefs.js"),e.define("/src/levels/rampup/relativeRefs2.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master"},"bugFix":{"target":"C0","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"C1","id":"HEAD"}}',solutionCommand:"git branch -f master C6;git checkout HEAD~1;git branch -f bugFix HEAD~1",startTree:'{"branches":{"master":{"target":"C4","id":"master"},"bugFix":{"target":"C5","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"C2","id":"HEAD"}}',hint:{en_US:"You'll need to use at least one direct reference (hash) to complete this level",zh_CN:"这一关至少要用到一次直接引用(hash)"},name:{en_US:"Relative Refs #2 (~)",zh_CN:"相对引用2(~)"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:['### The "~" operator',"","Say you want to move a lot of levels up in the commit tree. It might be tedious to type `^` several times, so Git also has the tilde (~) operator.","","","The tilde operator (optionally) takes in a trailing number that specifies the number of parents you would like to ascend. Let's see it in action"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's specify a number of commits back with `~`."],afterMarkdowns:["Boom! So concise -- relative refs are great."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Branch forcing","","You're an expert on relative refs now, so let's actually *use* them for something.","","One of the most common ways I use relative refs is to move branches around. You can directly reassign a branch to a commit with the `-f` option. So something like:","","`git branch -f master HEAD~3`","","Moves (by force) the master branch to three parents behind HEAD."]}},{type:"ModalAlert",options:{markdowns:["To complete this level, move `HEAD`, `master`, and `bugFix` to their goal destinations shown."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:['### The "~" operator',"","假设需要在提交树中向上移动很多步。使用多个`^`非常无聊，所以Git也引入了波浪(~)操作符。","","","波浪操作符后面可以（可选地）跟一个数字，指定向上移动多少次。看个例子"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用`~`一次后退多步."],afterMarkdowns:["唰！如此简洁--相对引用就是好啊！"],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Branch forcing","","你现在是相对引用的高手了，现在*用*他来实际做点事情。","","我使用相对引用最多的就是移动分支。你可以使用`-f`选项把直接让分支指向另一个提交。举个例子:","","`git branch -f master HEAD~3`","","（强制）移动master指向HEAD的第3级父提交。"]}},{type:"ModalAlert",options:{markdowns:["要完成此关，移动`HEAD`，`master`和`bugFix`到目标所示的位置。"]}}]}}}}),e("/src/levels/rampup/relativeRefs2.js"),e.define("/src/levels/rampup/reversingChanges.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%7D%2C%22pushed%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22pushed%22%7D%2C%22local%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22local%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C2%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22pushed%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git reset HEAD~1;git checkout pushed;git revert HEAD",compareOnlyBranches:!0,startTree:'{"branches":{"master":{"target":"C1","id":"master"},"pushed":{"target":"C2","id":"pushed"},"local":{"target":"C3","id":"local"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"local","id":"HEAD"}}',name:{en_US:"Reversing Changes in Git",ja:"変更を元に戻す",fr_FR:"Annuler des changements avec Git",ko:"Git에서 작업 되돌리기",zh_CN:"在Git中撤销更改"},hint:{en_US:"Notice that revert and reset take different arguments.",fr_FR:"",zh_CN:"注意revert和reset使用不同的参数。",ko:"",ja:""},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Reversing Changes in Git","","There are many ways to reverse changes in Git. And just like committing, reversing changes in Git has both a low-level component (staging individual files or chunks) and a high-level component (how the changes are actually reversed). Our application will focus on the latter.","","There are two primary ways to undo changes in Git -- one is using `git reset` and the other is using `git revert`. We will look at each of these in the next dialog",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` reverts changes by moving a branch reference backwards in time to an older commit. In this sense you can think of it as "rewriting history;" `git reset` will move a branch backwards as if the commit had never been made in the first place.',"","Let's see what that looks like:"],afterMarkdowns:["Nice! Git simply moved the master branch reference back to `C1`; now our local repository is in a state as if `C2` had never happened"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'While reseting works great for local branches on your own machine, its method of "rewriting history" doesn\'t work for remote branches that others are using.',"","In order to reverse changes and *share* those reversed changes with others, we need to use `git revert`. Let's see it in action"],afterMarkdowns:["Weird, a new commit plopped down below the commit we wanted to reverse. That's because this new commit `C2'` introduces *changes* -- it just happens to introduce changes that exactly reverses the commit of `C2`.","","With reverting, you can push out your changes to share with others."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["To complete this level, reverse the two most recent commits on both `local` and `pushed`.","","Keep in mind that `pushed` is a remote branch and `local` is a local branch -- that should help you choose your methods."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## 変更を元に戻す","","Gitでは変更を元に戻す方法がたくさんあります。コミットと同じように、低レベルな動作（ファイル別だったりファイルの中の一部だったり）も高レベルな動作（変更のまとまりのキャンセル）もできます。このアプリケーションでは後者の方法について紹介します。","","基本的なアンドゥの方法が2つあります - 一つは`git reset`を使う方法で、もう1つは`git revert`を使う方法です。次のダイアログで一つ一つを見ていきます。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","","`git reset`はブランチのポインタを後方に移動することで変更のキャンセルを実現します。履歴を上書きするような動作だと思うと良いでしょうか：`git reset`はそもそも前のコミットなんかなかったかのように、ブランチのポインタを元に戻してくれます。","","どういう感じか見てみましょう。"],afterMarkdowns:["いいですね！Gitは単純にmasterブランチへのポインタを`C1`へ戻しました。これでこのローカルリポジトリにはまるで`C2`なんて無かったかのように変更をキャンセルできました。"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","自分のマシン上のブランチではさっきの`git reset`でうまくいきましたが、この「履歴を上書きする」手段は、他の人も使っているリモートにあるリポジトリに対しては使うことができません。","","変更を巻き戻して他の人とそれを共有するためには、`git revert`を使う必要があります。今度はこれを見てみましょう。"],afterMarkdowns:["あれ、おかしいな。巻き戻したいと思ってたコミットの下に新しいコミットが出来上がってしまったみたいです。なぜか。これは、この新しい`C2'`コミットは`C2`へ戻すのに必要な内容を確かに変更して巻き戻していたのです。","","こんな風にして、巻き戻した内容を他人と共有するためにはrevertを使います。"],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["この章の仕上げに、`local`と`pushed`の両方の直近のコミットを巻き戻してみましょう。","","`pushed`はリモートのブランチで、`local`はローカルであることに注意。正しくコマンドを使い分けましょう。"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Annuler des changements avec Git","","Il y a de nombreuses façons d'annuler des changement avec Git. De même que pour les commits, annuler des changements avec Git a à la fois un aspect bas-niveau (gestion dans le 'staging' des fichiers et morceaux de fichiers) et un aspect de plus haut niveau 9comment les changements sont effectivement annulés). Nous allons nous intéresser à ce dernier point.","","Il y a principalement deux façons d'annuler des changements avec Git -- l'une est `git reset` et l'autre est `git revert`. Nous allons maintenant voir chacune de ces façons",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","","`git reset` annule des changements en déplaçant la référence en arrière dans le temps sur un commit plus ancien. En ce sens, on peut considérer cela comme une façon de \"réécrire l'histoire\"; `git reset` fait remonter une branche en arrière comme si le(s) commit(s) n'avait jamais eu lieu.","","Regardons à quoi cela ressemble :"],afterMarkdowns:["Bravo ! Git a simplement déplacé la référence de la branche master en la faisant revenir sur `C1`; désormais notre dépôt est dans le même état que si `C2` n'avait jamais eu lieu"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","Bien que le reset marche parfaitement pour les branches locales sur notre propre machine, cette façon de \"réécrire l'histoire\" ne marche pas avec les banches distantes (remote) que d'autres personnes utilisent.","","Pour pouvoir annuler des changements et *partager* ces annulations avec d'autres, nous devons utiliser `git revert`. Regardons comment cela fonctionne"],afterMarkdowns:["Étrangement, un nouveau commit est appaaru en bas sous le commit que nous voulions annuler. C'est parce que ce nouveau commit `C2'` introduit des *modifications* -- celles qui correspondent justement à l'annulation de celles du commit `C2`.","","Avec revert, vous pouvez diffuser (push) vos modifications et les partager avec tout le monde."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Pour accomplir ce niveau, annulez les deux derniers commits à la fois sur `local` et sur `pushed`.","","Ayez à l'esprit que `pushed` est une branche distante et `local` est une branche locale -- cela devrait vous guider dans le choix de la méthode à employer."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 撤销 Git 里面的变动","","在 Git 里撤销修改的方法很多。和 commit 一样，在 Git 里撤销变动同时具有底层部分（暂存一些独立的文件或者片段）和高层部分（具体到变动是究竟怎么被撤销的）。我们这个应用主要关注后者。","","在 Git 里主要用两种方法来撤销变动 —— 一种是 `git reset`，另外一种是 `git revert`。让我们在下一个窗口逐一了解它们。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset`把分支记录回退到上一个提交记录来实现撤销改动。你可以认为这是在"重写历史"。`git reset`往回移动分支，原来指向的提交记录好像重来没有提交过一样。',"","让我们看看具体的操作："],command:"git reset HEAD~1",afterMarkdowns:["Nice!Git把master分支的指向简单地移回到`C1`；现在我们的本地代码库处于没有提交过`C2`的状态了。"],beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","虽然在你的本地分支中使用`git reset`很方便，但是这种“改写历史”的方法对别人的远端分支是无效的哦！","","为了撤销更改并*传播*给别人，我们需要使用`git revert`。举个例子"],command:"git revert HEAD",afterMarkdowns:["怪哉！在我们要撤销的提交记录后面居然多了一个新提交！这是因为新提交记录`C2'`引入了*更改*——刚好是用来撤销 `C2` 这个提交的。","","借助 revert，现在可以把你的更改传递给别人啦。"],beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["要完成此关，分别撤销`local`分支和`pushed`分支上的最近一次提交。","","记住 `pushed` 是一个远程分支，`local` 是一个本地分支 —— 有了这么明显的提示应该知道用哪种方法了吧？"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git에서 작업 되돌리기","","Git에는 작업한 것을 되돌리는 여러가지 방법이 있습니다. 변경내역을 되돌리는 것도 커밋과 마찬가지로 낮은 수준의 일(개별 파일이나 묶음을 스테이징 하는 것)과 높은 수준의 일(실제 변경이 복구되는 방법)이 있는데요, 여기서는 후자에 집중해 알려드릴게요.","","Git에서 변경한 내용을 되돌리는 방법은 크게 두가지가 있습니다 -- 하나는 `git reset`을 쓰는거고, 다른 하나는 `git revert`를 사용하는 것입니다. 다음 화면에서 하나씩 알아보겠습니다.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git 리셋(reset)","",'`git reset`은 브랜치로 하여금 예전의 커밋을 가리키도록 이동시키는 방식으로 변경 내용을 되돌립니다. 이런 관점에서 "히스토리를 고쳐쓴다"라고 말할 수 있습니다. 즉, `git reset`은 마치 애초에 커밋하지 않은 것처럼 예전 커밋으로 브랜치를 옮기는 것입니다.',"","어떤 그림인지 한번 보죠:"],afterMarkdowns:["그림에서처럼 master 브랜치가 가리키던 커밋을 `C1`로 다시 옮겼습니다; 이러면 로컬 저장소에는 마치 `C2`커밋이 아예 없었던 것과 마찬가지 상태가 됩니다."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git 리버트(revert)","",'각자의 컴퓨터에서 작업하는 로컬 브랜치의 경우 리셋(reset)을 잘 쓸 수 있습니다만, "히스토리를 고쳐쓴다"는 점 때문에 다른 사람이 작업하는 리모트 브랜치에는 쓸 수 없습니다.',"","변경분을 되돌리고, 이 되돌린 내용을 다른 사람들과 *공유하기* 위해서는, `git revert`를 써야합니다. 예제로 살펴볼게요."],afterMarkdowns:["어색하게도, 우리가 되돌리려고한 커밋의 아래에 새로운 커밋이 생겼습니다. `C2`라는 새로운 커밋에 *변경내용*이 기록되는데요, 이 변경내역이 정확히 `C2` 커밋 내용의 반대되는 내용입니다.","","리버트를 하면 다른 사람들에게도 변경 내역을 밀어(push) 보낼 수 있습니다."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["이 레벨을 통과하려면, `local` 브랜치와 `pushed` 브랜치에 있는 최근 두 번의 커밋을 되돌려 보세요.","","`pushed`는 리모트 브랜치이고, `local`은 로컬 브랜치임을 신경쓰셔서 작업하세요 -- 어떤 방법을 선택하실지 떠오르시죠?"]}}]}}}}),e("/src/levels/rampup/reversingChanges.js"),e.define("/src/levels/rebase/manyRebases.js",function(e,t,n,r,i,s,o){n.level={compareOnlyMasterHashAgnostic:!0,disabledMap:{"git revert":!0,"git cherry-pick":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22bugFix%22%7D%2C%22side%22%3A%7B%22target%22%3A%22C6%27%22%2C%22id%22%3A%22side%22%7D%2C%22another%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22another%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C6%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C6%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C6%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout bugFix;git rebase master;git checkout side;git rebase bugFix;git checkout another;git rebase side;git rebase another master",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"side":{"target":"C6","id":"side"},"another":{"target":"C7","id":"another"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C0"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C5"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Rebasing over 9000 times",ko:"9천번이 넘는 리베이스",ja:"Rebasing over 9000 times",zh_CN:"N次Rebase"},hint:{en_US:"Remember, the most efficient way might be to only update master at the end...",ja:"最も効率的なやり方はmasterを最後に更新するだけかもしれない・・・",ko:"아마도 master를 마지막에 업데이트하는 것이 가장 효율적인 방법일 것입니다...",zh_CN:"记住，最后更新master分支可能是最高效的方法。"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rebasing Multiple Branches","","Man, we have a lot of branches going on here! Let's rebase all the work from these branches onto master.","","Upper management is making this a bit trickier though -- they want the commits to all be in sequential order. So this means that our final tree should have `C7'` at the bottom, `C6'` above that, etc etc, etc all in order.","","If you mess up along the way, feel free to use `reset` to start over again. Be sure to check out our solution and see if you can do it in fewer commands!"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["### 複数のブランチをリベースする","","さあ、いくつものブランチが出てきます。このブランチたち全てをmasterブランチにリベースしましょう。","","おエライさん方が今回の仕事を少しトリッキーにしてくれました ― コミットはすべて一列のシーケンシャルな状態にしてほしいそうです。つまり私たちが作るリポジトリの最終的なツリーの状態は、`C7'`が最後に来て、`C6'`がその一つ上に来て、、と順に積み重なるイメージです。","","試行錯誤してツリーが汚くなってきたら、`reset`コマンドを使ってツリーの状態を初期化してください。模範解答をチェックして、それよりも簡単なコマンドで済ませられるかどうか、を考えるのも忘れずに！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 多分支衍合","","呐，现在我们有很多分支啦！让我们rebase这些分支的工作到 master 分支上吧。","","但是你的头头找了点麻烦 —— 他们希望得到有序的提交历史，也就是我们最终的结果是 `C7'` 在最底部，`C6'` 在它上面，以此类推。","","假如你搞砸了，没所谓的（虽然我不会告诉你用 `reset` 可以重新开始）。记得看看我们提供的答案，看你能否使用更少的命令完成任务！"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["### 여러 브랜치를 리베이스(rebase)하기 ","","음, 여기 꽤 여러개의 브랜치가 있습니다! 이 브랜치들의 모든 작업내역을 master에 리베이스 해볼까요?","","윗선에서 일을 복잡하게 만드네요 -- 그 분들이 이 모든 커밋들을 순서에 맞게 정렬하라고 합니다. 그럼 결국 우리의 최종 목표 트리는 제일 아래에 `C7'` 커밋, 그 위에 `C6'` 커밋, 또 그 위에 순서대로 보여합니다.","","만일 작업중에 내용이 꼬인다면, `reset`이라고 쳐서 처음부터 다시 시작할 수 있습니다. 모범 답안을 확인해 보시고, 혹시 더 적은 수의 커맨드로 해결할 수 있는지 알아보세요!"]}}]}}}}),e("/src/levels/rebase/manyRebases.js"),e.define("/src/levels/rebase/selectiveRebase.js",function(e,t,n,r,i,s,o){n.level={compareAllBranchesHashAgnostic:!0,disabledMap:{"git revert":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C5%22%2C%22id%22%3A%22master%22%7D%2C%22one%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22one%22%7D%2C%22two%22%3A%7B%22target%22%3A%22C2%27%27%22%2C%22id%22%3A%22two%22%7D%2C%22three%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22three%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C4%27%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C4%27%27%22%7D%2C%22C3%27%27%22%3A%7B%22parents%22%3A%5B%22C4%27%27%22%5D%2C%22id%22%3A%22C3%27%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C3%27%27%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22two%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout one; git cherry-pick C4 C3 C2; git checkout two; git cherry-pick C5 C4 C3 C2; git branch -f three C2",startTree:'{"branches":{"master":{"target":"C5","id":"master"},"one":{"target":"C1","id":"one"},"two":{"target":"C1","id":"two"},"three":{"target":"C1","id":"three"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{ko:"브랜치 스파게티",en_US:"Branch Spaghetti",ja:"ブランチスパゲッティ",zh_CN:"分支浆糊"},hint:{en_US:"Make sure to do everything in the proper order! Branch one first, then two, then three",ja:"全て正しい順番で処理すること！oneが最初で、次がtwo、最後にthreeを片付ける。",ko:"이 문제를 해결하는 방법은 여러가지가 있습니다! 체리픽(cherry-pick)이 가장 쉽지만 오래걸리는 방법이고, 리베이스(rebase -i)가 빠른 방법입니다",zh_CN:"确保你是按照正确的顺序来操作！先操作分支 `one`, 然后 `two`, 最后才是 `three`"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch Spaghetti","","WOAHHHhhh Nelly! We have quite the goal to reach in this level.","","Here we have `master` that is a few commits ahead of branches `one` `two` and `three`. For whatever reason, we need to update these three other branches with modified versions of the last few commits on master.","","Branch `one` needs a re-ordering and a deletion of `C5`. `two` needs pure reordering, and `three` only needs one commit!","","We will let you figure out how to solve this one -- make sure to check out our solution afterwards with `show solution`. "]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ブランチスパゲッティ","","なんということでしょう。今回のレベルクリアのために、やることがたくさんあります。","","いま`master`が指しているコミットの数個前のコミットに、ブランチ`one`、`two`それから`three`があります。何か事情があって、これらの3つのブランチをmasterが指している最新の状態に更新したいケースを考えます。","","ブランチ`one`に対しては、順序の変更と`C5`の削除が必要です。`two`では順序の変更のみ、`three`に対しては1回だけコミットすればOKです。","","`show solution`コマンドで模範解答を確認できますから、こちらも利用してください。 "]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch Spaghetti","","哇塞大神！这关我们要来点不同的！","","现在我们的 `master` 分支是比 `one` `two` 和 `three` 要多几个提交。出于某种原因，我们需要把其他三个分支更新到 master 分支上新近的几个不同提交上。（update these three other brances with modified versions of the last few commits on master）","","分支 `one` 需要重新排序和撤销， `two` 需要完全重排，而 `three` 只需要提交一次。","","慢慢摸索会找到答案的 —— 你完事记得用 `show solution` 看看我们的答案哦。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 브랜치 스파게티","","음, 이번에는 만만치 않습니다!","","여기 `master` 브랜치의 몇 번 이전 커밋에 `one`, `two`,`three` 총 3개의 브랜치가 있습니다. 어떤 이유인지는 몰라도, master의 최근 커밋 몇 개를 나머지 세 개의 브랜치에 반영하려고 합니다.","","`one` 브랜치는 순서를 바꾸고 `C5`커밋을 삭제하고, `two`브랜치는 순서만 바꾸며, `three`브랜치는 하나의 커밋만 가져옵시다!","","자유롭게 이 문제를 풀어보시고 나서 `show solution`명령어로 모범 답안을 확인해보세요."]}}]}}}}),e("/src/levels/rebase/selectiveRebase.js"),e.define("/src/levels/remote/clone.js",function(e,t,n,r,i,s,o){n.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master"},"o/master":{"target":"C1","id":"o/master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"remoteTrackingBranch":null,"remote":false,"target":"C1","id":"master","type":"branch"}},"commits":{"C0":{"type":"commit","parents":[],"author":"Peter Cottle","createTime":"Fri Jul 26 2013 15:56:22 GMT-0700 (PDT)","commitMessage":"Quick commit. Go Bears!","id":"C0","rootCommit":true},"C1":{"type":"commit","parents":["C0"],"author":"Peter Cottle","createTime":"Fri Jul 26 2013 15:56:22 GMT-0700 (PDT)","commitMessage":"Quick commit. Go Bears!","id":"C1"}},"HEAD":{"target":"master","id":"HEAD","type":"general ref"}}}',solutionCommand:"git clone",name:{en_US:"Clone Intro"},hint:{en_US:"Just git clone!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Remote repositories are copies of your project that are hosted elsewhere (typically on the internet). They do a bunch of great things for you:","","- First and foremost, they serve as a great backup! Git repositories obviously have the ability to restore files, but they rely on the filesystem working being in a valid state. Even if your entire laptop blows, your remote repositories will still work great.","","- They also make coding social! Now that a copy of your project is hosted elsewhere, your friends can contribute to your project (or pull in your latest changes) very easily.","","It's become very popular to use websites that visualize activity around remote repos (like [Github](https://github.com/) or [Phabricator](http://phabricator.org/)), but remote repositories _always_ serve as the underlying backbone for these tools. So it's important to understand them!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lets start slow and just look at what a remote repository looks like (in our visualization).","","`git clone` (in the real world) is the command you'll use to create _local_ copies of remote repositories (from github say), but we use it here to simply launch the visualization into a state where there's a remote and local copy.","","","",""],afterMarkdowns:["There it is! Now we have a remote repository of our project. It looks pretty similar except for some visual changes to make the distinction apparent"],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["To finish this level, simply `git clone` your existing repository. The real learning will come in following lessons"]}}]}}}}),e("/src/levels/remote/clone.js")})();